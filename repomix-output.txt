This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-20T19:49:16.390Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
./
  backend/
    src/
      google-books/
        dto/
          swipe-book-response.dto.ts
          swipe-books-request.dto.ts
        google-books.controller.ts
        google-books.module.ts
        google-books.service.ts
      mood-analysis/
        dto/
          book-mood.dto.ts
        book-mood.module.ts
        book-mood.service.ts
      spotify/
        dto/
          spotify-auth.dto.ts
          spotify-track.dto.ts
        spotify.module.ts

================================================================
Repository Files
================================================================

================
File: ./backend/src/google-books/dto/swipe-book-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';

export class SwipeBooksResponseDto {
	@ApiProperty({ example: 'zyTCAlFPjgYC' })
	id: string;

	@ApiProperty({ example: 'The Midnight Library' })
	title: string;

	@ApiProperty({ example: ['Matt Haig'] })
	authors: string[];

	@ApiProperty({
		example: 'Between life and death there is a library...',
	})
	description: string;

	@ApiProperty({
		example:
			'https://books.google.com/books/content?id=xyz&printsec=frontcover',
	})
	coverImage: string;

	@ApiProperty({ example: ['Fiction'] })
	categories: string[];

	@ApiProperty({ example: 4.5 })
	rating: number;

	@ApiProperty({ example: 304 })
	pageCount: number;

	@ApiProperty({ example: '2020-09-29' })
	publishedDate: string;
}

================
File: ./backend/src/google-books/dto/swipe-books-request.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsOptional, IsInt, Min, Max } from 'class-validator';
import { Type } from 'class-transformer';

export class SwipeBooksRequestDto {
	@ApiProperty({
		description: 'Number of books to return',
		minimum: 1,
		maximum: 40,
		default: 10,
		required: false,
	})
	@IsOptional()
	@IsInt()
	@Min(1)
	@Max(40)
	@Type(() => Number)
	limit?: number;
}

================
File: ./backend/src/google-books/google-books.controller.ts
================
import { Controller, Get, Query } from '@nestjs/common';
import { ApiTags, ApiResponse } from '@nestjs/swagger';
import { GoogleBooksService } from './google-books.service';
import { SwipeBooksRequestDto } from './dto/swipe-books-request.dto';
import { SwipeBooksResponseDto } from './dto/swipe-book-response.dto';

@ApiTags('Books')
@Controller('books')
export class GoogleBooksController {
	constructor(private readonly googleBooksService: GoogleBooksService) {}

	@Get('swipe')
	@ApiResponse({
		status: 200,
		description: 'Returns a list of books for swiping',
		type: [SwipeBooksResponseDto],
	})
	async getSwipeBooks(@Query() query: SwipeBooksRequestDto) {
		return this.googleBooksService.getSwipeBooks(query);
	}
}

================
File: ./backend/src/google-books/google-books.module.ts
================
import { Module } from '@nestjs/common';
import { CacheModule } from '@nestjs/cache-manager';
import { GoogleBooksController } from './google-books.controller';
import { GoogleBooksService } from './google-books.service';

@Module({
	imports: [
		CacheModule.register({
			ttl: 3600,
			max: 100,
		}),
	],
	controllers: [GoogleBooksController],
	providers: [GoogleBooksService],
	exports: [GoogleBooksService], // Export if you need to use in other modules
})
export class GoogleBooksModule {}

================
File: ./backend/src/google-books/google-books.service.ts
================
import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import axios from 'axios';
import { SwipeBooksRequestDto } from './dto/swipe-books-request.dto';
import { SwipeBooksResponseDto } from './dto/swipe-book-response.dto';
import { ConfigService } from '@nestjs/config';
import { Cache } from 'cache-manager';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject } from '@nestjs/common';

@Injectable()
export class GoogleBooksService {
	private readonly GOOGLE_BOOKS_API =
		'https://www.googleapis.com/books/v1/volumes';
	private readonly DEFAULT_SUBJECT = 'fiction';
	private readonly API_KEY: string;
	private readonly CACHE_TTL = 3600; // 1 hour

	constructor(
		private configService: ConfigService,
		@Inject(CACHE_MANAGER) private cacheManager: Cache,
	) {
		this.API_KEY = this.configService.get('GOOGLE_BOOKS_API_KEY', {
			infer: true,
		}) as string;
		if (!this.API_KEY) {
			throw new Error('GOOGLE_BOOKS_API_KEY is not defined');
		}
	}

	async getSwipeBooks(
		query: SwipeBooksRequestDto,
		subject?: string,
	): Promise<SwipeBooksResponseDto[]> {
		const limit = query.limit || 10;
		const selectedSubject = subject || this.DEFAULT_SUBJECT;
		const cacheKey = `swipe-books-${limit}-${selectedSubject}`;

		// Try to get from cache first
		const cachedBooks =
			await this.cacheManager.get<SwipeBooksResponseDto[]>(cacheKey);
		if (cachedBooks) {
			return cachedBooks;
		}

		try {
			const books = await this.fetchBooks(limit, selectedSubject);
			// Cache the results
			await this.cacheManager.set(cacheKey, books, this.CACHE_TTL);
			return books;
		} catch (error) {
			this.handleError(error);
		}
	}

	private async fetchBooks(
		limit: number,
		subject: string,
	): Promise<SwipeBooksResponseDto[]> {
		const startIndex = Math.floor(Math.random() * 100); // Random starting point for variety

		const response = await axios.get(this.GOOGLE_BOOKS_API, {
			params: {
				q: `subject:${subject}`,
				maxResults: limit,
				startIndex,
				langRestrict: 'en',
				key: this.API_KEY,
				fields:
					'items(id,volumeInfo(title,authors,description,imageLinks,categories,averageRating,pageCount,publishedDate))',
				orderBy: 'relevance',
				printType: 'books',
			},
		});

		if (!response.data.items) {
			return [];
		}

		return this.processBooks(response.data.items);
	}

	private processBooks(books: any[]): SwipeBooksResponseDto[] {
		return books
			.filter((book) => this.isValidBook(book))
			.map((book) => this.mapBookToDto(book));
	}

	private isValidBook(book: any): boolean {
		return (
			book.volumeInfo &&
			book.volumeInfo.title &&
			book.volumeInfo.imageLinks?.thumbnail &&
			book.volumeInfo.description
		);
	}

	private mapBookToDto(book: any): SwipeBooksResponseDto {
		const volumeInfo = book.volumeInfo;
		return {
			id: book.id,
			title: volumeInfo.title,
			authors: volumeInfo.authors || ['Unknown Author'],
			description: this.truncateDescription(volumeInfo.description),
			coverImage: this.processImageUrl(volumeInfo.imageLinks?.thumbnail),
			categories: volumeInfo.categories || [this.DEFAULT_SUBJECT],
			rating: volumeInfo.averageRating || 0,
			pageCount: volumeInfo.pageCount || 0,
			publishedDate: volumeInfo.publishedDate || 'Unknown',
		};
	}

	private processImageUrl(url: string): string {
		if (!url) return 'https://via.placeholder.com/128x196?text=No+Cover';
		return url.replace('http:', 'https:').replace('&edge=curl', '');
	}

	private truncateDescription(description?: string): string {
		if (!description) return 'No description available';
		return description.length > 250
			? `${description.substring(0, 250)}...`
			: description;
	}

	private handleError(error: any): never {
		const message =
			error.response?.data?.error?.message || 'Failed to fetch books';
		const status = error.response?.status || HttpStatus.INTERNAL_SERVER_ERROR;
		throw new HttpException(message, status);
	}
}

================
File: ./backend/src/mood-analysis/dto/book-mood.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';

export class BookMoodAttributesDto {
	@ApiProperty({ example: 0.7 })
	valence: number;

	@ApiProperty({ example: 0.6 })
	energy: number;

	@ApiProperty({ example: 0.5 })
	acousticness: number;

	@ApiProperty({ example: 0.4 })
	danceability: number;
}

export class BookMoodAnalysisDto {
	@ApiProperty({ type: BookMoodAttributesDto })
	moodAttributes: BookMoodAttributesDto;

	@ApiProperty({ example: 'romantic' })
	primaryMood: string;

	@ApiProperty({ example: ['pop', 'indie-pop'] })
	musicalGenres: string[];

	@ApiProperty({ example: 'medium' })
	tempo: string;

	@ApiProperty({ example: 'major' })
	keySignature: string;

	@ApiProperty({ example: ['love', 'relationships'] })
	themes: string[];
}

================
File: ./backend/src/mood-analysis/book-mood.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { MoodAnalysisService } from './mood-analysis.service';

@Module({
	imports: [ConfigModule],
	providers: [MoodAnalysisService],
	exports: [MoodAnalysisService],
})
export class MoodAnalysisModule {}

================
File: ./backend/src/mood-analysis/book-mood.service.ts
================
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { BookMoodAnalysisDto } from './dto/book-mood.dto';

@Injectable()
export class MoodAnalysisService {
	private readonly logger = new Logger(MoodAnalysisService.name);
	private genAI: GoogleGenerativeAI;
	private model: any;

	constructor(private configService: ConfigService) {
		const apiKey = this.configService.get('GEMINI_API_KEY');
		if (!apiKey) {
			throw new Error('GEMINI_API_KEY is not defined');
		}

		this.genAI = new GoogleGenerativeAI(apiKey);
		this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.0-pro' });
	}

	async analyzeBookMood(book: {
		title: string;
		description: string;
		categories: string[];
	}): Promise<BookMoodAnalysisDto> {
		try {
			this.logger.log(`Analyzing mood for book: ${book.title}`);

			const prompt = `
        Analyze this book's mood and atmosphere for music recommendation purposes:
        
        Title: ${book.title}
        Categories: ${book.categories.join(', ')}
        Description: ${book.description}

        Respond only with a JSON object containing:
        {
          "moodAttributes": {
            "valence": <number 0-1, representing positivity>,
            "energy": <number 0-1, representing intensity>,
            "acousticness": <number 0-1>,
            "danceability": <number 0-1>
          },
          "primaryMood": <one of: "happy", "sad", "mysterious", "romantic", "dark", "energetic", "calm", "epic">,
          "musicalGenres": <array of 2-3 most fitting Spotify genres>,
          "tempo": <"slow", "medium", "fast">,
          "keySignature": <"major" or "minor">,
          "themes": <array of 2-3 main themes>
        }
      `;

			const result = await this.model.generateContent(prompt);
			const response = result.response.text();

			const analysis = JSON.parse(response);
			this.logger.debug('Mood analysis result:', analysis);

			return analysis;
		} catch (error) {
			this.logger.error(`Error analyzing book mood: ${error.message}`);
			return this.getFallbackAnalysis(book.categories[0]);
		}
	}

	private getFallbackAnalysis(category: string): BookMoodAnalysisDto {
		const defaultMoods: Record<string, BookMoodAnalysisDto> = {
			Romance: {
				moodAttributes: {
					valence: 0.7,
					energy: 0.5,
					acousticness: 0.6,
					danceability: 0.6,
				},
				primaryMood: 'romantic',
				musicalGenres: ['pop', 'indie-pop'],
				tempo: 'medium',
				keySignature: 'major',
				themes: ['love', 'relationships'],
			},
			Mystery: {
				moodAttributes: {
					valence: 0.4,
					energy: 0.6,
					acousticness: 0.4,
					danceability: 0.3,
				},
				primaryMood: 'mysterious',
				musicalGenres: ['ambient', 'electronic'],
				tempo: 'slow',
				keySignature: 'minor',
				themes: ['suspense', 'intrigue'],
			},
			// Add more genre mappings as needed
		};

		return (
			defaultMoods[category] || {
				moodAttributes: {
					valence: 0.5,
					energy: 0.5,
					acousticness: 0.5,
					danceability: 0.5,
				},
				primaryMood: 'calm',
				musicalGenres: ['indie', 'ambient'],
				tempo: 'medium',
				keySignature: 'major',
				themes: ['general'],
			}
		);
	}
}

================
File: ./backend/src/spotify/dto/spotify-auth.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';

export class SpotifyAuthDto {
	@ApiProperty({
		description: 'Spotify access token',
		example: 'BQD1QvN...mxd6A',
	})
	accessToken: string;

	@ApiProperty({
		description: 'Spotify refresh token',
		example: 'AQAz...uXyA',
	})
	refreshToken: string;

	@ApiProperty({
		description: 'Token expiration time in seconds',
		example: 3600,
	})
	expiresIn: number;
}

export class SpotifyCallbackDto {
	@ApiProperty({
		description: 'Authorization code from Spotify',
		example: 'AQD...XyZ',
	})
	code: string;

	@ApiProperty({
		description: 'State parameter for security',
		example: 'some-state-value',
	})
	state?: string;
}

================
File: ./backend/src/spotify/dto/spotify-track.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';

export class SpotifyTrackDto {
	@ApiProperty({
		example: '11dFghVXANMlKmJXsNCbNl',
	})
	id: string;

	@ApiProperty({
		example: 'Cut To The Feeling',
	})
	name: string;

	@ApiProperty({
		example: 'Carly Rae Jepsen',
	})
	artist: string;

	@ApiProperty({
		example: 'Emotion',
	})
	albumName: string;

	@ApiProperty({
		example: 'https://p.scdn.co/mp3-preview/...',
	})
	previewUrl: string | null;

	@ApiProperty({
		example: 'https://open.spotify.com/track/...',
	})
	spotifyUrl: string;

	@ApiProperty({
		example: 'https://i.scdn.co/image/...',
	})
	imageUrl: string;
}

================
File: ./backend/src/spotify/spotify.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { CacheModule } from '@nestjs/cache-manager';
import { SpotifyController } from './spotify.controller';
import { SpotifyService } from './spotify.service';

@Module({
	imports: [
		ConfigModule,
		CacheModule.register({
			ttl: 3600,
			max: 100,
		}),
	],
	controllers: [SpotifyController],
	providers: [SpotifyService],
	exports: [SpotifyService],
})
export class SpotifyModule {}
