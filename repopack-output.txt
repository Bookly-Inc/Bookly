This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-11T04:15:30.721Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
backend/
  .github/
    ISSUE_TEMPLATE/
      bug_report.md
    workflows/
      docker-e2e.yml
  .husky/
    commit-msg
    pre-commit
  .hygen/
    generate/
      all-db-resource/
        domain/
          domain.ejs.t
        dto/
          create.dto.ejs.t
          domain.dto.ejs.t
          find-all.dto.ejs.t
          update.dto.ejs.t
        infrastructure/
          persistence/
            document/
              entities/
                schema.ejs.t
              mappers/
                mapper.ejs.t
              repositories/
                repository.ejs.t
              document-persistence.module.ejs.t
            relational/
              entities/
                entity.ejs.t
              mappers/
                mapper.ejs.t
              repositories/
                repository.ejs.t
              relational-persistence.module.ejs.t
            repository.ejs.t
        app-module-import.ejs.t
        app-module.ejs.t
        controller.ejs.t
        module.ejs.t
        service.ejs.t
      document-resource/
        domain/
          domain.ejs.t
        dto/
          create.dto.ejs.t
          domain.dto.ejs.t
          find-all.dto.ejs.t
          update.dto.ejs.t
        infrastructure/
          persistence/
            document/
              entities/
                schema.ejs.t
              mappers/
                mapper.ejs.t
              repositories/
                repository.ejs.t
              document-persistence.module.ejs.t
            repository.ejs.t
        app-module-import.ejs.t
        app-module.ejs.t
        controller.ejs.t
        module.ejs.t
        service.ejs.t
      relational-resource/
        domain/
          domain.ejs.t
        dto/
          create.dto.ejs.t
          domain.dto.ejs.t
          find-all.dto.ejs.t
          update.dto.ejs.t
        infrastructure/
          persistence/
            relational/
              entities/
                entity.ejs.t
              mappers/
                mapper.ejs.t
              repositories/
                repository.ejs.t
              relational-persistence.module.ejs.t
            repository.ejs.t
        app-module-import.ejs.t
        app-module.ejs.t
        controller.ejs.t
        module.ejs.t
        service.ejs.t
    property/
      add-to-all-db/
        domain/
          domain-import.ejs.t
          domain.ejs.t
        dto/
          01-create.dto.ejs.t
          02-create-import-class-transformer.dto.ejs.t
          03-create-import-class-validator.dto.ejs.t
          04-create-import-swagger.dto.ejs.t
          05-create-boolean.dto.ejs.t
          06-create-number.dto.ejs.t
          07-create-string.dto.ejs.t
          08-create-api-property.dto.ejs.t
          09-create-class-transformer-type.dto.ejs.t
          10-create-validate-is-array.dto.ejs.t
          11-create-validate-nested.dto.ejs.t
          12-create-validate-not-empty-object.dto.ejs.t
          13-create-type-dto-import.ejs.t
          14-create-optional.dto.ejs.t
        infrastructure/
          persistence/
            document/
              entities/
                schema-mongoose-import.ejs.t
                schema.ejs.t
                type-import.ejs.t
              mappers/
                mapper-domain.ejs.t
                mapper-import.ejs.t
                mapper-persistence.ejs.t
            relational/
              entities/
                entity-column.ejs.t
                entity-join-column.ejs.t
                entity-many-to-many.ejs.t
                entity-many-to-one.ejs.t
                entity-one-to-many.ejs.t
                entity-one-to-one.ejs.t
                entity.ejs.t
                type-import.ejs.t
              mappers/
                mapper-domain.ejs.t
                mapper-import.ejs.t
                mapper-persistence.ejs.t
        index.js
        module-import.ejs.t
        module.ejs.t
        service-create-payload.ejs.t
        service-create.ejs.t
        service-import-http-code.ejs.t
        service-import-type-domain.ejs.t
        service-import.ejs.t
        service-inject.ejs.t
        service-update-payload.ejs.t
        service-update.ejs.t
      add-to-document/
        domain/
          domain-import.ejs.t
          domain.ejs.t
        dto/
          01-create.dto.ejs.t
          02-create-import-class-transformer.dto.ejs.t
          03-create-import-class-validator.dto.ejs.t
          04-create-import-swagger.dto.ejs.t
          05-create-boolean.dto.ejs.t
          06-create-number.dto.ejs.t
          07-create-string.dto.ejs.t
          08-create-api-property.dto.ejs.t
          09-create-class-transformer-type.dto.ejs.t
          10-create-validate-is-array.dto.ejs.t
          11-create-validate-nested.dto.ejs.t
          12-create-validate-not-empty-object.dto.ejs.t
          13-create-type-dto-import.ejs.t
          14-create-optional.dto.ejs.t
        infrastructure/
          persistence/
            document/
              entities/
                schema-mongoose-import.ejs.t
                schema.ejs.t
                type-import.ejs.t
              mappers/
                mapper-domain.ejs.t
                mapper-import.ejs.t
                mapper-persistence.ejs.t
        index.js
        module-import.ejs.t
        module.ejs.t
        service-create-payload.ejs.t
        service-create.ejs.t
        service-import-http-code.ejs.t
        service-import-type-domain.ejs.t
        service-import.ejs.t
        service-inject.ejs.t
        service-update-payload.ejs.t
        service-update.ejs.t
      add-to-relational/
        domain/
          domain-import.ejs.t
          domain.ejs.t
        dto/
          01-create.dto.ejs.t
          02-create-import-class-transformer.dto.ejs.t
          03-create-import-class-validator.dto.ejs.t
          04-create-import-swagger.dto.ejs.t
          05-create-boolean.dto.ejs.t
          06-create-number.dto.ejs.t
          07-create-string.dto.ejs.t
          08-create-api-property.dto.ejs.t
          09-create-class-transformer-type.dto.ejs.t
          10-create-validate-is-array.dto.ejs.t
          11-create-validate-nested.dto.ejs.t
          12-create-validate-not-empty-object.dto.ejs.t
          13-create-type-dto-import.ejs.t
          14-create-optional.dto.ejs.t
        infrastructure/
          persistence/
            relational/
              entities/
                entity-column.ejs.t
                entity-join-column.ejs.t
                entity-many-to-many.ejs.t
                entity-many-to-one.ejs.t
                entity-one-to-many.ejs.t
                entity-one-to-one.ejs.t
                entity.ejs.t
                type-import.ejs.t
              mappers/
                mapper-domain.ejs.t
                mapper-import.ejs.t
                mapper-persistence.ejs.t
        index.js
        module-import.ejs.t
        module.ejs.t
        service-create-payload.ejs.t
        service-create.ejs.t
        service-import-http-code.ejs.t
        service-import-type-domain.ejs.t
        service-import.ejs.t
        service-inject.ejs.t
        service-update-payload.ejs.t
        service-update.ejs.t
    seeds/
      create-document/
        module.ejs.t
        run-seed-import.ejs.t
        run-seed-service.ejs.t
        seed-module-import.ejs.t
        seed-module.ejs.t
        service.ejs.t
      create-relational/
        module.ejs.t
        run-seed-import.ejs.t
        run-seed-service.ejs.t
        seed-module-import.ejs.t
        seed-module.ejs.t
        service.ejs.t
  .install-scripts/
    helpers/
      replace.ts
    scripts/
      property-generation-scripts/
        remove-all-db.ts
        remove-document.ts
        remove-relational.ts
      resource-generation-scripts/
        remove-all-db.ts
        remove-document.ts
        remove-relational.ts
      remove-auth-apple.ts
      remove-auth-facebook.ts
      remove-auth-google.ts
      remove-auth-twitter.ts
      remove-install-scripts.ts
      remove-mongodb.ts
      remove-postgresql.ts
    index.ts
  .vscode/
    extensions.json
    settings.json
  docs/
    architecture.md
    auth.md
    automatic-update-dependencies.md
    benchmarking.md
    cli.md
    database.md
    file-uploading.md
    installing-and-running.md
    introduction.md
    readme.md
    serialization.md
    tests.md
  src/
    auth/
      config/
        auth-config.type.ts
        auth.config.ts
      dto/
        auth-confirm-email.dto.ts
        auth-email-login.dto.ts
        auth-forgot-password.dto.ts
        auth-register-login.dto.ts
        auth-reset-password.dto.ts
        auth-update.dto.ts
        login-response.dto.ts
        refresh-response.dto.ts
      strategies/
        types/
          jwt-payload.type.ts
          jwt-refresh-payload.type.ts
        anonymous.strategy.ts
        jwt-refresh.strategy.ts
        jwt.strategy.ts
      auth-providers.enum.ts
      auth.controller.ts
      auth.module.ts
      auth.service.ts
    auth-apple/
      config/
        apple-config.type.ts
        apple.config.ts
      dto/
        auth-apple-login.dto.ts
      auth-apple.controller.ts
      auth-apple.module.ts
      auth-apple.service.ts
    auth-facebook/
      config/
        facebook-config.type.ts
        facebook.config.ts
      dto/
        auth-facebook-login.dto.ts
      interfaces/
        facebook.interface.ts
      auth-facebook.controller.ts
      auth-facebook.module.ts
      auth-facebook.service.ts
    auth-google/
      config/
        google-config.type.ts
        google.config.ts
      dto/
        auth-google-login.dto.ts
      auth-google.controller.ts
      auth-google.module.ts
      auth-google.service.ts
    auth-twitter/
      config/
        twitter-config.type.ts
        twitter.config.ts
      dto/
        auth-twitter-login.dto.ts
      auth-twitter.controller.ts
      auth-twitter.module.ts
      auth-twitter.service.ts
    config/
      app-config.type.ts
      app.config.ts
      config.type.ts
    database/
      config/
        database-config.type.ts
        database.config.ts
      migrations/
        1715028537217-CreateUser.ts
      seeds/
        document/
          user/
            user-seed.module.ts
            user-seed.service.ts
          run-seed.ts
          seed.module.ts
        relational/
          role/
            role-seed.module.ts
            role-seed.service.ts
          status/
            status-seed.module.ts
            status-seed.service.ts
          user/
            user-seed.module.ts
            user-seed.service.ts
          run-seed.ts
          seed.module.ts
      data-source.ts
      mongoose-config.service.ts
      typeorm-config.service.ts
    files/
      config/
        file-config.type.ts
        file.config.ts
      domain/
        file.ts
      dto/
        file.dto.ts
      infrastructure/
        persistence/
          document/
            entities/
              file.schema.ts
            mappers/
              file.mapper.ts
            repositories/
              file.repository.ts
            document-persistence.module.ts
          relational/
            entities/
              file.entity.ts
            mappers/
              file.mapper.ts
            repositories/
              file.repository.ts
            relational-persistence.module.ts
          file.repository.ts
        uploader/
          local/
            dto/
              file-response.dto.ts
            files.controller.ts
            files.module.ts
            files.service.ts
          s3/
            dto/
              file-response.dto.ts
            files.controller.ts
            files.module.ts
            files.service.ts
          s3-presigned/
            dto/
              file-response.dto.ts
              file.dto.ts
            files.controller.ts
            files.module.ts
            files.service.ts
      files.module.ts
      files.service.ts
    home/
      home.controller.ts
      home.module.ts
      home.service.ts
    i18n/
      en/
        common.json
        confirm-email.json
        confirm-new-email.json
        reset-password.json
    mail/
      config/
        mail-config.type.ts
        mail.config.ts
      interfaces/
        mail-data.interface.ts
      mail-templates/
        activation.hbs
        confirm-new-email.hbs
        reset-password.hbs
      mail.module.ts
      mail.service.ts
    mailer/
      mailer.module.ts
      mailer.service.ts
    roles/
      domain/
        role.ts
      dto/
        role.dto.ts
      infrastructure/
        persistence/
          document/
            entities/
              role.schema.ts
          relational/
            entities/
              role.entity.ts
      roles.decorator.ts
      roles.enum.ts
      roles.guard.ts
    session/
      domain/
        session.ts
      infrastructure/
        persistence/
          document/
            entities/
              session.schema.ts
            mappers/
              session.mapper.ts
            repositories/
              session.repository.ts
            document-persistence.module.ts
          relational/
            entities/
              session.entity.ts
            mappers/
              session.mapper.ts
            repositories/
              session.repository.ts
            relational-persistence.module.ts
          session.repository.ts
      session.module.ts
      session.service.ts
    social/
      interfaces/
        social.interface.ts
      tokens.ts
    statuses/
      domain/
        status.ts
      dto/
        status.dto.ts
      infrastructure/
        persistence/
          document/
            entities/
              status.schema.ts
          relational/
            entities/
              status.entity.ts
      statuses.enum.ts
    users/
      domain/
        user.ts
      dto/
        create-user.dto.ts
        query-user.dto.ts
        update-user.dto.ts
        user.dto.ts
      infrastructure/
        persistence/
          document/
            entities/
              user.schema.ts
            mappers/
              user.mapper.ts
            repositories/
              user.repository.ts
            document-persistence.module.ts
          relational/
            entities/
              user.entity.ts
            mappers/
              user.mapper.ts
            repositories/
              user.repository.ts
            relational-persistence.module.ts
          user.repository.ts
      users.controller.ts
      users.module.ts
      users.service.ts
    utils/
      dto/
        infinity-pagination-response.dto.ts
      transformers/
        lower-case.transformer.ts
      types/
        deep-partial.type.ts
        maybe.type.ts
        nullable.type.ts
        or-never.type.ts
        pagination-options.ts
      deep-resolver.ts
      document-entity-helper.ts
      infinity-pagination.ts
      relational-entity-helper.ts
      serializer.interceptor.ts
      validate-config.ts
      validation-options.ts
    app.module.ts
    main.ts
  test/
    admin/
      auth.e2e-spec.ts
      users.e2e-spec.ts
    user/
      auth.e2e-spec.ts
    utils/
      constants.ts
    jest-e2e.json
  .all-contributorsrc
  .dockerignore
  .gitignore
  .hygen.js
  .nvmrc
  .prettierrc
  CHANGELOG.md
  CODE_OF_CONDUCT.md
  commitlint.config.js
  docker-compose.document.ci.yaml
  docker-compose.document.test.yaml
  docker-compose.document.yaml
  docker-compose.relational.ci.yaml
  docker-compose.relational.test.yaml
  docker-compose.yaml
  Dockerfile
  document.Dockerfile
  document.e2e.Dockerfile
  document.test.Dockerfile
  env-example-document
  env-example-relational
  eslint.config.mjs
  LICENSE
  maildev.Dockerfile
  nest-cli.json
  package.json
  Procfile
  README.md
  relational.e2e.Dockerfile
  relational.test.Dockerfile
  renovate.json
  startup.document.ci.sh
  startup.document.dev.sh
  startup.document.test.sh
  startup.relational.ci.sh
  startup.relational.dev.sh
  startup.relational.test.sh
  tsconfig.build.json
  tsconfig.json
  wait-for-it.sh
frontend/
  .github/
    workflows/
      checkly.yml
      CI.yml
      crowdin.yml
      release.yml
      update-deps.yml
    FUNDING.yml
  .husky/
    commit-msg
    pre-commit
  .storybook/
    main.ts
    preview.ts
  .vscode/
    extensions.json
    i18n-ally-custom-framework.yml
    launch.json
    settings.json
    tasks.json
  migrations/
    meta/
      _journal.json
      0000_snapshot.json
    0000_init-db.sql
  public/
    assets/
      images/
        codecov-dark.svg
        codecov-white.svg
  src/
    app/
      [locale]/
        (auth)/
          (center)/
            sign-in/
              [[...sign-in]]/
                page.tsx
            sign-up/
              [[...sign-up]]/
                page.tsx
            layout.tsx
          dashboard/
            user-profile/
              [[...user-profile]]/
                page.tsx
            layout.tsx
            page.tsx
          layout.tsx
        (unauth)/
          about/
            page.tsx
          api/
            counter/
              route.ts
          counter/
            page.tsx
          portfolio/
            [slug]/
              page.tsx
            page.tsx
          layout.tsx
          page.tsx
        layout.tsx
      global-error.tsx
      robots.ts
      sitemap.ts
    components/
      CounterForm.tsx
      CurrentCount.tsx
      DemoBadge.tsx
      DemoBanner.tsx
      Hello.tsx
      LocaleSwitcher.tsx
      Sponsors.tsx
    libs/
      DB.ts
      Env.ts
      i18n.ts
      i18nNavigation.ts
      Logger.ts
    locales/
      en.json
      fr.json
    models/
      Schema.ts
    styles/
      global.css
    templates/
      BaseTemplate.stories.tsx
      BaseTemplate.test.tsx
      BaseTemplate.tsx
    types/
      global.d.ts
    utils/
      AppConfig.ts
      Helpers.test.ts
      Helpers.ts
    validations/
      CounterValidation.ts
    instrumentation.ts
    middleware.ts
  tests/
    e2e/
      Counter.e2e.ts
      I18n.e2e.ts
      Sanity.check.e2e.ts
      Visual.e2e.ts
    integration/
      Counter.spec.ts
  .env
  .env.production
  .gitignore
  CHANGELOG.md
  checkly.config.ts
  codecov.yml
  commitlint.config.ts
  crowdin.yml
  drizzle.config.ts
  eslint.config.mjs
  LICENSE
  lint-staged.config.js
  next-env.d.ts
  next.config.mjs
  package.json
  playwright.config.ts
  postcss.config.js
  README.md
  sentry.client.config.ts
  tailwind.config.ts
  tsconfig.json
  vitest-setup.ts
  vitest.config.mts
milestones/
  milestone1.md
  milestone2.md
  milestone3.md
  milestone4.md
  milestone5.md
planning/
  entity_relationship_diagram.md
  user_stories.md
  wireframes.md
README.md

================================================================
Repository Files
================================================================

================
File: backend/.github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: Shchepotin

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Send '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. Windows]
 - NodeJS Version [e.g. 18.16.0]
 - Database [e.g. PostgreSQL]

**Additional context**
Add any other context about the problem here.

================
File: backend/.github/workflows/docker-e2e.yml
================
name: NestJS API CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # <database-relational-block>
      - name: Run e2e tests for NestJS with TypeORM
        id: relational
        run: docker compose -f docker-compose.relational.ci.yaml --env-file env-example-relational -p ci-relational up --build --exit-code-from api

      - name: Copy prod.log from container to host
        if: ${{ failure() && steps.relational.conclusion == 'failure' }}
        run: docker cp ci-relational-api-1:/usr/src/app/prod.log .
      # </database-relational-block>

      # <database-document-block>
      - name: Run e2e tests for NestJS with Mongoose
        id: document
        run: docker compose -f docker-compose.document.ci.yaml --env-file env-example-document -p ci-document up --build --exit-code-from api

      - name: Copy prod.log from container to host
        if: ${{ failure() && steps.document.conclusion == 'failure' }}
        run: docker cp ci-document-api-1:/usr/src/app/prod.log .
      # </database-document-block>

      - name: Upload prod.log to artifacts for debugging
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: prod-logs
          path: prod.log

================
File: backend/.husky/commit-msg
================
npx commitlint --edit

================
File: backend/.husky/pre-commit
================
npm run lint
npm run test -- --passWithNoTests

================
File: backend/.hygen/generate/all-db-resource/domain/domain.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
---
import { ApiProperty } from '@nestjs/swagger';

export class <%= name %> {
  @ApiProperty({
    type: String,
  })
  id: string;

  @ApiProperty()
  createdAt: Date;

  @ApiProperty()
  updatedAt: Date;
}

================
File: backend/.hygen/generate/all-db-resource/dto/create.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
export class Create<%= name %>Dto {
  // Don't forget to use the class-validator decorators in the DTO properties.
}

================
File: backend/.hygen/generate/all-db-resource/dto/domain.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty, IsString } from 'class-validator';

export class <%= name %>Dto {
  @ApiProperty()
  @IsString()
  @IsNotEmpty()
  id: string;
}

================
File: backend/.hygen/generate/all-db-resource/dto/find-all.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto.ts
---
import { ApiPropertyOptional } from '@nestjs/swagger';
import { IsNumber, IsOptional } from 'class-validator';
import { Transform } from 'class-transformer';

export class FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto {
  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 1))
  @IsNumber()
  @IsOptional()
  page?: number;

  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 10))
  @IsNumber()
  @IsOptional()
  limit?: number;
}

================
File: backend/.hygen/generate/all-db-resource/dto/update.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
// Don't forget to use the class-validator decorators in the DTO properties.
// import { Allow } from 'class-validator';

import { PartialType } from '@nestjs/swagger';
import { Create<%= name %>Dto } from './create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';

export class Update<%= name %>Dto extends PartialType(Create<%= name %>Dto) {}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/document/entities/schema.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
---
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { now, HydratedDocument } from 'mongoose';
import { EntityDocumentHelper } from '../../../../../utils/document-entity-helper';

export type <%= name %>SchemaDocument = HydratedDocument<<%= name %>SchemaClass>;

@Schema({
  timestamps: true,
  toJSON: {
    virtuals: true,
    getters: true,
  },
})
export class <%= name %>SchemaClass extends EntityDocumentHelper {
  @Prop({ default: now })
  createdAt: Date;

  @Prop({ default: now })
  updatedAt: Date;
}

export const <%= name %>Schema = SchemaFactory.createForClass(<%= name %>SchemaClass);

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/document/mappers/mapper.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
---
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>SchemaClass } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';

export class <%= name %>Mapper {
  public static toDomain(raw: <%= name %>SchemaClass): <%= name %> {
    const domainEntity = new <%= name %>();
    domainEntity.id = raw._id.toString();
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;

    return domainEntity;
  }

  public static toPersistence(domainEntity: <%= name %>): <%= name %>SchemaClass {
    const persistenceSchema = new <%= name %>SchemaClass();
    if (domainEntity.id) {
      persistenceSchema._id = domainEntity.id;
    }
    persistenceSchema.createdAt = domainEntity.createdAt;
    persistenceSchema.updatedAt = domainEntity.updatedAt;

    return persistenceSchema;
  }
}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/document/repositories/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { Injectable } from '@nestjs/common';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { <%= name %>SchemaClass } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';
import { <%= name %>Repository } from '../../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Mapper } from '../mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class <%= name %>DocumentRepository implements <%= name %>Repository {
  constructor(
    @InjectModel(<%= name %>SchemaClass.name)
    private readonly <%= h.inflection.camelize(name, true) %>Model: Model<<%= name %>SchemaClass>,
  ) {}

  async create(data: <%= name %>): Promise<<%= name %>> {
    const persistenceModel = <%= name %>Mapper.toPersistence(data);
    const createdEntity = new this.<%= h.inflection.camelize(name, true) %>Model(persistenceModel);
    const entityObject = await createdEntity.save();
    return <%= name %>Mapper.toDomain(entityObject);
  }

  async findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]> {
    const entityObjects = await this.<%= h.inflection.camelize(name, true) %>Model
      .find()
      .skip((paginationOptions.page - 1) * paginationOptions.limit)
      .limit(paginationOptions.limit);

    return entityObjects.map((entityObject) =>
      <%= name %>Mapper.toDomain(entityObject),
    );
  }

  async findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>> {
    const entityObject = await this.<%= h.inflection.camelize(name, true) %>Model.findById(id);
    return entityObject ? <%= name %>Mapper.toDomain(entityObject) : null;
  }

  async findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]> {
    const entityObjects = await this.<%= h.inflection.camelize(name, true) %>Model.find({ _id: { $in: ids } });
    return entityObjects.map((entityObject) =>
      <%= name %>Mapper.toDomain(entityObject),
    );
  }

  async update(
    id: <%= name %>['id'],
    payload: Partial<<%= name %>>,
  ): Promise<NullableType<<%= name %>>> {
    const clonedPayload = { ...payload };
    delete clonedPayload.id;

    const filter = { _id: id.toString() };
    const entity = await this.<%= h.inflection.camelize(name, true) %>Model.findOne(filter);

    if (!entity) {
      throw new Error('Record not found');
    }

    const entityObject = await this.<%= h.inflection.camelize(name, true) %>Model.findOneAndUpdate(
      filter,
      <%= name %>Mapper.toPersistence({
        ...<%= name %>Mapper.toDomain(entity),
        ...clonedPayload,
      }),
      { new: true },
    );

    return entityObject ? <%= name %>Mapper.toDomain(entityObject) : null;
  }

  async remove(id: <%= name %>['id']): Promise<void> {
    await this.<%= h.inflection.camelize(name, true) %>Model.deleteOne({ _id: id });
  }
}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/document/document-persistence.module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/document-persistence.module.ts
---
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import {
  <%= name %>Schema,
  <%= name %>SchemaClass,
} from './entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';
import { <%= name %>Repository } from '../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>DocumentRepository } from './repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: <%= name %>SchemaClass.name, schema: <%= name %>Schema },
    ]),
  ],
  providers: [
    {
      provide: <%= name %>Repository,
      useClass: <%= name %>DocumentRepository,
    },
  ],
  exports: [<%= name %>Repository],
})
export class Document<%= name %>PersistenceModule {}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/relational/entities/entity.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
---
import {
  CreateDateColumn,
  Entity,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from 'typeorm';
import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: '<%= h.inflection.transform(name, ['underscore']) %>',
})
export class <%= name %>Entity extends EntityRelationalHelper {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/relational/mappers/mapper.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
---
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Entity } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';

export class <%= name %>Mapper {
  static toDomain(raw: <%= name %>Entity): <%= name %> {
    const domainEntity = new <%= name %>();
    domainEntity.id = raw.id;
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;

    return domainEntity;
  }

  static toPersistence(domainEntity: <%= name %>): <%= name %>Entity {
    const persistenceEntity = new <%= name %>Entity();
    if (domainEntity.id) {
      persistenceEntity.id = domainEntity.id;
    }
    persistenceEntity.createdAt = domainEntity.createdAt;
    persistenceEntity.updatedAt = domainEntity.updatedAt;

    return persistenceEntity;
  }
}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/relational/repositories/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { <%= name %>Entity } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Repository } from '../../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>Mapper } from '../mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class <%= name %>RelationalRepository implements <%= name %>Repository {
  constructor(
    @InjectRepository(<%= name %>Entity)
    private readonly <%= h.inflection.camelize(name, true) %>Repository: Repository<<%= name %>Entity>,
  ) {}

  async create(data: <%= name %>): Promise<<%= name %>> {
    const persistenceModel = <%= name %>Mapper.toPersistence(data);
    const newEntity = await this.<%= h.inflection.camelize(name, true) %>Repository.save(
      this.<%= h.inflection.camelize(name, true) %>Repository.create(persistenceModel),
    );
    return <%= name %>Mapper.toDomain(newEntity);
  }

  async findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]> {
    const entities = await this.<%= h.inflection.camelize(name, true) %>Repository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
    });

    return entities.map((entity) => <%= name %>Mapper.toDomain(entity));
  }

  async findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>> {
    const entity = await this.<%= h.inflection.camelize(name, true) %>Repository.findOne({
      where: { id },
    });

    return entity ? <%= name %>Mapper.toDomain(entity) : null;
  }

  async findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]> {
    const entities = await this.<%= h.inflection.camelize(name, true) %>Repository.find({
      where: { id: In(ids) },
    });

    return entities.map((entity) => <%= name %>Mapper.toDomain(entity));
  }

  async update(
    id: <%= name %>['id'],
    payload: Partial<<%= name %>>,
  ): Promise<<%= name %>> {
    const entity = await this.<%= h.inflection.camelize(name, true) %>Repository.findOne({
      where: { id },
    });

    if (!entity) {
      throw new Error('Record not found');
    }

    const updatedEntity = await this.<%= h.inflection.camelize(name, true) %>Repository.save(
      this.<%= h.inflection.camelize(name, true) %>Repository.create(
        <%= name %>Mapper.toPersistence({
          ...<%= name %>Mapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return <%= name %>Mapper.toDomain(updatedEntity);
  }

  async remove(id: <%= name %>['id']): Promise<void> {
    await this.<%= h.inflection.camelize(name, true) %>Repository.delete(id);
  }
}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/relational/relational-persistence.module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/relational-persistence.module.ts
---
import { Module } from '@nestjs/common';
import { <%= name %>Repository } from '../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>RelationalRepository } from './repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { <%= name %>Entity } from './entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';

@Module({
  imports: [TypeOrmModule.forFeature([<%= name %>Entity])],
  providers: [
    {
      provide: <%= name %>Repository,
      useClass: <%= name %>RelationalRepository,
    },
  ],
  exports: [<%= name %>Repository],
})
export class Relational<%= name %>PersistenceModule {}

================
File: backend/.hygen/generate/all-db-resource/infrastructure/persistence/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { DeepPartial } from '../../../utils/types/deep-partial.type';
import { NullableType } from '../../../utils/types/nullable.type';
import { IPaginationOptions } from '../../../utils/types/pagination-options';
import { <%= name %> } from '../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

export abstract class <%= name %>Repository {
  abstract create(
    data: Omit<<%= name %>, 'id' | 'createdAt' | 'updatedAt'>,
  ): Promise<<%= name %>>;

  abstract findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]>;

  abstract findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>>;

  abstract findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]>;

  abstract update(
    id: <%= name %>['id'],
    payload: DeepPartial<<%= name %>>,
  ): Promise<<%= name %> | null>;

  abstract remove(id: <%= name %>['id']): Promise<void>;
}

================
File: backend/.hygen/generate/all-db-resource/app-module-import.ejs.t
================
---
inject: true
to: src/app.module.ts
before: \@Module
---
import { <%= h.inflection.transform(name, ['pluralize']) %>Module } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module';

================
File: backend/.hygen/generate/all-db-resource/app-module.ejs.t
================
---
inject: true
to: src/app.module.ts
after: imports
---
    <%= h.inflection.transform(name, ['pluralize']) %>Module,

================
File: backend/.hygen/generate/all-db-resource/controller.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller.ts
---
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Query,
} from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiParam,
  ApiTags,
} from '@nestjs/swagger';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { AuthGuard } from '@nestjs/passport';
import {
  InfinityPaginationResponse,
  InfinityPaginationResponseDto,
} from '../utils/dto/infinity-pagination-response.dto';
import { infinityPagination } from '../utils/infinity-pagination';
import { FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto } from './dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto';

@ApiTags('<%= h.inflection.transform(name, ['pluralize', 'humanize']) %>')
@ApiBearerAuth()
@UseGuards(AuthGuard('jwt'))
@Controller({
  path: '<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>',
  version: '1',
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Controller {
  constructor(private readonly <%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service: <%= h.inflection.transform(name, ['pluralize']) %>Service) {}

  @Post()
  @ApiCreatedResponse({
    type: <%= name %>,
  })
  create(@Body() create<%= name %>Dto: Create<%= name %>Dto) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.create(create<%= name %>Dto);
  }

  @Get()
  @ApiOkResponse({
    type: InfinityPaginationResponse(<%= name %>),
  })
  async findAll(
    @Query() query: FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto,
  ): Promise<InfinityPaginationResponseDto<<%= name %>>> {
    const page = query?.page ?? 1;
    let limit = query?.limit ?? 10;
    if (limit > 50) {
      limit = 50;
    }

    return infinityPagination(
      await this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findAllWithPagination({
        paginationOptions: {
          page,
          limit,
        },
      }),
      { page, limit },
    );
  }

  @Get(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  findById(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findById(id);
  }

  @Patch(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  update(
    @Param('id') id: string,
    @Body() update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.update(id, update<%= name %>Dto);
  }

  @Delete(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  remove(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.remove(id);
  }
}

================
File: backend/.hygen/generate/all-db-resource/module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
---
import { Module } from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { <%= h.inflection.transform(name, ['pluralize']) %>Controller } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller';
import { Relational<%= name %>PersistenceModule } from './infrastructure/persistence/relational/relational-persistence.module';
import databaseConfig from '../database/config/database.config';
import { DatabaseConfig } from '../database/config/database-config.type';
import { Document<%= name %>PersistenceModule } from './infrastructure/persistence/document/document-persistence.module';

const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? Document<%= name %>PersistenceModule
  : Relational<%= name %>PersistenceModule;

@Module({
  imports: [
    // import modules, etc.
    infrastructurePersistenceModule,
  ],
  controllers: [<%= h.inflection.transform(name, ['pluralize']) %>Controller],
  providers: [<%= h.inflection.transform(name, ['pluralize']) %>Service],
  exports: [<%= h.inflection.transform(name, ['pluralize']) %>Service, infrastructurePersistenceModule],
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Module {}

================
File: backend/.hygen/generate/all-db-resource/service.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
---
import { Injectable } from '@nestjs/common';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { <%= name %>Repository } from './infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { IPaginationOptions } from '../utils/types/pagination-options';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

@Injectable()
export class <%= h.inflection.transform(name, ['pluralize']) %>Service {
  constructor(
    // Dependencies here
    private readonly <%= h.inflection.camelize(name, true) %>Repository: <%= name %>Repository,
  ) {}

  
  async create(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    create<%= name %>Dto: Create<%= name %>Dto
  ) {
    // Do not remove comment below.
    // <creating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.create({
      // Do not remove comment below.
      // <creating-property-payload />
    });
  }

  findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findAllWithPagination({
      paginationOptions: {
        page: paginationOptions.page,
        limit: paginationOptions.limit,
      },
    });
  }

  findById(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findById(id);
  }

  findByIds(ids: <%= name %>['id'][]) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findByIds(ids);
  }

  async update(
    id: <%= name %>['id'],
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    // Do not remove comment below.
    // <updating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.update(id, {
      // Do not remove comment below.
      // <updating-property-payload />
    });
  }

  remove(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.remove(id);
  }
}

================
File: backend/.hygen/generate/document-resource/domain/domain.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
---
import { ApiProperty } from '@nestjs/swagger';

export class <%= name %> {
  @ApiProperty({
    type: String,
  })
  id: string;

  @ApiProperty()
  createdAt: Date;

  @ApiProperty()
  updatedAt: Date;
}

================
File: backend/.hygen/generate/document-resource/dto/create.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
export class Create<%= name %>Dto {
  // Don't forget to use the class-validator decorators in the DTO properties.
}

================
File: backend/.hygen/generate/document-resource/dto/domain.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty, IsString } from 'class-validator';

export class <%= name %>Dto {
  @ApiProperty()
  @IsString()
  @IsNotEmpty()
  id: string;
}

================
File: backend/.hygen/generate/document-resource/dto/find-all.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto.ts
---
import { ApiPropertyOptional } from '@nestjs/swagger';
import { IsNumber, IsOptional } from 'class-validator';
import { Transform } from 'class-transformer';

export class FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto {
  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 1))
  @IsNumber()
  @IsOptional()
  page?: number;

  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 10))
  @IsNumber()
  @IsOptional()
  limit?: number;
}

================
File: backend/.hygen/generate/document-resource/dto/update.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
// Don't forget to use the class-validator decorators in the DTO properties.
// import { Allow } from 'class-validator';

import { PartialType } from '@nestjs/swagger';
import { Create<%= name %>Dto } from './create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';

export class Update<%= name %>Dto extends PartialType(Create<%= name %>Dto) {}

================
File: backend/.hygen/generate/document-resource/infrastructure/persistence/document/entities/schema.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
---
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { now, HydratedDocument } from 'mongoose';
import { EntityDocumentHelper } from '../../../../../utils/document-entity-helper';

export type <%= name %>SchemaDocument = HydratedDocument<<%= name %>SchemaClass>;

@Schema({
  timestamps: true,
  toJSON: {
    virtuals: true,
    getters: true,
  },
})
export class <%= name %>SchemaClass extends EntityDocumentHelper {
  @Prop({ default: now })
  createdAt: Date;

  @Prop({ default: now })
  updatedAt: Date;
}

export const <%= name %>Schema = SchemaFactory.createForClass(<%= name %>SchemaClass);

================
File: backend/.hygen/generate/document-resource/infrastructure/persistence/document/mappers/mapper.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
---
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>SchemaClass } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';

export class <%= name %>Mapper {
  public static toDomain(raw: <%= name %>SchemaClass): <%= name %> {
    const domainEntity = new <%= name %>();
    domainEntity.id = raw._id.toString();
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;

    return domainEntity;
  }

  public static toPersistence(domainEntity: <%= name %>): <%= name %>SchemaClass {
    const persistenceSchema = new <%= name %>SchemaClass();
    if (domainEntity.id) {
      persistenceSchema._id = domainEntity.id;
    }
    persistenceSchema.createdAt = domainEntity.createdAt;
    persistenceSchema.updatedAt = domainEntity.updatedAt;

    return persistenceSchema;
  }
}

================
File: backend/.hygen/generate/document-resource/infrastructure/persistence/document/repositories/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { Injectable } from '@nestjs/common';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { <%= name %>SchemaClass } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';
import { <%= name %>Repository } from '../../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Mapper } from '../mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class <%= name %>DocumentRepository implements <%= name %>Repository {
  constructor(
    @InjectModel(<%= name %>SchemaClass.name)
    private readonly <%= h.inflection.camelize(name, true) %>Model: Model<<%= name %>SchemaClass>,
  ) {}

  async create(data: <%= name %>): Promise<<%= name %>> {
    const persistenceModel = <%= name %>Mapper.toPersistence(data);
    const createdEntity = new this.<%= h.inflection.camelize(name, true) %>Model(persistenceModel);
    const entityObject = await createdEntity.save();
    return <%= name %>Mapper.toDomain(entityObject);
  }

  async findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]> {
    const entityObjects = await this.<%= h.inflection.camelize(name, true) %>Model
      .find()
      .skip((paginationOptions.page - 1) * paginationOptions.limit)
      .limit(paginationOptions.limit);

    return entityObjects.map((entityObject) =>
      <%= name %>Mapper.toDomain(entityObject),
    );
  }

  async findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>> {
    const entityObject = await this.<%= h.inflection.camelize(name, true) %>Model.findById(id);
    return entityObject ? <%= name %>Mapper.toDomain(entityObject) : null;
  }

  async findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]> {
    const entityObjects = await this.<%= h.inflection.camelize(name, true) %>Model.find({ _id: { $in: ids } });
    return entityObjects.map((entityObject) =>
      <%= name %>Mapper.toDomain(entityObject),
    );
  }

  async update(
    id: <%= name %>['id'],
    payload: Partial<<%= name %>>,
  ): Promise<NullableType<<%= name %>>> {
    const clonedPayload = { ...payload };
    delete clonedPayload.id;

    const filter = { _id: id.toString() };
    const entity = await this.<%= h.inflection.camelize(name, true) %>Model.findOne(filter);

    if (!entity) {
      throw new Error('Record not found');
    }

    const entityObject = await this.<%= h.inflection.camelize(name, true) %>Model.findOneAndUpdate(
      filter,
      <%= name %>Mapper.toPersistence({
        ...<%= name %>Mapper.toDomain(entity),
        ...clonedPayload,
      }),
      { new: true },
    );

    return entityObject ? <%= name %>Mapper.toDomain(entityObject) : null;
  }

  async remove(id: <%= name %>['id']): Promise<void> {
    await this.<%= h.inflection.camelize(name, true) %>Model.deleteOne({ _id: id });
  }
}

================
File: backend/.hygen/generate/document-resource/infrastructure/persistence/document/document-persistence.module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/document-persistence.module.ts
---
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import {
  <%= name %>Schema,
  <%= name %>SchemaClass,
} from './entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';
import { <%= name %>Repository } from '../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>DocumentRepository } from './repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: <%= name %>SchemaClass.name, schema: <%= name %>Schema },
    ]),
  ],
  providers: [
    {
      provide: <%= name %>Repository,
      useClass: <%= name %>DocumentRepository,
    },
  ],
  exports: [<%= name %>Repository],
})
export class Document<%= name %>PersistenceModule {}

================
File: backend/.hygen/generate/document-resource/infrastructure/persistence/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { DeepPartial } from '../../../utils/types/deep-partial.type';
import { NullableType } from '../../../utils/types/nullable.type';
import { IPaginationOptions } from '../../../utils/types/pagination-options';
import { <%= name %> } from '../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

export abstract class <%= name %>Repository {
  abstract create(
    data: Omit<<%= name %>, 'id' | 'createdAt' | 'updatedAt'>,
  ): Promise<<%= name %>>;

  abstract findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]>;

  abstract findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>>;

  abstract findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]>;

  abstract update(
    id: <%= name %>['id'],
    payload: DeepPartial<<%= name %>>,
  ): Promise<<%= name %> | null>;

  abstract remove(id: <%= name %>['id']): Promise<void>;
}

================
File: backend/.hygen/generate/document-resource/app-module-import.ejs.t
================
---
inject: true
to: src/app.module.ts
before: \@Module
---
import { <%= h.inflection.transform(name, ['pluralize']) %>Module } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module';

================
File: backend/.hygen/generate/document-resource/app-module.ejs.t
================
---
inject: true
to: src/app.module.ts
after: imports
---
    <%= h.inflection.transform(name, ['pluralize']) %>Module,

================
File: backend/.hygen/generate/document-resource/controller.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller.ts
---
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Query,
} from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiParam,
  ApiTags,
} from '@nestjs/swagger';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { AuthGuard } from '@nestjs/passport';
import {
  InfinityPaginationResponse,
  InfinityPaginationResponseDto,
} from '../utils/dto/infinity-pagination-response.dto';
import { infinityPagination } from '../utils/infinity-pagination';
import { FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto } from './dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto';

@ApiTags('<%= h.inflection.transform(name, ['pluralize', 'humanize']) %>')
@ApiBearerAuth()
@UseGuards(AuthGuard('jwt'))
@Controller({
  path: '<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>',
  version: '1',
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Controller {
  constructor(private readonly <%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service: <%= h.inflection.transform(name, ['pluralize']) %>Service) {}

  @Post()
  @ApiCreatedResponse({
    type: <%= name %>,
  })
  create(@Body() create<%= name %>Dto: Create<%= name %>Dto) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.create(create<%= name %>Dto);
  }

  @Get()
  @ApiOkResponse({
    type: InfinityPaginationResponse(<%= name %>),
  })
  async findAll(
    @Query() query: FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto,
  ): Promise<InfinityPaginationResponseDto<<%= name %>>> {
    const page = query?.page ?? 1;
    let limit = query?.limit ?? 10;
    if (limit > 50) {
      limit = 50;
    }

    return infinityPagination(
      await this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findAllWithPagination({
        paginationOptions: {
          page,
          limit,
        },
      }),
      { page, limit },
    );
  }

  @Get(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  findById(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findById(id);
  }

  @Patch(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  update(
    @Param('id') id: string,
    @Body() update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.update(id, update<%= name %>Dto);
  }

  @Delete(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  remove(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.remove(id);
  }
}

================
File: backend/.hygen/generate/document-resource/module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
---
import { Module } from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { <%= h.inflection.transform(name, ['pluralize']) %>Controller } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller';
import { Document<%= name %>PersistenceModule } from './infrastructure/persistence/document/document-persistence.module';

@Module({
  imports: [
    // import modules, etc.
    Document<%= name %>PersistenceModule,
  ],
  controllers: [<%= h.inflection.transform(name, ['pluralize']) %>Controller],
  providers: [<%= h.inflection.transform(name, ['pluralize']) %>Service],
  exports: [<%= h.inflection.transform(name, ['pluralize']) %>Service, Document<%= name %>PersistenceModule],
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Module {}

================
File: backend/.hygen/generate/document-resource/service.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
---
import { Injectable } from '@nestjs/common';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { <%= name %>Repository } from './infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { IPaginationOptions } from '../utils/types/pagination-options';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

@Injectable()
export class <%= h.inflection.transform(name, ['pluralize']) %>Service {
  constructor(
    // Dependencies here
    private readonly <%= h.inflection.camelize(name, true) %>Repository: <%= name %>Repository,
  ) {}

  async create(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    create<%= name %>Dto: Create<%= name %>Dto
  ) {
    // Do not remove comment below.
    // <creating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.create({
      // Do not remove comment below.
      // <creating-property-payload />
    });
  }

  findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findAllWithPagination({
      paginationOptions: {
        page: paginationOptions.page,
        limit: paginationOptions.limit,
      },
    });
  }

  findById(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findById(id);
  }

  findByIds(ids: <%= name %>['id'][]) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findByIds(ids);
  }

  async update(
    id: <%= name %>['id'],
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    // Do not remove comment below.
    // <updating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.update(id, {
      // Do not remove comment below.
      // <updating-property-payload />
    });
  }

  remove(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.remove(id);
  }
}

================
File: backend/.hygen/generate/relational-resource/domain/domain.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
---
import { ApiProperty } from '@nestjs/swagger';

export class <%= name %> {
  @ApiProperty({
    type: String,
  })
  id: string;

  @ApiProperty()
  createdAt: Date;

  @ApiProperty()
  updatedAt: Date;
}

================
File: backend/.hygen/generate/relational-resource/dto/create.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
export class Create<%= name %>Dto {
  // Don't forget to use the class-validator decorators in the DTO properties.
}

================
File: backend/.hygen/generate/relational-resource/dto/domain.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty, IsString } from 'class-validator';

export class <%= name %>Dto {
  @ApiProperty()
  @IsString()
  @IsNotEmpty()
  id: string;
}

================
File: backend/.hygen/generate/relational-resource/dto/find-all.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto.ts
---
import { ApiPropertyOptional } from '@nestjs/swagger';
import { IsNumber, IsOptional } from 'class-validator';
import { Transform } from 'class-transformer';

export class FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto {
  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 1))
  @IsNumber()
  @IsOptional()
  page?: number;

  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 10))
  @IsNumber()
  @IsOptional()
  limit?: number;
}

================
File: backend/.hygen/generate/relational-resource/dto/update.dto.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
---
// Don't forget to use the class-validator decorators in the DTO properties.
// import { Allow } from 'class-validator';

import { PartialType } from '@nestjs/swagger';
import { Create<%= name %>Dto } from './create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';

export class Update<%= name %>Dto extends PartialType(Create<%= name %>Dto) {}

================
File: backend/.hygen/generate/relational-resource/infrastructure/persistence/relational/entities/entity.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
---
import {
  CreateDateColumn,
  Entity,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from 'typeorm';
import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: '<%= h.inflection.transform(name, ['underscore']) %>',
})
export class <%= name %>Entity extends EntityRelationalHelper {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

================
File: backend/.hygen/generate/relational-resource/infrastructure/persistence/relational/mappers/mapper.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
---
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Entity } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';

export class <%= name %>Mapper {
  static toDomain(raw: <%= name %>Entity): <%= name %> {
    const domainEntity = new <%= name %>();
    domainEntity.id = raw.id;
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;

    return domainEntity;
  }

  static toPersistence(domainEntity: <%= name %>): <%= name %>Entity {
    const persistenceEntity = new <%= name %>Entity();
    if (domainEntity.id) {
      persistenceEntity.id = domainEntity.id;
    }
    persistenceEntity.createdAt = domainEntity.createdAt;
    persistenceEntity.updatedAt = domainEntity.updatedAt;

    return persistenceEntity;
  }
}

================
File: backend/.hygen/generate/relational-resource/infrastructure/persistence/relational/repositories/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { <%= name %>Entity } from '../entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { <%= name %> } from '../../../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { <%= name %>Repository } from '../../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>Mapper } from '../mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class <%= name %>RelationalRepository implements <%= name %>Repository {
  constructor(
    @InjectRepository(<%= name %>Entity)
    private readonly <%= h.inflection.camelize(name, true) %>Repository: Repository<<%= name %>Entity>,
  ) {}

  async create(data: <%= name %>): Promise<<%= name %>> {
    const persistenceModel = <%= name %>Mapper.toPersistence(data);
    const newEntity = await this.<%= h.inflection.camelize(name, true) %>Repository.save(
      this.<%= h.inflection.camelize(name, true) %>Repository.create(persistenceModel),
    );
    return <%= name %>Mapper.toDomain(newEntity);
  }

  async findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]> {
    const entities = await this.<%= h.inflection.camelize(name, true) %>Repository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
    });

    return entities.map((entity) => <%= name %>Mapper.toDomain(entity));
  }

  async findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>> {
    const entity = await this.<%= h.inflection.camelize(name, true) %>Repository.findOne({
      where: { id },
    });

    return entity ? <%= name %>Mapper.toDomain(entity) : null;
  }

  async findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]> {
    const entities = await this.<%= h.inflection.camelize(name, true) %>Repository.find({
      where: { id: In(ids) },
    });

    return entities.map((entity) => <%= name %>Mapper.toDomain(entity));
  }

  async update(
    id: <%= name %>['id'],
    payload: Partial<<%= name %>>,
  ): Promise<<%= name %>> {
    const entity = await this.<%= h.inflection.camelize(name, true) %>Repository.findOne({
      where: { id },
    });

    if (!entity) {
      throw new Error('Record not found');
    }

    const updatedEntity = await this.<%= h.inflection.camelize(name, true) %>Repository.save(
      this.<%= h.inflection.camelize(name, true) %>Repository.create(
        <%= name %>Mapper.toPersistence({
          ...<%= name %>Mapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return <%= name %>Mapper.toDomain(updatedEntity);
  }

  async remove(id: <%= name %>['id']): Promise<void> {
    await this.<%= h.inflection.camelize(name, true) %>Repository.delete(id);
  }
}

================
File: backend/.hygen/generate/relational-resource/infrastructure/persistence/relational/relational-persistence.module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/relational-persistence.module.ts
---
import { Module } from '@nestjs/common';
import { <%= name %>Repository } from '../<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { <%= name %>RelationalRepository } from './repositories/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { <%= name %>Entity } from './entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';

@Module({
  imports: [TypeOrmModule.forFeature([<%= name %>Entity])],
  providers: [
    {
      provide: <%= name %>Repository,
      useClass: <%= name %>RelationalRepository,
    },
  ],
  exports: [<%= name %>Repository],
})
export class Relational<%= name %>PersistenceModule {}

================
File: backend/.hygen/generate/relational-resource/infrastructure/persistence/repository.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository.ts
---
import { DeepPartial } from '../../../utils/types/deep-partial.type';
import { NullableType } from '../../../utils/types/nullable.type';
import { IPaginationOptions } from '../../../utils/types/pagination-options';
import { <%= name %> } from '../../domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

export abstract class <%= name %>Repository {
  abstract create(
    data: Omit<<%= name %>, 'id' | 'createdAt' | 'updatedAt'>,
  ): Promise<<%= name %>>;

  abstract findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }): Promise<<%= name %>[]>;

  abstract findById(id: <%= name %>['id']): Promise<NullableType<<%= name %>>>;

  abstract findByIds(ids: <%= name %>['id'][]): Promise<<%= name %>[]>;

  abstract update(
    id: <%= name %>['id'],
    payload: DeepPartial<<%= name %>>,
  ): Promise<<%= name %> | null>;

  abstract remove(id: <%= name %>['id']): Promise<void>;
}

================
File: backend/.hygen/generate/relational-resource/app-module-import.ejs.t
================
---
inject: true
to: src/app.module.ts
before: \@Module
---
import { <%= h.inflection.transform(name, ['pluralize']) %>Module } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module';

================
File: backend/.hygen/generate/relational-resource/app-module.ejs.t
================
---
inject: true
to: src/app.module.ts
after: imports
---
    <%= h.inflection.transform(name, ['pluralize']) %>Module,

================
File: backend/.hygen/generate/relational-resource/controller.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller.ts
---
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Query,
} from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiParam,
  ApiTags,
} from '@nestjs/swagger';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';
import { AuthGuard } from '@nestjs/passport';
import {
  InfinityPaginationResponse,
  InfinityPaginationResponseDto,
} from '../utils/dto/infinity-pagination-response.dto';
import { infinityPagination } from '../utils/infinity-pagination';
import { FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto } from './dto/find-all-<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.dto';

@ApiTags('<%= h.inflection.transform(name, ['pluralize', 'humanize']) %>')
@ApiBearerAuth()
@UseGuards(AuthGuard('jwt'))
@Controller({
  path: '<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>',
  version: '1',
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Controller {
  constructor(private readonly <%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service: <%= h.inflection.transform(name, ['pluralize']) %>Service) {}

  @Post()
  @ApiCreatedResponse({
    type: <%= name %>,
  })
  create(@Body() create<%= name %>Dto: Create<%= name %>Dto) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.create(create<%= name %>Dto);
  }

  @Get()
  @ApiOkResponse({
    type: InfinityPaginationResponse(<%= name %>),
  })
  async findAll(
    @Query() query: FindAll<%= h.inflection.transform(name, ['pluralize']) %>Dto,
  ): Promise<InfinityPaginationResponseDto<<%= name %>>> {
    const page = query?.page ?? 1;
    let limit = query?.limit ?? 10;
    if (limit > 50) {
      limit = 50;
    }

    return infinityPagination(
      await this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findAllWithPagination({
        paginationOptions: {
          page,
          limit,
        },
      }),
      { page, limit },
    );
  }

  @Get(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  findById(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.findById(id);
  }

  @Patch(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @ApiOkResponse({
    type: <%= name %>,
  })
  update(
    @Param('id') id: string,
    @Body() update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.update(id, update<%= name %>Dto);
  }

  @Delete(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  remove(@Param('id') id: string) {
    return this.<%= h.inflection.camelize(h.inflection.pluralize(name), true) %>Service.remove(id);
  }
}

================
File: backend/.hygen/generate/relational-resource/module.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
---
import { Module } from '@nestjs/common';
import { <%= h.inflection.transform(name, ['pluralize']) %>Service } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service';
import { <%= h.inflection.transform(name, ['pluralize']) %>Controller } from './<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.controller';
import { Relational<%= name %>PersistenceModule } from './infrastructure/persistence/relational/relational-persistence.module';

@Module({
  imports: [
    // import modules, etc.
    Relational<%= name %>PersistenceModule,
  ],
  controllers: [<%= h.inflection.transform(name, ['pluralize']) %>Controller],
  providers: [<%= h.inflection.transform(name, ['pluralize']) %>Service],
  exports: [<%= h.inflection.transform(name, ['pluralize']) %>Service, Relational<%= name %>PersistenceModule],
})
export class <%= h.inflection.transform(name, ['pluralize']) %>Module {}

================
File: backend/.hygen/generate/relational-resource/service.ejs.t
================
---
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
---
import { Injectable } from '@nestjs/common';
import { Create<%= name %>Dto } from './dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { Update<%= name %>Dto } from './dto/update-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto';
import { <%= name %>Repository } from './infrastructure/persistence/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.repository';
import { IPaginationOptions } from '../utils/types/pagination-options';
import { <%= name %> } from './domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>';

@Injectable()
export class <%= h.inflection.transform(name, ['pluralize']) %>Service {
  constructor(
    // Dependencies here
    private readonly <%= h.inflection.camelize(name, true) %>Repository: <%= name %>Repository,
  ) {}

  async create(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    create<%= name %>Dto: Create<%= name %>Dto
  ) {
    // Do not remove comment below.
    // <creating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.create({
      // Do not remove comment below.
      // <creating-property-payload />
    });
  }

  findAllWithPagination({
    paginationOptions,
  }: {
    paginationOptions: IPaginationOptions;
  }) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findAllWithPagination({
      paginationOptions: {
        page: paginationOptions.page,
        limit: paginationOptions.limit,
      },
    });
  }

  findById(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findById(id);
  }

  findByIds(ids: <%= name %>['id'][]) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.findByIds(ids);
  }

  async update(
    id: <%= name %>['id'],
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    update<%= name %>Dto: Update<%= name %>Dto,
  ) {
    // Do not remove comment below.
    // <updating-property />

    return this.<%= h.inflection.camelize(name, true) %>Repository.update(id, {
      // Do not remove comment below.
      // <updating-property-payload />
    });
  }

  remove(id: <%= name %>['id']) {
    return this.<%= h.inflection.camelize(name, true) %>Repository.remove(id);
  }
}

================
File: backend/.hygen/property/add-to-all-db/domain/domain-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';<% } -%>

================
File: backend/.hygen/property/add-to-all-db/domain/domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
after: export class <%= name %> {
---

@ApiProperty({
  type: () => 
    <% if (kind === 'primitive') { -%>
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
    <% } else if (kind === 'reference' || kind === 'duplication') { -%>
      <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
        [<%= type %><% if (type === 'File') { -%>Type<% } -%>],
      <% } else { -%>
        <%= type %><% if (type === 'File') { -%>Type<% } -%>,
      <% } -%>
    <% } -%>
  nullable: <%= isNullable %>,
})

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %><% if (type === 'File') { -%>Type<% } -%><% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/01-create.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
after: export class Create<%= name %>Dto
---

<% if (isAddToDto) { -%>
  @ApiProperty({
    required: <%= !(isOptional || isNullable) %>,
    type: () => 
      <% if (kind === 'primitive') { -%>
        <% if (type === 'string') { -%>
          String,
        <% } else if (type === 'number') { -%>
          Number,
        <% } else if (type === 'boolean') { -%>
          Boolean,
        <% } -%>
      <% } else if (kind === 'reference' || kind === 'duplication') { -%>
        <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
          [<%= type %>Dto],
        <% } else { -%>
          <%= type %>Dto,
        <% } -%>
      <% } -%>
  })
<% } -%>

<% if (isAddToDto) { -%>
  <% if (isOptional || isNullable) { -%>
    @IsOptional()
  <% } -%>
  <% if (kind === 'primitive') { -%>
    <% if (type === 'string') { -%>
      @IsString()
    <% } else if (type === 'number') { -%>
      @IsNumber()
    <% } else if (type === 'boolean') { -%>
      @IsBoolean()
    <% } -%>
  <% } else if (kind === 'reference' || kind === 'duplication') { -%>
    @ValidateNested()
    @Type(() => <%= type %>Dto)
    <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      @IsArray()
    <% } else { -%>
      @IsNotEmptyObject()
    <% } -%>
  <% } -%>
<% } -%>

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Dto<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/02-create-import-class-transformer.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-transformer'"
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  import {
    // decorators here
  } from 'class-transformer';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/03-create-import-class-validator.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-validator'"
---
<% if (isAddToDto) { -%>
  import {
    // decorators here
  } from 'class-validator';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/04-create-import-swagger.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from '@nestjs/swagger'"
---
<% if (isAddToDto) { -%>
  import { 
    // decorators here
  } from '@nestjs/swagger';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/05-create-boolean.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsBoolean,
---
<% if (isAddToDto && type === 'boolean') { -%>
  IsBoolean,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/06-create-number.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNumber,
---
<% if (isAddToDto && type === 'number') { -%>
  IsNumber,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/07-create-string.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsString,
---
<% if (isAddToDto && type === 'string') { -%>
  IsString,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/08-create-api-property.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from '@nestjs/swagger'"
skip_if: \ApiProperty,
---
<% if (isAddToDto) { -%>
  ApiProperty,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/09-create-class-transformer-type.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-transformer'"
skip_if: \Type,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  Type,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/10-create-validate-is-array.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsArray,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToMany' || referenceType === 'manyToMany')) { -%>
  IsArray,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/11-create-validate-nested.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \ValidateNested,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  ValidateNested,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/12-create-validate-not-empty-object.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNotEmptyObject,
---
<% if (isAddToDto && ((kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToOne' || referenceType === 'manyToOne'))) { -%>
  IsNotEmptyObject,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/13-create-type-dto-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
at_line: 0
skip_if: import { <%= type %>Dto
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Dto } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.dto';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/dto/14-create-optional.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsOptional,
---
<% if (isAddToDto && (isOptional || isNullable)) { -%>
  IsOptional,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/entities/schema-mongoose-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
at_line: 0
skip_if: import mongoose
---
<% if (kind === 'reference') { -%>
  import mongoose from 'mongoose';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/entities/schema.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
after: export class <%= name %>SchemaClass
---

<% if (kind === 'reference') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    @Prop({
      type: mongoose.Schema.Types.ObjectId,
      ref: '<%= type %>SchemaClass',
      autopopulate: <% if (propertyInReference) { -%>false<% } else { -%>true<% } -%>,
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass <% if (isNullable) { -%> | null<% } -%>;
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    @Prop({
      type: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: '<%= type %>SchemaClass',
        autopopulate: true,
      }]
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass[] <% if (isNullable) { -%> | null<% } -%>;
  <% } -%>
<% } else if (kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    @Prop({
      type: <%= type %>SchemaClass,
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass <% if (isNullable) { -%> | null<% } -%>;
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    @Prop({
      type: ['<%= type %>SchemaClass'],
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass[] <% if (isNullable) { -%> | null<% } -%>;
  <% } -%>
<% } else { -%>
  @Prop({
    type:
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
  })
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/entities/type-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
at_line: 0
skip_if: <% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %>SchemaClass<% } else { -%><%= true %><% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>SchemaClass } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.schema';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/mappers/mapper-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>\(\)
---
<% if (kind === 'primitive') { -%>
  domainEntity.<%= property %> = raw.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = <%= type %>Mapper.toDomain(raw.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = raw.<%= property %>.map((item) => <%= type %>Mapper.toDomain(item));
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/mappers/mapper-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
at_line: 1
skip_if: import { <%= type %>Mapper
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Mapper } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.mapper';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/document/mappers/mapper-persistence.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>SchemaClass\(\)
---
<% if (kind === 'primitive') { -%>
  persistenceSchema.<%= property %> = domainEntity.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (domainEntity.<%= property %>) {
      persistenceSchema.<%= property %> = <%= type %>Mapper.toPersistence(domainEntity.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceSchema.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (domainEntity.<%= property %>) {
      persistenceSchema.<%= property %> = domainEntity.<%= property %>.map((item) => <%= type %>Mapper.toPersistence(item));
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceSchema.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-column.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sColumn,
---
<% if (kind === 'primitive' || kind === 'duplication') { -%>
  Column,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-join-column.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sJoinColumn,
---
<% if (kind === 'reference' && (referenceType === 'oneToOne' || referenceType === 'manyToMany')) { -%>
  JoinColumn,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-many-to-many.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \ManyToMany,
---
<% if (kind === 'reference' && referenceType === 'manyToMany') { -%>
  ManyToMany,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-many-to-one.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sManyToOne,
---
<% if (kind === 'reference' && referenceType === 'manyToOne') { -%>
  ManyToOne,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-one-to-many.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sOneToMany,
---
<% if (kind === 'reference' && referenceType === 'oneToMany') { -%>
  OneToMany,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity-one-to-one.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sOneToOne,
---
<% if (kind === 'reference' && referenceType === 'oneToOne') { -%>
  OneToOne,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/entity.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
after: export class <%= name %>Entity
---

<% if (kind === 'primitive') { -%>
  @Column({
    nullable: <%= isNullable %>,
    type:
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
  })
<% } -%>

<% if (kind === 'duplication') { -%>
  @Column({
    nullable: <%= isNullable %>,
    type: 'jsonb',
  })
<% } -%>

<% if (kind === 'reference') { -%>
  <% if (referenceType === 'oneToOne') { -%>
    @OneToOne(() => <%= type %>Entity, { eager: true, nullable: <%= isNullable %> })
  <% } else if (referenceType === 'oneToMany') { -%>
    @OneToMany(() => <%= type %>Entity, (childEntity) => childEntity.<%= propertyInReference %>, { eager: true, nullable: <%= isNullable %> })
  <% } else if (referenceType === 'manyToOne') { -%>
    @ManyToOne(
      () => <%= type %>Entity,
      <% if (propertyInReference) { -%>
        (parentEntity) => parentEntity.<%= propertyInReference %>,
      <% } -%>
      { eager: <% if (propertyInReference) { -%>false<% } else { -%>true<% } -%>, nullable: <%= isNullable %> }
    )
  <% } else if (referenceType === 'manyToMany') { -%>
    @ManyToMany(() => <%= type %>Entity, { eager: true, nullable: <%= isNullable %> })
  <% } -%>

  <% if (referenceType === 'oneToOne' || referenceType === 'manyToMany') { -%>
    @JoinColumn()
  <% } -%>

  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Entity<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else if (kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Entity<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/entities/type-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
at_line: 0
skip_if: <% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %>Entity<% } else { -%><%= true %><% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Entity } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.entity';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/mappers/mapper-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>\(\)
---
<% if (kind === 'primitive') { -%>
  domainEntity.<%= property %> = raw.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = <%= type %>Mapper.toDomain(raw.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = raw.<%= property %>.map((item) => <%= type %>Mapper.toDomain(item));
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/mappers/mapper-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
at_line: 1
skip_if: import { <%= type %>Mapper
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Mapper } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.mapper';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/infrastructure/persistence/relational/mappers/mapper-persistence.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>Entity\(\)
---
<% if (kind === 'primitive') { -%>
  persistenceEntity.<%= property %> = domainEntity.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (domainEntity.<%= property %>) {
      persistenceEntity.<%= property %> = <%= type %>Mapper.toPersistence(domainEntity.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (domainEntity.<%= property %>) {
      persistenceEntity.<%= property %> = domainEntity.<%= property %>.map((item) => <%= type %>Mapper.toPersistence(item));
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/index.js
================
const { execSync } = require('child_process');

const collectPromisesResults = (callback) => async (prevValues) => {
  const results = await callback(prevValues);

  return { ...prevValues, ...results };
};

module.exports = {
  prompt: async ({ prompter, args }) => {
    if (Object.keys(args).length) {
      return Promise.resolve({
        name: args.name,
        property: args.property,
        kind: args.kind,
        type: args.type,
        referenceType: args.referenceType,
        propertyInReference: args.propertyInReference,
        isAddToDto: args.isAddToDto === 'true',
        isOptional: args.isOptional === 'true',
        isNullable: args.isNullable === 'true',
      });
    }

    const result = await prompter
      .prompt({
        type: 'input',
        name: 'name',
        message: "Entity name (e.g. 'User')",
        validate: (input) => {
          if (!input.trim()) {
            return 'Entity name is required';
          }

          return true;
        },
        format: (input) => {
          return input.trim();
        },
      })
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'input',
            name: 'property',
            message: "Property name (e.g. 'firstName')",
            validate: (input) => {
              if (!input.trim()) {
                return 'Property name is required';
              }

              return true;
            },
            format: (input) => {
              return input.trim();
            },
          });
        }),
      )
      .then(
        collectPromisesResults((rootValues) => {
          return prompter
            .prompt({
              type: 'select',
              name: 'kind',
              message: 'Select kind of type',
              choices: [
                {
                  message: 'Primitive (string, number, etc)',
                  value: 'primitive',
                },
                { message: 'Reference to entity', value: 'reference' },
                {
                  message: 'Duplication data from entity',
                  value: 'duplication',
                },
              ],
            })
            .then(
              collectPromisesResults((values) => {
                if (
                  values.kind === 'reference' ||
                  values.kind === 'duplication'
                ) {
                  return prompter
                    .prompt({
                      type: 'input',
                      name: 'type',
                      message: "Entity name (e.g. 'File')",
                      validate: (input) => {
                        if (!input.trim()) {
                          return 'Entity name is required';
                        }

                        return true;
                      },
                      format: (input) => {
                        return input.trim();
                      },
                    })
                    .then(
                      collectPromisesResults((referenceValues) => {
                        return prompter
                          .prompt({
                            type: 'select',
                            name: 'referenceType',
                            message: 'Select type of reference',
                            choices: [
                              {
                                message: `One to one (${rootValues.name} contains only one instance of ${referenceValues.type}, and ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'oneToOne',
                              },
                              {
                                message: `One to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, but ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'oneToMany',
                              },
                              {
                                message: `Many to one (${rootValues.name} contains only one instance of ${referenceValues.type}, but ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'manyToOne',
                              },
                              {
                                message: `Many to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, and ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'manyToMany',
                              },
                            ],
                          })
                          .then(
                            collectPromisesResults((referenceTypeValues) => {
                              if (
                                referenceTypeValues.referenceType ===
                                'oneToMany'
                              ) {
                                return prompter.prompt({
                                  type: 'input',
                                  name: 'propertyInReference',
                                  message: `Property name in ${referenceValues.type} (e.g. 'createdBy')`,
                                  validate: (input) => {
                                    if (!input.trim()) {
                                      return `Property name in ${referenceValues.type} is required`;
                                    }

                                    return true;
                                  },
                                  format: (input) => {
                                    return input.trim();
                                  },
                                });
                              }

                              return referenceTypeValues;
                            }),
                          );
                      }),
                    );
                }

                return prompter.prompt({
                  type: 'select',
                  name: 'type',
                  message: 'Property type',
                  choices: ['string', 'number', 'boolean'],
                });
              }),
            );
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isAddToDto',
            message: 'Add to DTO?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isOptional',
            message: 'Is the property optional?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults((values) => {
          if (!values.isOptional) {
            return { isNullable: false };
          }

          return prompter.prompt({
            type: 'confirm',
            name: 'isNullable',
            message: 'Can the property be nullable??',
            initial: true,
          });
        }),
      );

    if (
      (result.kind === 'reference' || result.kind === 'duplication') &&
      result.referenceType === 'oneToMany'
    ) {
      execSync(
        `npm run add:property:to-all-db -- --name=${result.type} --property=${result.propertyInReference} --propertyInReference=${result.property} --kind=${result.kind} --type=${result.name} --referenceType=manyToOne --isAddToDto=${result.isAddToDto} --isOptional=false --isNullable=false`,
        {
          stdio: 'inherit',
        },
      );
    }

    return result;
  },
};

================
File: backend/.hygen/property/add-to-all-db/module-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Module
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Module } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.module';<% } -%>

================
File: backend/.hygen/property/add-to-all-db/module.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
after: imports.*\[
skip_if: <%= h.inflection.transform(type, ['pluralize']) %>Module,
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= h.inflection.transform(type, ['pluralize']) %>Module,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-create-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property\-payload \/\>
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: create<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-create.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property \/\>
---
<% if (isAddToDto && !isOptional && !isNullable) { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        create<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Object;
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Objects;
    <% } -%>
  <% } -%>
<% } else { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
          create<%= name %>Dto.<%= property %>.id,
        );
        if (!<%= property %>Object) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Object;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
          create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
        );
        if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Objects;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-import-http-code.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: HttpStatus,
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { HttpStatus, UnprocessableEntityException } from '@nestjs/common';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-import-type-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Service } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.service';<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-inject.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: constructor
skip_if: private readonly <%= h.inflection.camelize(type, true) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  private readonly <%= h.inflection.camelize(type, true) %>Service: <%= h.inflection.transform(type, ['pluralize']) %>Service,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-update-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property\-payload \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: update<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-all-db/service-update.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        update<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Object;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        update<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== update<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Objects;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-document/domain/domain-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';<% } -%>

================
File: backend/.hygen/property/add-to-document/domain/domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
after: export class <%= name %> {
---

@ApiProperty({
  type: () => 
    <% if (kind === 'primitive') { -%>
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
    <% } else if (kind === 'reference' || kind === 'duplication') { -%>
      <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
        [<%= type %><% if (type === 'File') { -%>Type<% } -%>],
      <% } else { -%>
        <%= type %><% if (type === 'File') { -%>Type<% } -%>,
      <% } -%>
    <% } -%>
  nullable: <%= isNullable %>,
})

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %><% if (type === 'File') { -%>Type<% } -%><% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/01-create.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
after: export class Create<%= name %>Dto
---

<% if (isAddToDto) { -%>
  @ApiProperty({
    required: <%= !(isOptional || isNullable) %>,
    type: () => 
      <% if (kind === 'primitive') { -%>
        <% if (type === 'string') { -%>
          String,
        <% } else if (type === 'number') { -%>
          Number,
        <% } else if (type === 'boolean') { -%>
          Boolean,
        <% } -%>
      <% } else if (kind === 'reference' || kind === 'duplication') { -%>
        <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
          [<%= type %>Dto],
        <% } else { -%>
          <%= type %>Dto,
        <% } -%>
      <% } -%>
  })
<% } -%>

<% if (isAddToDto) { -%>
  <% if (isOptional || isNullable) { -%>
    @IsOptional()
  <% } -%>
  <% if (kind === 'primitive') { -%>
    <% if (type === 'string') { -%>
      @IsString()
    <% } else if (type === 'number') { -%>
      @IsNumber()
    <% } else if (type === 'boolean') { -%>
      @IsBoolean()
    <% } -%>
  <% } else if (kind === 'reference' || kind === 'duplication') { -%>
    @ValidateNested()
    @Type(() => <%= type %>Dto)
    <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      @IsArray()
    <% } else { -%>
      @IsNotEmptyObject()
    <% } -%>
  <% } -%>
<% } -%>

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Dto<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/02-create-import-class-transformer.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-transformer'"
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  import {
    // decorators here
  } from 'class-transformer';
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/03-create-import-class-validator.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-validator'"
---
<% if (isAddToDto) { -%>
  import {
    // decorators here
  } from 'class-validator';
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/04-create-import-swagger.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from '@nestjs/swagger'"
---
<% if (isAddToDto) { -%>
  import { 
    // decorators here
  } from '@nestjs/swagger';
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/05-create-boolean.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsBoolean,
---
<% if (isAddToDto && type === 'boolean') { -%>
  IsBoolean,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/06-create-number.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNumber,
---
<% if (isAddToDto && type === 'number') { -%>
  IsNumber,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/07-create-string.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsString,
---
<% if (isAddToDto && type === 'string') { -%>
  IsString,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/08-create-api-property.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from '@nestjs/swagger'"
skip_if: \ApiProperty,
---
<% if (isAddToDto) { -%>
  ApiProperty,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/09-create-class-transformer-type.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-transformer'"
skip_if: \Type,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  Type,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/10-create-validate-is-array.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsArray,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToMany' || referenceType === 'manyToMany')) { -%>
  IsArray,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/11-create-validate-nested.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \ValidateNested,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  ValidateNested,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/12-create-validate-not-empty-object.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNotEmptyObject,
---
<% if (isAddToDto && ((kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToOne' || referenceType === 'manyToOne'))) { -%>
  IsNotEmptyObject,
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/13-create-type-dto-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
at_line: 0
skip_if: import { <%= type %>Dto
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Dto } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.dto';
<% } -%>

================
File: backend/.hygen/property/add-to-document/dto/14-create-optional.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsOptional,
---
<% if (isAddToDto && (isOptional || isNullable)) { -%>
  IsOptional,
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/entities/schema-mongoose-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
at_line: 0
skip_if: import mongoose
---
<% if (kind === 'reference') { -%>
  import mongoose from 'mongoose';
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/entities/schema.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
after: export class <%= name %>SchemaClass
---

<% if (kind === 'reference') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    @Prop({
      type: mongoose.Schema.Types.ObjectId,
      ref: '<%= type %>SchemaClass',
      autopopulate: <% if (propertyInReference) { -%>false<% } else { -%>true<% } -%>,
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass <% if (isNullable) { -%> | null<% } -%>;
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    @Prop({
      type: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: '<%= type %>SchemaClass',
        autopopulate: true,
      }]
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass[] <% if (isNullable) { -%> | null<% } -%>;
  <% } -%>
<% } else if (kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    @Prop({
      type: <%= type %>SchemaClass,
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass <% if (isNullable) { -%> | null<% } -%>;
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    @Prop({
      type: ['<%= type %>SchemaClass'],
    })
    <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>SchemaClass[] <% if (isNullable) { -%> | null<% } -%>;
  <% } -%>
<% } else { -%>
  @Prop({
    type:
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
  })
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/entities/type-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema.ts
at_line: 0
skip_if: <% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %>SchemaClass<% } else { -%><%= true %><% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>SchemaClass } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.schema';
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/mappers/mapper-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>\(\)
---
<% if (kind === 'primitive') { -%>
  domainEntity.<%= property %> = raw.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = <%= type %>Mapper.toDomain(raw.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = raw.<%= property %>.map((item) => <%= type %>Mapper.toDomain(item));
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/mappers/mapper-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
at_line: 1
skip_if: import { <%= type %>Mapper
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Mapper } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.mapper';
<% } -%>

================
File: backend/.hygen/property/add-to-document/infrastructure/persistence/document/mappers/mapper-persistence.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>SchemaClass\(\)
---
<% if (kind === 'primitive') { -%>
  persistenceSchema.<%= property %> = domainEntity.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (domainEntity.<%= property %>) {
      persistenceSchema.<%= property %> = <%= type %>Mapper.toPersistence(domainEntity.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceSchema.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (domainEntity.<%= property %>) {
      persistenceSchema.<%= property %> = domainEntity.<%= property %>.map((item) => <%= type %>Mapper.toPersistence(item));
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceSchema.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-document/index.js
================
const { execSync } = require('child_process');

const collectPromisesResults = (callback) => async (prevValues) => {
  const results = await callback(prevValues);

  return { ...prevValues, ...results };
};

module.exports = {
  prompt: async ({ prompter, args }) => {
    if (Object.keys(args).length) {
      return Promise.resolve({
        name: args.name,
        property: args.property,
        kind: args.kind,
        type: args.type,
        referenceType: args.referenceType,
        propertyInReference: args.propertyInReference,
        isAddToDto: args.isAddToDto === 'true',
        isOptional: args.isOptional === 'true',
        isNullable: args.isNullable === 'true',
      });
    }

    const result = await prompter
      .prompt({
        type: 'input',
        name: 'name',
        message: "Entity name (e.g. 'User')",
        validate: (input) => {
          if (!input.trim()) {
            return 'Entity name is required';
          }

          return true;
        },
        format: (input) => {
          return input.trim();
        },
      })
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'input',
            name: 'property',
            message: "Property name (e.g. 'firstName')",
            validate: (input) => {
              if (!input.trim()) {
                return 'Property name is required';
              }

              return true;
            },
            format: (input) => {
              return input.trim();
            },
          });
        }),
      )
      .then(
        collectPromisesResults((rootValues) => {
          return prompter
            .prompt({
              type: 'select',
              name: 'kind',
              message: 'Select kind of type',
              choices: [
                {
                  message: 'Primitive (string, number, etc)',
                  value: 'primitive',
                },
                { message: 'Reference to entity', value: 'reference' },
                {
                  message: 'Duplication data from entity',
                  value: 'duplication',
                },
              ],
            })
            .then(
              collectPromisesResults((values) => {
                if (
                  values.kind === 'reference' ||
                  values.kind === 'duplication'
                ) {
                  return prompter
                    .prompt({
                      type: 'input',
                      name: 'type',
                      message: "Entity name (e.g. 'File')",
                      validate: (input) => {
                        if (!input.trim()) {
                          return 'Entity name is required';
                        }

                        return true;
                      },
                      format: (input) => {
                        return input.trim();
                      },
                    })
                    .then(
                      collectPromisesResults((referenceValues) => {
                        return prompter
                          .prompt({
                            type: 'select',
                            name: 'referenceType',
                            message: 'Select type of reference',
                            choices: [
                              {
                                message: `One to one (${rootValues.name} contains only one instance of ${referenceValues.type}, and ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'oneToOne',
                              },
                              {
                                message: `One to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, but ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'oneToMany',
                              },
                              {
                                message: `Many to one (${rootValues.name} contains only one instance of ${referenceValues.type}, but ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'manyToOne',
                              },
                              {
                                message: `Many to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, and ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'manyToMany',
                              },
                            ],
                          })
                          .then(
                            collectPromisesResults((referenceTypeValues) => {
                              if (
                                referenceTypeValues.referenceType ===
                                'oneToMany'
                              ) {
                                return prompter.prompt({
                                  type: 'input',
                                  name: 'propertyInReference',
                                  message: `Property name in ${referenceValues.type} (e.g. 'createdBy')`,
                                  validate: (input) => {
                                    if (!input.trim()) {
                                      return `Property name in ${referenceValues.type} is required`;
                                    }

                                    return true;
                                  },
                                  format: (input) => {
                                    return input.trim();
                                  },
                                });
                              }

                              return referenceTypeValues;
                            }),
                          );
                      }),
                    );
                }

                return prompter.prompt({
                  type: 'select',
                  name: 'type',
                  message: 'Property type',
                  choices: ['string', 'number', 'boolean'],
                });
              }),
            );
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isAddToDto',
            message: 'Add to DTO?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isOptional',
            message: 'Is the property optional?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults((values) => {
          if (!values.isOptional) {
            return { isNullable: false };
          }

          return prompter.prompt({
            type: 'confirm',
            name: 'isNullable',
            message: 'Can the property be nullable??',
            initial: true,
          });
        }),
      );

    if (
      (result.kind === 'reference' || result.kind === 'duplication') &&
      result.referenceType === 'oneToMany'
    ) {
      execSync(
        `npm run add:property:to-document -- --name=${result.type} --property=${result.propertyInReference} --propertyInReference=${result.property} --kind=${result.kind} --type=${result.name} --referenceType=manyToOne --isAddToDto=${result.isAddToDto} --isOptional=false --isNullable=false`,
        {
          stdio: 'inherit',
        },
      );
    }

    return result;
  },
};

================
File: backend/.hygen/property/add-to-document/module-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Module
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Module } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.module';<% } -%>

================
File: backend/.hygen/property/add-to-document/module.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
after: imports.*\[
skip_if: <%= h.inflection.transform(type, ['pluralize']) %>Module,
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= h.inflection.transform(type, ['pluralize']) %>Module,
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-create-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property\-payload \/\>
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: create<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-create.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property \/\>
---
<% if (isAddToDto && !isOptional && !isNullable) { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        create<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Object;
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Objects;
    <% } -%>
  <% } -%>
<% } else { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
          create<%= name %>Dto.<%= property %>.id,
        );
        if (!<%= property %>Object) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Object;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
          create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
        );
        if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Objects;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-import-http-code.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: HttpStatus,
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { HttpStatus, UnprocessableEntityException } from '@nestjs/common';
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-import-type-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Service } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.service';<% } -%>

================
File: backend/.hygen/property/add-to-document/service-inject.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: constructor
skip_if: private readonly <%= h.inflection.camelize(type, true) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  private readonly <%= h.inflection.camelize(type, true) %>Service: <%= h.inflection.transform(type, ['pluralize']) %>Service,
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-update-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property\-payload \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: update<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-document/service-update.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        update<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Object;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        update<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== update<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Objects;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-relational/domain/domain-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';<% } -%>

================
File: backend/.hygen/property/add-to-relational/domain/domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.ts
after: export class <%= name %> {
---

@ApiProperty({
  type: () => 
    <% if (kind === 'primitive') { -%>
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
    <% } else if (kind === 'reference' || kind === 'duplication') { -%>
      <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
        [<%= type %><% if (type === 'File') { -%>Type<% } -%>],
      <% } else { -%>
        <%= type %><% if (type === 'File') { -%>Type<% } -%>,
      <% } -%>
    <% } -%>
  nullable: <%= isNullable %>,
})

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %><% if (type === 'File') { -%>Type<% } -%><% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/01-create.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
after: export class Create<%= name %>Dto
---

<% if (isAddToDto) { -%>
  @ApiProperty({
    required: <%= !(isOptional || isNullable) %>,
    type: () => 
      <% if (kind === 'primitive') { -%>
        <% if (type === 'string') { -%>
          String,
        <% } else if (type === 'number') { -%>
          Number,
        <% } else if (type === 'boolean') { -%>
          Boolean,
        <% } -%>
      <% } else if (kind === 'reference' || kind === 'duplication') { -%>
        <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
          [<%= type %>Dto],
        <% } else { -%>
          <%= type %>Dto,
        <% } -%>
      <% } -%>
  })
<% } -%>

<% if (isAddToDto) { -%>
  <% if (isOptional || isNullable) { -%>
    @IsOptional()
  <% } -%>
  <% if (kind === 'primitive') { -%>
    <% if (type === 'string') { -%>
      @IsString()
    <% } else if (type === 'number') { -%>
      @IsNumber()
    <% } else if (type === 'boolean') { -%>
      @IsBoolean()
    <% } -%>
  <% } else if (kind === 'reference' || kind === 'duplication') { -%>
    @ValidateNested()
    @Type(() => <%= type %>Dto)
    <% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      @IsArray()
    <% } else { -%>
      @IsNotEmptyObject()
    <% } -%>
  <% } -%>
<% } -%>

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Dto<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/02-create-import-class-transformer.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-transformer'"
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  import {
    // decorators here
  } from 'class-transformer';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/03-create-import-class-validator.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from 'class-validator'"
---
<% if (isAddToDto) { -%>
  import {
    // decorators here
  } from 'class-validator';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/04-create-import-swagger.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: export class Create<%= name %>Dto
skip_if: "} from '@nestjs/swagger'"
---
<% if (isAddToDto) { -%>
  import { 
    // decorators here
  } from '@nestjs/swagger';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/05-create-boolean.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsBoolean,
---
<% if (isAddToDto && type === 'boolean') { -%>
  IsBoolean,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/06-create-number.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNumber,
---
<% if (isAddToDto && type === 'number') { -%>
  IsNumber,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/07-create-string.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsString,
---
<% if (isAddToDto && type === 'string') { -%>
  IsString,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/08-create-api-property.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from '@nestjs/swagger'"
skip_if: \ApiProperty,
---
<% if (isAddToDto) { -%>
  ApiProperty,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/09-create-class-transformer-type.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-transformer'"
skip_if: \Type,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  Type,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/10-create-validate-is-array.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsArray,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToMany' || referenceType === 'manyToMany')) { -%>
  IsArray,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/11-create-validate-nested.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \ValidateNested,
---
<% if (isAddToDto && (kind === 'reference' || kind === 'duplication')) { -%>
  ValidateNested,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/12-create-validate-not-empty-object.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsNotEmptyObject,
---
<% if (isAddToDto && ((kind === 'reference' || kind === 'duplication') && (referenceType === 'oneToOne' || referenceType === 'manyToOne'))) { -%>
  IsNotEmptyObject,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/13-create-type-dto-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
at_line: 0
skip_if: import { <%= type %>Dto
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Dto } from '../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/dto/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.dto';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/dto/14-create-optional.dto.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/dto/create-<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.dto.ts
before: "} from 'class-validator'"
skip_if: \IsOptional,
---
<% if (isAddToDto && (isOptional || isNullable)) { -%>
  IsOptional,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-column.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sColumn,
---
<% if (kind === 'primitive' || kind === 'duplication') { -%>
  Column,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-join-column.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sJoinColumn,
---
<% if (kind === 'reference' && (referenceType === 'oneToOne' || referenceType === 'manyToMany')) { -%>
  JoinColumn,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-many-to-many.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \ManyToMany,
---
<% if (kind === 'reference' && referenceType === 'manyToMany') { -%>
  ManyToMany,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-many-to-one.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sManyToOne,
---
<% if (kind === 'reference' && referenceType === 'manyToOne') { -%>
  ManyToOne,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-one-to-many.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sOneToMany,
---
<% if (kind === 'reference' && referenceType === 'oneToMany') { -%>
  OneToMany,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity-one-to-one.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
before: from \'typeorm\'
skip_if: \sOneToOne,
---
<% if (kind === 'reference' && referenceType === 'oneToOne') { -%>
  OneToOne,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/entity.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
after: export class <%= name %>Entity
---

<% if (kind === 'primitive') { -%>
  @Column({
    nullable: <%= isNullable %>,
    type:
      <% if (type === 'string') { -%>
        String,
      <% } else if (type === 'number') { -%>
        Number,
      <% } else if (type === 'boolean') { -%>
        Boolean,
      <% } -%>
  })
<% } -%>

<% if (kind === 'duplication') { -%>
  @Column({
    nullable: <%= isNullable %>,
    type: 'jsonb',
  })
<% } -%>

<% if (kind === 'reference') { -%>
  <% if (referenceType === 'oneToOne') { -%>
    @OneToOne(() => <%= type %>Entity, { eager: true, nullable: <%= isNullable %> })
  <% } else if (referenceType === 'oneToMany') { -%>
    @OneToMany(() => <%= type %>Entity, (childEntity) => childEntity.<%= propertyInReference %>, { eager: true, nullable: <%= isNullable %> })
  <% } else if (referenceType === 'manyToOne') { -%>
    @ManyToOne(
      () => <%= type %>Entity,
      <% if (propertyInReference) { -%>
        (parentEntity) => parentEntity.<%= propertyInReference %>,
      <% } -%>
      { eager: <% if (propertyInReference) { -%>false<% } else { -%>true<% } -%>, nullable: <%= isNullable %> }
    )
  <% } else if (referenceType === 'manyToMany') { -%>
    @ManyToMany(() => <%= type %>Entity, { eager: true, nullable: <%= isNullable %> })
  <% } -%>

  <% if (referenceType === 'oneToOne' || referenceType === 'manyToMany') { -%>
    @JoinColumn()
  <% } -%>

  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Entity<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else if (kind === 'duplication') { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %>Entity<% if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>[]<% } -%> <% if (isNullable) { -%> | null<% } -%>;
<% } else { -%>
  <%= property %><% if (!isAddToDto || isOptional) { -%>?<% } -%>: <%= type %> <% if (isNullable) { -%> | null<% } -%>;
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/entities/type-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity.ts
at_line: 0
skip_if: <% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= type %>Entity<% } else { -%><%= true %><% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Entity } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.entity';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/mappers/mapper-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>\(\)
---
<% if (kind === 'primitive') { -%>
  domainEntity.<%= property %> = raw.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = <%= type %>Mapper.toDomain(raw.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (raw.<%= property %>) {
      domainEntity.<%= property %> = raw.<%= property %>.map((item) => <%= type %>Mapper.toDomain(item));
    }
    <% if (isNullable) { -%>
      else if (raw.<%= property %> === null) {
        domainEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/mappers/mapper-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
at_line: 1
skip_if: import { <%= type %>Mapper
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %>Mapper } from '../../../../../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>.mapper';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/infrastructure/persistence/relational/mappers/mapper-persistence.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/mappers/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.mapper.ts
after: new <%= name %>Entity\(\)
---
<% if (kind === 'primitive') { -%>
  persistenceEntity.<%= property %> = domainEntity.<%= property %>;
<% } else if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    if (domainEntity.<%= property %>) {
      persistenceEntity.<%= property %> = <%= type %>Mapper.toPersistence(domainEntity.<%= property %>);
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceEntity.<%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    if (domainEntity.<%= property %>) {
      persistenceEntity.<%= property %> = domainEntity.<%= property %>.map((item) => <%= type %>Mapper.toPersistence(item));
    }
    <% if (isNullable) { -%>
      else if (domainEntity.<%= property %> === null) {
        persistenceEntity.<%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-relational/index.js
================
const { execSync } = require('child_process');

const collectPromisesResults = (callback) => async (prevValues) => {
  const results = await callback(prevValues);

  return { ...prevValues, ...results };
};

module.exports = {
  prompt: async ({ prompter, args }) => {
    if (Object.keys(args).length) {
      return Promise.resolve({
        name: args.name,
        property: args.property,
        kind: args.kind,
        type: args.type,
        referenceType: args.referenceType,
        propertyInReference: args.propertyInReference,
        isAddToDto: args.isAddToDto === 'true',
        isOptional: args.isOptional === 'true',
        isNullable: args.isNullable === 'true',
      });
    }

    const result = await prompter
      .prompt({
        type: 'input',
        name: 'name',
        message: "Entity name (e.g. 'User')",
        validate: (input) => {
          if (!input.trim()) {
            return 'Entity name is required';
          }

          return true;
        },
        format: (input) => {
          return input.trim();
        },
      })
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'input',
            name: 'property',
            message: "Property name (e.g. 'firstName')",
            validate: (input) => {
              if (!input.trim()) {
                return 'Property name is required';
              }

              return true;
            },
            format: (input) => {
              return input.trim();
            },
          });
        }),
      )
      .then(
        collectPromisesResults((rootValues) => {
          return prompter
            .prompt({
              type: 'select',
              name: 'kind',
              message: 'Select kind of type',
              choices: [
                {
                  message: 'Primitive (string, number, etc)',
                  value: 'primitive',
                },
                { message: 'Reference to entity', value: 'reference' },
                {
                  message: 'Duplication data from entity',
                  value: 'duplication',
                },
              ],
            })
            .then(
              collectPromisesResults((values) => {
                if (
                  values.kind === 'reference' ||
                  values.kind === 'duplication'
                ) {
                  return prompter
                    .prompt({
                      type: 'input',
                      name: 'type',
                      message: "Entity name (e.g. 'File')",
                      validate: (input) => {
                        if (!input.trim()) {
                          return 'Entity name is required';
                        }

                        return true;
                      },
                      format: (input) => {
                        return input.trim();
                      },
                    })
                    .then(
                      collectPromisesResults((referenceValues) => {
                        return prompter
                          .prompt({
                            type: 'select',
                            name: 'referenceType',
                            message: 'Select type of reference',
                            choices: [
                              {
                                message: `One to one (${rootValues.name} contains only one instance of ${referenceValues.type}, and ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'oneToOne',
                              },
                              {
                                message: `One to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, but ${referenceValues.type} contains only one instance of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'oneToMany',
                              },
                              {
                                message: `Many to one (${rootValues.name} contains only one instance of ${referenceValues.type}, but ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type})`,
                                value: 'manyToOne',
                              },
                              {
                                message: `Many to many (${rootValues.name} contains multiple instances of ${referenceValues.type}, and ${referenceValues.type} contains multiple instances of ${rootValues.name}. ${rootValues.property}: ${referenceValues.type}[])`,
                                value: 'manyToMany',
                              },
                            ],
                          })
                          .then(
                            collectPromisesResults((referenceTypeValues) => {
                              if (
                                referenceTypeValues.referenceType ===
                                'oneToMany'
                              ) {
                                return prompter.prompt({
                                  type: 'input',
                                  name: 'propertyInReference',
                                  message: `Property name in ${referenceValues.type} (e.g. 'createdBy')`,
                                  validate: (input) => {
                                    if (!input.trim()) {
                                      return `Property name in ${referenceValues.type} is required`;
                                    }

                                    return true;
                                  },
                                  format: (input) => {
                                    return input.trim();
                                  },
                                });
                              }

                              return referenceTypeValues;
                            }),
                          );
                      }),
                    );
                }

                return prompter.prompt({
                  type: 'select',
                  name: 'type',
                  message: 'Property type',
                  choices: ['string', 'number', 'boolean'],
                });
              }),
            );
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isAddToDto',
            message: 'Add to DTO?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults(() => {
          return prompter.prompt({
            type: 'confirm',
            name: 'isOptional',
            message: 'Is the property optional?',
            initial: true,
          });
        }),
      )
      .then(
        collectPromisesResults((values) => {
          if (!values.isOptional) {
            return { isNullable: false };
          }

          return prompter.prompt({
            type: 'confirm',
            name: 'isNullable',
            message: 'Can the property be nullable??',
            initial: true,
          });
        }),
      );

    if (
      (result.kind === 'reference' || result.kind === 'duplication') &&
      result.referenceType === 'oneToMany'
    ) {
      execSync(
        `npm run add:property:to-relational -- --name=${result.type} --property=${result.propertyInReference} --propertyInReference=${result.property} --kind=${result.kind} --type=${result.name} --referenceType=manyToOne --isAddToDto=${result.isAddToDto} --isOptional=false --isNullable=false`,
        {
          stdio: 'inherit',
        },
      );
    }

    return result;
  },
};

================
File: backend/.hygen/property/add-to-relational/module-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Module
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Module } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.module';<% } -%>

================
File: backend/.hygen/property/add-to-relational/module.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.module.ts
after: imports.*\[
skip_if: <%= h.inflection.transform(type, ['pluralize']) %>Module,
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= h.inflection.transform(type, ['pluralize']) %>Module,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-create-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property\-payload \/\>
---

<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: create<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-create.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<creating\-property \/\>
---
<% if (isAddToDto && !isOptional && !isNullable) { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        create<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Object;
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      const <%= property %> = <%= property %>Objects;
    <% } -%>
  <% } -%>
<% } else { -%>
  <% if (kind === 'reference' || kind === 'duplication') { -%>
    <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
          create<%= name %>Dto.<%= property %>.id,
        );
        if (!<%= property %>Object) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Object;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
      let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

      if (create<%= name %>Dto.<%= property %>) {
        const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
          create<%= name %>Dto.<%= property %>.map((entity) => entity.id),
        );
        if (<%= property %>Objects.length !== create<%= name %>Dto.<%= property %>.length) {
          throw new UnprocessableEntityException({
            status: HttpStatus.UNPROCESSABLE_ENTITY,
            errors: {
              <%= property %>: 'notExists',
            },
          });
        }
        <%= property %> = <%= property %>Objects;
      }
      <% if (isNullable) { -%>
        else if (create<%= name %>Dto.<%= property %> === null) {
          <%= property %> = null;
        }
      <% } -%>
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-import-http-code.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: HttpStatus,
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { HttpStatus, UnprocessableEntityException } from '@nestjs/common';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-import-type-domain.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= type %><% if (type === 'File') { -%>Type<% } -%>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  import { <%= type %><% if (type === 'File') { -%>Type<% } -%> } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/domain/<%= h.inflection.transform(type, ['underscore', 'dasherize']) %>';
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-import.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
at_line: 0
skip_if: import { <%= h.inflection.transform(type, ['pluralize']) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>import { <%= h.inflection.transform(type, ['pluralize']) %>Service } from '../<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(type, ['pluralize', 'underscore', 'dasherize']) %>.service';<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-inject.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: constructor
skip_if: private readonly <%= h.inflection.camelize(type, true) %>Service
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  private readonly <%= h.inflection.camelize(type, true) %>Service: <%= h.inflection.transform(type, ['pluralize']) %>Service,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-update-payload.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property\-payload \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <%= property %>,
<% } else { -%>
  <%= property %>: update<%= name %>Dto.<%= property %>,
<% } -%>

================
File: backend/.hygen/property/add-to-relational/service-update.ejs.t
================
---
inject: true
to: src/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>.service.ts
after: \<updating\-property \/\>
---
<% if (kind === 'reference' || kind === 'duplication') { -%>
  <% if (referenceType === 'oneToOne' || referenceType === 'manyToOne') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%> <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Object = await this.<%= h.inflection.camelize(type, true) %>Service.findById(
        update<%= name %>Dto.<%= property %>.id,
      );
      if (!<%= property %>Object) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Object;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } else if (referenceType === 'oneToMany' || referenceType === 'manyToMany') { -%>
    let <%= property %>: <%= type %><% if (type === 'File') { -%>Type<% } -%>[] <% if (isNullable) { -%> | null<% } -%> | undefined = undefined;

    if (update<%= name %>Dto.<%= property %>) {
      const <%= property %>Objects = await this.<%= h.inflection.camelize(type, true) %>Service.findByIds(
        update<%= name %>Dto.<%= property %>.map((entity) => entity.id),
      );
      if (<%= property %>Objects.length !== update<%= name %>Dto.<%= property %>.length) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            <%= property %>: 'notExists',
          },
        });
      }
      <%= property %> = <%= property %>Objects;
    }
    <% if (isNullable) { -%>
      else if (update<%= name %>Dto.<%= property %> === null) {
        <%= property %> = null;
      }
    <% } -%>
  <% } -%>
<% } -%>

================
File: backend/.hygen/seeds/create-document/module.ejs.t
================
---
to: src/database/seeds/document/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.module.ts
---
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { <%= name %>Schema, <%= name %>SchemaClass } from '../../../../<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';
import { <%= name %>SeedService } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service';

@Module({
  imports: [
    MongooseModule.forFeature([
      {
        name: <%= name %>SchemaClass.name,
        schema: <%= name %>Schema,
      },
    ]),
  ],
  providers: [<%= name %>SeedService],
  exports: [<%= name %>SeedService],
})
export class <%= name %>SeedModule {}

================
File: backend/.hygen/seeds/create-document/run-seed-import.ejs.t
================
---
inject: true
to: src/database/seeds/document/run-seed.ts
after: \@nestjs\/core
---
import { <%= name %>SeedService } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service';

================
File: backend/.hygen/seeds/create-document/run-seed-service.ejs.t
================
---
inject: true
to: src/database/seeds/document/run-seed.ts
before: close
---
  await app.get(<%= name %>SeedService).run();

================
File: backend/.hygen/seeds/create-document/seed-module-import.ejs.t
================
---
inject: true
to: src/database/seeds/document/seed.module.ts
before: \@Module
---
import { <%= name %>SeedModule } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.module';

================
File: backend/.hygen/seeds/create-document/seed-module.ejs.t
================
---
inject: true
to: src/database/seeds/document/seed.module.ts
after: imports
---
    <%= name %>SeedModule,

================
File: backend/.hygen/seeds/create-document/service.ejs.t
================
---
to: src/database/seeds/document/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service.ts
---
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { <%= name %>SchemaClass } from '../../../../<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/document/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.schema';

@Injectable()
export class <%= name %>SeedService {
  constructor(
    @InjectModel(<%= name %>SchemaClass.name)
    private readonly model: Model<<%= name %>SchemaClass>,
  ) {}

  async run() {
    const count = await this.model.countDocuments();

    if (count === 0) {
      const data = new this.model({});
      await data.save();
    }
  }
}

================
File: backend/.hygen/seeds/create-relational/module.ejs.t
================
---
to: src/database/seeds/relational/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.module.ts
---
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { <%= name %>Entity } from '../../../../<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';
import { <%= name %>SeedService } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service';

@Module({
  imports: [TypeOrmModule.forFeature([<%= name %>Entity])],
  providers: [<%= name %>SeedService],
  exports: [<%= name %>SeedService],
})
export class <%= name %>SeedModule {}

================
File: backend/.hygen/seeds/create-relational/run-seed-import.ejs.t
================
---
inject: true
to: src/database/seeds/relational/run-seed.ts
after: \@nestjs\/core
---
import { <%= name %>SeedService } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service';

================
File: backend/.hygen/seeds/create-relational/run-seed-service.ejs.t
================
---
inject: true
to: src/database/seeds/relational/run-seed.ts
before: close
---
  await app.get(<%= name %>SeedService).run();

================
File: backend/.hygen/seeds/create-relational/seed-module-import.ejs.t
================
---
inject: true
to: src/database/seeds/relational/seed.module.ts
before: \@Module
---
import { <%= name %>SeedModule } from './<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.module';

================
File: backend/.hygen/seeds/create-relational/seed-module.ejs.t
================
---
inject: true
to: src/database/seeds/relational/seed.module.ts
after: imports
---
    <%= name %>SeedModule,

================
File: backend/.hygen/seeds/create-relational/service.ejs.t
================
---
to: src/database/seeds/relational/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>-seed.service.ts
---
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { <%= name %>Entity } from '../../../../<%= h.inflection.transform(name, ['pluralize', 'underscore', 'dasherize']) %>/infrastructure/persistence/relational/entities/<%= h.inflection.transform(name, ['underscore', 'dasherize']) %>.entity';
import { Repository } from 'typeorm';

@Injectable()
export class <%= name %>SeedService {
  constructor(
    @InjectRepository(<%= name %>Entity)
    private repository: Repository<<%= name %>Entity>,
  ) {}

  async run() {
    const count = await this.repository.count();

    if (count === 0) {
      await this.repository.save(this.repository.create({}));
    }
  }
}

================
File: backend/.install-scripts/helpers/replace.ts
================
import fs from 'fs';

const replace = (params: {
  path: string;
  actions: Array<{
    find: string | RegExp;
    replace: string;
  }>;
}) => {
  const { path, actions } = params;

  try {
    let content = fs.readFileSync(path, 'utf-8');

    actions.forEach((action) => {
      content = content.replace(action.find, action.replace);
    });

    fs.writeFileSync(path, content, 'utf-8');
  } catch (error) {
    console.error(`Error replacing text in ${path}:`, error.message);
  }
};

export default replace;

================
File: backend/.install-scripts/scripts/property-generation-scripts/remove-all-db.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeAllDbPropertyGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'property', 'add-to-all-db'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"add:property:to-all-db\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postadd:property:to-all-db\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeAllDbPropertyGeneration;

================
File: backend/.install-scripts/scripts/property-generation-scripts/remove-document.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeDocumentPropertyGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'property', 'add-to-document'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"add:property:to-document\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postadd:property:to-document\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeDocumentPropertyGeneration;

================
File: backend/.install-scripts/scripts/property-generation-scripts/remove-relational.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeRelationalPropertyGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'property', 'add-to-relational'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"add:property:to-relational\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postadd:property:to-relational\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeRelationalPropertyGeneration;

================
File: backend/.install-scripts/scripts/resource-generation-scripts/remove-all-db.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeAllDbResourceGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'generate', 'all-db-resource'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"generate:resource:all-db\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postgenerate:resource:all-db\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeAllDbResourceGeneration;

================
File: backend/.install-scripts/scripts/resource-generation-scripts/remove-document.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeDocumentResourceGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'generate', 'document-resource'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"generate:resource:document\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postgenerate:resource:document\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeDocumentResourceGeneration;

================
File: backend/.install-scripts/scripts/resource-generation-scripts/remove-relational.ts
================
import replace from '../../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeRelationalResourceGeneration = async () => {
  const filesToRemove = [
    path.join(process.cwd(), '.hygen', 'generate', 'relational-resource'),
  ];

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"generate:resource:relational\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postgenerate:resource:relational\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeRelationalResourceGeneration;

================
File: backend/.install-scripts/scripts/remove-auth-apple.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeAppleAuth = async () => {
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\s*AuthAppleModule\,.*/g,
        replace: '',
      },
      {
        find: /\s*appleConfig\,.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ AuthAppleModule \} from \'\.\/auth\-apple\/auth\-apple\.module\'\;.*/g,
        replace: '',
      },
      {
        find: /\s*import appleConfig from \'\.\/auth\-apple\/config\/apple\.config\'\;.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'config', 'config.type.ts'),
    actions: [
      {
        find: /\s*apple\: AppleConfig.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ AppleConfig \}.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"apple-signin-auth\":.*/g,
        replace: '',
      },
    ],
  });
  fs.rmSync(path.join(process.cwd(), 'src', 'auth-apple'), {
    recursive: true,
    force: true,
  });
};

export default removeAppleAuth;

================
File: backend/.install-scripts/scripts/remove-auth-facebook.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeFacebookAuth = async () => {
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\s*AuthFacebookModule\,.*/g,
        replace: '',
      },
      {
        find: /\s*facebookConfig\,.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ AuthFacebookModule \} from '\.\/auth\-facebook\/auth\-facebook\.module'\;.*/g,
        replace: '',
      },
      {
        find: /\s*import facebookConfig from '\.\/auth\-facebook\/config\/facebook\.config'\;.*/g,
        replace: '',
      },
    ],
  });

  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"fb\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"@types\/facebook\-js\-sdk\":.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'config', 'config.type.ts'),
    actions: [
      {
        find: /\s*facebook\: FacebookConfig.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ FacebookConfig \}.*/g,
        replace: '',
      },
    ],
  });
  fs.rmSync(path.join(process.cwd(), 'src', 'auth-facebook'), {
    recursive: true,
    force: true,
  });
};

export default removeFacebookAuth;

================
File: backend/.install-scripts/scripts/remove-auth-google.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeGoogleAuth = async () => {
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\s*AuthGoogleModule\,.*/g,
        replace: '',
      },
      {
        find: /\s*googleConfig\,.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ AuthGoogleModule \} from \'\.\/auth\-google\/auth\-google\.module\'\;.*/g,
        replace: '',
      },
      {
        find: /\s*import googleConfig from \'\.\/auth\-google\/config\/google\.config\'\;.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'config', 'config.type.ts'),
    actions: [
      {
        find: /\s*google\: GoogleConfig.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ GoogleConfig \}.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"google-auth-library\":.*/g,
        replace: '',
      },
    ],
  });
  fs.rmSync(path.join(process.cwd(), 'src', 'auth-google'), {
    recursive: true,
    force: true,
  });
};

export default removeGoogleAuth;

================
File: backend/.install-scripts/scripts/remove-auth-twitter.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeTwitterAuth = async () => {
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\s*AuthTwitterModule\,.*/g,
        replace: '',
      },
      {
        find: /\s*twitterConfig\,.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ AuthTwitterModule \} from \'\.\/auth-twitter\/auth-twitter\.module\'\;.*/g,
        replace: '',
      },
      {
        find: /\s*import twitterConfig from \'\.\/auth-twitter\/config\/twitter\.config\'\;.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'config', 'config.type.ts'),
    actions: [
      {
        find: /\s*twitter\: TwitterConfig.*/g,
        replace: '',
      },
      {
        find: /\s*import \{ TwitterConfig \}.*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /,\s*\"twitter\":.*\"/g,
        replace: '',
      },
      {
        find: /\s*\"twitter\":.*\,/g,
        replace: '',
      },
      {
        find: /\s*\"@types\/twitter\":.*/g,
        replace: '',
      },
    ],
  });
  fs.rmSync(path.join(process.cwd(), 'src', 'auth-twitter'), {
    recursive: true,
    force: true,
  });
};

export default removeTwitterAuth;

================
File: backend/.install-scripts/scripts/remove-install-scripts.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeInstallScripts = async () => {
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"app:config\".*/g,
        replace: '',
      },
      {
        find: /\s*\"@types\/prompts\"\:.*/g,
        replace: '',
      },
    ],
  });
  fs.rmSync(path.join(process.cwd(), '.install-scripts'), {
    recursive: true,
    force: true,
  });
};

export default removeInstallScripts;

================
File: backend/.install-scripts/scripts/remove-mongodb.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removeMongoDb = async () => {
  const filesToRemove = [
    path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'persistence',
      'document',
    ),
    path.join(
      process.cwd(),
      'src',
      'session',
      'infrastructure',
      'persistence',
      'document',
    ),
    path.join(
      process.cwd(),
      'src',
      'users',
      'infrastructure',
      'persistence',
      'document',
    ),
    path.join(process.cwd(), 'src', 'database', 'mongoose-config.service.ts'),
    path.join(process.cwd(), 'src', 'database', 'seeds', 'document'),
    path.join(
      process.cwd(),
      'src',
      'roles',
      'infrastructure',
      'persistence',
      'document',
    ),
    path.join(
      process.cwd(),
      'src',
      'statuses',
      'infrastructure',
      'persistence',
      'document',
    ),
    path.join(process.cwd(), 'env-example-document'),
    path.join(process.cwd(), 'docker-compose.document.ci.yaml'),
    path.join(process.cwd(), 'docker-compose.document.test.yaml'),
    path.join(process.cwd(), 'docker-compose.document.yaml'),
    path.join(process.cwd(), 'startup.document.ci.sh'),
    path.join(process.cwd(), 'startup.document.dev.sh'),
    path.join(process.cwd(), 'startup.document.test.sh'),
    path.join(process.cwd(), 'document.Dockerfile'),
    path.join(process.cwd(), 'document.e2e.Dockerfile'),
    path.join(process.cwd(), 'document.test.Dockerfile'),
    path.join(process.cwd(), '.hygen', 'seeds', 'create-document'),
    path.join(process.cwd(), 'src', 'utils', 'document-entity-helper.ts'),
  ];

  replace({
    path: path.join(process.cwd(), '.github', 'workflows', 'docker-e2e.yml'),
    actions: [
      {
        find: /\# <database-document-block>.*\# <\/database-document-block>/gs,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructureDatabaseModule = TypeOrmModule.forRootAsync({
  useClass: TypeOrmConfigService,
  dataSourceFactory: async (options: DataSourceOptions) => {
    return new DataSource(options).initialize();
  },
});`,
      },
      {
        find: /\s*import \{ MongooseModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ MongooseConfigService \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'files', 'files.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      'local',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      's3',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      's3-presigned',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'session', 'session.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalSessionPersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentSessionPersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'users', 'users.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = RelationalUserPersistenceModule;`,
      },
      {
        find: /\s*import \{ DocumentUserPersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'users', 'domain', 'user.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = Number;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'statuses', 'domain', 'status.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = Number;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'roles', 'domain', 'role.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = Number;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"@nestjs\/mongoose\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"mongoose(-autopopulate)?\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"seed:run:document\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"seed:create:document\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"test:e2e:document:docker\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removeMongoDb;

================
File: backend/.install-scripts/scripts/remove-postgresql.ts
================
import replace from '../helpers/replace';
import path from 'path';
import fs from 'fs';

const removePostgreSql = async () => {
  const filesToRemove = [
    path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'persistence',
      'relational',
    ),
    path.join(
      process.cwd(),
      'src',
      'session',
      'infrastructure',
      'persistence',
      'relational',
    ),
    path.join(
      process.cwd(),
      'src',
      'users',
      'infrastructure',
      'persistence',
      'relational',
    ),
    path.join(process.cwd(), 'src', 'database', 'migrations'),
    path.join(process.cwd(), 'src', 'database', 'data-source.ts'),
    path.join(process.cwd(), 'src', 'database', 'typeorm-config.service.ts'),
    path.join(process.cwd(), 'src', 'database', 'seeds', 'relational'),
    path.join(
      process.cwd(),
      'src',
      'roles',
      'infrastructure',
      'persistence',
      'relational',
    ),
    path.join(
      process.cwd(),
      'src',
      'statuses',
      'infrastructure',
      'persistence',
      'relational',
    ),
    path.join(process.cwd(), 'env-example-relational'),
    path.join(process.cwd(), 'docker-compose.relational.ci.yaml'),
    path.join(process.cwd(), 'docker-compose.relational.test.yaml'),
    path.join(process.cwd(), 'docker-compose.yaml'),
    path.join(process.cwd(), 'startup.relational.ci.sh'),
    path.join(process.cwd(), 'startup.relational.test.sh'),
    path.join(process.cwd(), 'startup.relational.dev.sh'),
    path.join(process.cwd(), 'Dockerfile'),
    path.join(process.cwd(), 'relational.e2e.Dockerfile'),
    path.join(process.cwd(), 'relational.test.Dockerfile'),
    path.join(process.cwd(), '.hygen', 'seeds', 'create-relational'),
    path.join(process.cwd(), 'src', 'utils', 'relational-entity-helper.ts'),
  ];

  replace({
    path: path.join(process.cwd(), '.github', 'workflows', 'docker-e2e.yml'),
    actions: [
      {
        find: /\# <database-relational-block>.*\# <\/database-relational-block>/gs,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'app.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructureDatabaseModule = MongooseModule.forRootAsync({
  useClass: MongooseConfigService,
});`,
      },
      {
        find: /\s*import \{ TypeOrmModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ TypeOrmConfigService \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DataSource, DataSourceOptions \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'files', 'files.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      'local',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      's3',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(
      process.cwd(),
      'src',
      'files',
      'infrastructure',
      'uploader',
      's3-presigned',
      'files.module.ts',
    ),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentFilePersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalFilePersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'session', 'session.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentSessionPersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalSessionPersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'users', 'users.module.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const infrastructurePersistenceModule = DocumentUserPersistenceModule;`,
      },
      {
        find: /\s*import \{ RelationalUserPersistenceModule \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'users', 'domain', 'user.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = String;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'statuses', 'domain', 'status.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = String;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'src', 'roles', 'domain', 'role.ts'),
    actions: [
      {
        find: /\/\/ <database-block>.*\/\/ <\/database-block>/gs,
        replace: `const idType = String;`,
      },
      {
        find: /\s*import \{ DatabaseConfig \} from .*/g,
        replace: '',
      },
      {
        find: /\s*import databaseConfig from .*/g,
        replace: '',
      },
    ],
  });
  replace({
    path: path.join(process.cwd(), 'package.json'),
    actions: [
      {
        find: /\s*\"@nestjs\/typeorm\":.*/g,
        replace: '',
      },
      {
        find: /,\s*\"typeorm\":.*\"/g,
        replace: '',
      },
      {
        find: /\s*\"typeorm\":.*\,/g,
        replace: '',
      },
      {
        find: /\s*\"migration:generate\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"postmigration:generate\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"migration:create\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"migration:run\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"migration:revert\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"seed:create:relational\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"seed:run:relational\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"schema:drop\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"test:e2e:relational:docker\":.*/g,
        replace: '',
      },
      {
        find: /\s*\"pg\":.*/g,
        replace: '',
      },
    ],
  });

  filesToRemove.map((file) => {
    fs.rmSync(file, {
      recursive: true,
      force: true,
    });
  });
};

export default removePostgreSql;

================
File: backend/.install-scripts/index.ts
================
import prompts from 'prompts';
import removeFacebookAuth from './scripts/remove-auth-facebook';
import removeGoogleAuth from './scripts/remove-auth-google';
import removeAppleAuth from './scripts/remove-auth-apple';
import removeTwitterAuth from './scripts/remove-auth-twitter';
import removeInstallScripts from './scripts/remove-install-scripts';
import removePostgreSql from './scripts/remove-postgresql';
import removeMongoDb from './scripts/remove-mongodb';
import removeRelationalResourceGeneration from './scripts/resource-generation-scripts/remove-relational';
import removeDocumentResourceGeneration from './scripts/resource-generation-scripts/remove-document';
import removeAllDbResourceGeneration from './scripts/resource-generation-scripts/remove-all-db';
import removeAllDbPropertyGeneration from './scripts/property-generation-scripts/remove-all-db';
import removeDocumentPropertyGeneration from './scripts/property-generation-scripts/remove-document';
import removeRelationalPropertyGeneration from './scripts/property-generation-scripts/remove-relational';

(async () => {
  const response = await prompts(
    [
      {
        type: 'select',
        name: 'database',
        message: 'Which database do you want to use?',
        choices: [
          { title: 'PostgreSQL and MongoDB', value: 'pg-mongo' },
          { title: 'PostgreSQL', value: 'pg' },
          { title: 'MongoDB', value: 'mongo' },
        ],
      },
      {
        type: 'confirm',
        name: 'isAuthFacebook',
        message: 'Include Facebook auth?',
        initial: true,
      },
      {
        type: 'confirm',
        name: 'isAuthGoogle',
        message: 'Include Google auth?',
        initial: true,
      },
      {
        type: 'confirm',
        name: 'isAuthTwitter',
        message: 'Include Twitter auth?',
        initial: true,
      },
      {
        type: 'confirm',
        name: 'isAuthApple',
        message: 'Include Apple auth?',
        initial: true,
      },
    ],
    {
      onCancel() {
        process.exit(1);
      },
    },
  );

  if (response.database === 'pg-mongo') {
    removeRelationalResourceGeneration();
    removeDocumentResourceGeneration();
    removeDocumentPropertyGeneration();
    removeRelationalPropertyGeneration();
  }

  if (response.database === 'mongo') {
    removePostgreSql();
    removeRelationalResourceGeneration();
    removeRelationalPropertyGeneration();
    removeAllDbResourceGeneration();
    removeAllDbPropertyGeneration();
  }

  if (response.database === 'pg') {
    removeMongoDb();
    removeDocumentResourceGeneration();
    removeDocumentPropertyGeneration();
    removeAllDbResourceGeneration();
    removeAllDbPropertyGeneration();
  }

  if (!response.isAuthFacebook) {
    removeFacebookAuth();
  }

  if (!response.isAuthGoogle) {
    removeGoogleAuth();
  }

  if (!response.isAuthTwitter) {
    removeTwitterAuth();
  }

  if (!response.isAuthApple) {
    removeAppleAuth();
  }

  removeInstallScripts();
  process.exit(0);
})();

================
File: backend/.vscode/extensions.json
================
{
  "recommendations": [
    "yzhang.markdown-all-in-one",
    "DavidAnson.vscode-markdownlint"
  ]
}

================
File: backend/.vscode/settings.json
================
{
  "markdown.extension.toc.levels": "2..6",
  "markdown.extension.orderedList.autoRenumber": false,
  "typescript.preferences.importModuleSpecifier": "relative"
}

================
File: backend/docs/architecture.md
================
# Architecture

---

## Table of Contents <!-- omit in toc -->

- [Hexagonal Architecture](#hexagonal-architecture)
- [Motivation](#motivation)
- [Description of the module structure](#description-of-the-module-structure)
- [Recommendations](#recommendations)
  - [Repository](#repository)
- [FAQ](#faq)
  - [Is there a way to generate a new resource (controller, service, DTOs, etc) with Hexagonal Architecture?](#is-there-a-way-to-generate-a-new-resource-controller-service-dtos-etc-with-hexagonal-architecture)
- [Links](#links)

---

## Hexagonal Architecture

NestJS Boilerplate is based on [Hexagonal Architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)). This architecture is also known as Ports and Adapters.

![Hexagonal Architecture Diagram](https://github.com/brocoders/nestjs-boilerplate/assets/6001723/6a6a763e-d1c9-43cc-910a-617cda3a71db)

## Motivation

The main reason for using Hexagonal Architecture is to separate the business logic from the infrastructure. This separation allows us to easily change the database, the way of uploading files, or any other infrastructure without changing the business logic.

## Description of the module structure

```txt
.
├── domain
│   └── [DOMAIN_ENTITY].ts
├── dto
│   ├── create.dto.ts
│   ├── find-all.dto.ts
│   └── update.dto.ts
├── infrastructure
│   └── persistence
│       ├── document
│       │   ├── document-persistence.module.ts
│       │   ├── entities
│       │   │   └── [SCHEMA].ts
│       │   ├── mappers
│       │   │   └── [MAPPER].ts
│       │   └── repositories
│       │       └── [ADAPTER].repository.ts
│       ├── relational
│       │   ├── entities
│       │   │   └── [ENTITY].ts
│       │   ├── mappers
│       │   │   └── [MAPPER].ts
│       │   ├── relational-persistence.module.ts
│       │   └── repositories
│       │       └── [ADAPTER].repository.ts
│       └── [PORT].repository.ts
├── controller.ts
├── module.ts
└── service.ts
```

`[DOMAIN ENTITY].ts` represents an entity used in the business logic. Domain entity has no dependencies on the database or any other infrastructure.

`[SCHEMA].ts` represents the **database structure**. It is used in the document-oriented database (MongoDB).

`[ENTITY].ts` represents the **database structure**. It is used in the relational database (PostgreSQL).

`[MAPPER].ts` is a mapper that converts **database entity** to **domain entity** and vice versa.

`[PORT].repository.ts` is a repository **port** that defines the methods for interacting with the database.

`[ADAPTER].repository.ts` is a repository that implements the `[PORT].repository.ts`. It is used to interact with the database.

`infrastructure` folder - contains all the infrastructure-related components such as `persistence`, `uploader`, `senders`, etc.

Each component has `port` and `adapters`. `Port` is interface that define the methods for interacting with the infrastructure. `Adapters` are implementations of the `port`.

## Recommendations

### Repository

Don't try to create universal methods in the repository because they are difficult to extend during the project's life. Instead of this create methods with a single responsibility.

```typescript
// ❌
export class UsersRelationalRepository implements UserRepository {
  async find(condition: UniversalConditionInterface): Promise<User> {
    // ...
  }
}

// ✅
export class UsersRelationalRepository implements UserRepository {
  async findByEmail(email: string): Promise<User> {
    // ...
  }
  
  async findByRoles(roles: string[]): Promise<User> {
    // ...
  }
  
  async findByIds(ids: string[]): Promise<User> {
    // ...
  }
}
```

---

## FAQ

### Is there a way to generate a new resource (controller, service, DTOs, etc) with Hexagonal Architecture?

Yes, you can use the [CLI](cli.md) to generate a new resource with Hexagonal Architecture.

---

## Links

- [Dependency Inversion Principle](https://trilon.io/blog/dependency-inversion-principle) with NestJS.

---

Previous: [Installing and Running](installing-and-running.md)

Next: [Command Line Interface](cli.md)

================
File: backend/docs/auth.md
================
# Auth

## Table of Contents <!-- omit in toc -->

- [General info](#general-info)
  - [Auth via email flow](#auth-via-email-flow)
  - [Auth via external services or social networks flow](#auth-via-external-services-or-social-networks-flow)
- [Configure Auth](#configure-auth)
- [Auth via Apple](#auth-via-apple)
- [Auth via Facebook](#auth-via-facebook)
- [Auth via Google](#auth-via-google)
- [Auth via Twitter](#auth-via-twitter)
- [About JWT strategy](#about-jwt-strategy)
- [Refresh token flow](#refresh-token-flow)
  - [Video example](#video-example)
- [Logout](#logout)

---

## General info

### Auth via email flow

By default boilerplate used sign in and sign up via email and password.

```mermaid
sequenceDiagram
    participant A as Fronted App (Web, Mobile, Desktop)
    participant B as Backend App

    A->>B: 1. Sign up via email and password
    A->>B: 2. Sign in via email and password
    B->>A: 3. Get a JWT token
    A->>B: 4. Make any requests using a JWT token
```

<https://user-images.githubusercontent.com/6001723/224566194-1c1f4e98-5691-4703-b30e-92f99ec5d929.mp4>

### Auth via external services or social networks flow

Also you can sign up via another external services or social networks like Apple, Facebook, Google, and Twitter.

```mermaid
sequenceDiagram
    participant B as External Auth Services (Apple, Google, etc)
    participant A as Fronted App (Web, Mobile, Desktop)
    participant C as Backend App

    A->>B: 1. Sign in through an external service
    B->>A: 2. Get Access Token
    A->>C: 3. Send Access Token to auth endpoint
    C->>A: 4. Get a JWT token
    A->>C: 5. Make any requests using a JWT token
```

For auth with external services or social networks you need:

1. Sign in through an external service and get access token(s).
1. Call one of endpoints with access token received in frontend app on 1-st step and get JWT token from the backend app.

   ```text
   POST /api/v1/auth/facebook/login

   POST /api/v1/auth/google/login

   POST /api/v1/auth/twitter/login

   POST /api/v1/auth/apple/login
   ```

1. Make any requests using a JWT token

---

## Configure Auth

1. Generate secret keys for `access token` and `refresh token`:

   ```bash
   node -e "console.log('\nAUTH_JWT_SECRET=' + require('crypto').randomBytes(256).toString('base64') + '\n\nAUTH_REFRESH_SECRET=' + require('crypto').randomBytes(256).toString('base64') + '\n\nAUTH_FORGOT_SECRET=' + require('crypto').randomBytes(256).toString('base64') + '\n\nAUTH_CONFIRM_EMAIL_SECRET=' + require('crypto').randomBytes(256).toString('base64'));"
   ```

1. Go to `/.env` and replace `AUTH_JWT_SECRET` and `AUTH_REFRESH_SECRET` with output from step 1.

   ```text
   AUTH_JWT_SECRET=HERE_SECRET_KEY_FROM_STEP_1
   AUTH_REFRESH_SECRET=HERE_SECRET_KEY_FROM_STEP_1
   ```

## Auth via Apple

1. [Set up your service on Apple](https://www.npmjs.com/package/apple-signin-auth)
1. Change `APPLE_APP_AUDIENCE` in `.env`

   ```text
   APPLE_APP_AUDIENCE=["com.company", "com.company.web"]
   ```

## Auth via Facebook

1. Go to https://developers.facebook.com/apps/creation/ and create a new app
   <img alt="image" src="https://github.com/brocoders/nestjs-boilerplate/assets/6001723/05721db2-9d26-466a-ad7a-072680d0d49b">

   <img alt="image" src="https://github.com/brocoders/nestjs-boilerplate/assets/6001723/9f4aae18-61da-4abc-9304-821a0995a306">
2. Go to `Settings` -> `Basic` and get `App ID` and `App Secret` from your app
   <img alt="image" src="https://github.com/brocoders/nestjs-boilerplate/assets/6001723/b0fc7d50-4bc6-45d0-8b20-fda0b6c01ac2">
3. Change `FACEBOOK_APP_ID` and `FACEBOOK_APP_SECRET` in `.env`

   ```text
   FACEBOOK_APP_ID=123
   FACEBOOK_APP_SECRET=abc
   ```

## Auth via Google

1. You need a `CLIENT_ID`, `CLIENT_SECRET`. You can find these pieces of information by going to the [Developer Console](https://console.cloud.google.com/), clicking your project (if doesn't have create it here https://console.cloud.google.com/projectcreate) -> `APIs & services` -> `credentials`.
1. Change `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` in `.env`

   ```text
   GOOGLE_CLIENT_ID=abc
   GOOGLE_CLIENT_SECRET=abc
   ```

## Auth via Twitter

1. Set up your service on Twitter
1. Change `TWITTER_CONSUMER_KEY` and `TWITTER_CONSUMER_SECRET` in `.env`

   ```text
   TWITTER_CONSUMER_KEY=abc
   TWITTER_CONSUMER_SECRET=abc
   ```

## About JWT strategy

In the `validate` method of the `src/auth/strategies/jwt.strategy.ts` file, you can see that we do not check if the user exists in the database because it is redundant, it may lose the benefits of the JWT approach and can affect the application performance.

To better understand how JWT works, watch the video explanation https://www.youtube.com/watch?v=Y2H3DXDeS3Q and read this article https://jwt.io/introduction/

```typescript
// src/auth/strategies/jwt.strategy.ts

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {
  // ...

  public validate(payload) {
    if (!payload.id) {
      throw new UnauthorizedException();
    }

    return payload;
  }
}
```

> If you need to get full user information, get it in services.

## Refresh token flow

1. On sign in (`POST /api/v1/auth/email/login`) you will receive `token`, `tokenExpires` and `refreshToken` in response.
1. On each regular request you need to send `token` in `Authorization` header.
1. If `token` is expired (check with `tokenExpires` property on client app) you need to send `refreshToken` to `POST /api/v1/auth/refresh` in `Authorization` header to refresh `token`. You will receive new `token`, `tokenExpires` and `refreshToken` in response.

### Video example

https://github.com/brocoders/nestjs-boilerplate/assets/6001723/f6fdcc89-5ec6-472b-a6fc-d24178ad1bbb

## Logout

1. Call following endpoint:

   ```text
   POST /api/v1/auth/logout
   ```

2. Remove `access token` and `refresh token` from your client app (cookies, localStorage, etc).

---

Previous: [Working with database](database.md)

Next: [Serialization](serialization.md)

================
File: backend/docs/automatic-update-dependencies.md
================
# Automatic update of dependencies

If you want to automatically update dependencies, you can connect [Renovate](https://github.com/marketplace/renovate) for your project.

---

Previous: [Benchmarking](benchmarking.md)

================
File: backend/docs/benchmarking.md
================
# Test benchmarking

## Table of Contents <!-- omit in toc -->

- [Apache Benchmark](#apache-benchmark)

## Apache Benchmark

```bash
docker run --rm jordi/ab -n 100 -c 100 -T application/json -H "Authorization: Bearer USER_TOKEN" -v 2 http://<server_ip>:3000/api/v1/users
```

---

Previous: [Tests](tests.md)

Next: [Automatic update of dependencies](automatic-update-dependencies.md)

================
File: backend/docs/cli.md
================
# Command Line Interface (CLI)

---

## Table of Contents <!-- omit in toc -->

- [Generate resource](#generate-resource)
  - [For document oriented database (MongoDB + Mongoose)](#for-document-oriented-database-mongodb--mongoose)
  - [For relational database (PostgreSQL + TypeORM)](#for-relational-database-postgresql--typeorm)
    - [Video guideline for relational database (PostgreSQL + TypeORM)](#video-guideline-for-relational-database-postgresql--typeorm)
  - [For both databases](#for-both-databases)
- [Add property to resource](#add-property-to-resource)
  - [Property for document oriented database (MongoDB + Mongoose)](#property-for-document-oriented-database-mongodb--mongoose)
  - [Property for relational database (PostgreSQL + TypeORM)](#property-for-relational-database-postgresql--typeorm)
    - [Video guideline how to add property for relational database (PostgreSQL + TypeORM)](#video-guideline-how-to-add-property-for-relational-database-postgresql--typeorm)
  - [Property for both databases](#property-for-both-databases)

---

## Generate resource

Generate resource with the following commands:

### For document oriented database (MongoDB + Mongoose)
  
```bash
npm run generate:resource:document -- --name=ResourceName
```

Example:

```bash
npm run generate:resource:document -- --name=Category
```

### For relational database (PostgreSQL + TypeORM)

```bash
npm run generate:resource:relational -- --name=ResourceName
```

Example:

```bash
npm run generate:resource:relational -- --name=Category
```

#### Video guideline for relational database (PostgreSQL + TypeORM)

<https://github.com/user-attachments/assets/f7f91a7d-f9ff-4653-a78a-152ac5e7a95d>

### For both databases

```bash
npm run generate:resource:all-db -- --name=ResourceName
```

Example:

```bash
npm run generate:resource:all-db -- --name=Category
```

## Add property to resource

### Property for document oriented database (MongoDB + Mongoose)

```bash
npm run add:property:to-document
```

### Property for relational database (PostgreSQL + TypeORM)

```bash
npm run add:property:to-relational
```

#### Video guideline how to add property for relational database (PostgreSQL + TypeORM)

<https://github.com/user-attachments/assets/95b9d70a-70cf-442a-b8bf-a73d32810e0c>

### Property for both databases

```bash
npm run add:property:to-all-db
```

---

Previous: [Architecture](architecture.md)

Next: [Working with database](database.md)

================
File: backend/docs/database.md
================
# Work with database

---

## Table of Contents <!-- omit in toc -->

- [About databases](#about-databases)
- [Working with database schema (TypeORM)](#working-with-database-schema-typeorm)
  - [Generate migration](#generate-migration)
  - [Run migration](#run-migration)
  - [Revert migration](#revert-migration)
  - [Drop all tables in database](#drop-all-tables-in-database)
- [Working with database schema (Mongoose)](#working-with-database-schema-mongoose)
  - [Create schema](#create-schema)
- [Seeding (TypeORM)](#seeding-typeorm)
  - [Creating seeds (TypeORM)](#creating-seeds-typeorm)
  - [Run seed (TypeORM)](#run-seed-typeorm)
  - [Factory and Faker (TypeORM)](#factory-and-faker-typeorm)
- [Seeding (Mongoose)](#seeding-mongoose)
  - [Creating seeds (Mongoose)](#creating-seeds-mongoose)
  - [Run seed (Mongoose)](#run-seed-mongoose)
- [Performance optimization (PostgreSQL + TypeORM)](#performance-optimization-postgresql--typeorm)
  - [Indexes and Foreign Keys](#indexes-and-foreign-keys)
  - [Max connections](#max-connections)
- [Performance optimization (MongoDB + Mongoose)](#performance-optimization-mongodb--mongoose)
  - [Design schema](#design-schema)

---

## About databases

Boilerplate supports two types of databases: PostgreSQL with TypeORM and MongoDB with Mongoose. You can choose one of them or use both in your project. The choice of database depends on the requirements of your project.

For support of both databases used [Hexagonal Architecture](architecture.md#hexagonal-architecture).

## Working with database schema (TypeORM)

### Generate migration

1. Create entity file with extension `.entity.ts`. For example `post.entity.ts`:

   ```ts
   // /src/posts/infrastructure/persistence/relational/entities/post.entity.ts

   import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';
   import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

   @Entity()
   export class Post extends EntityRelationalHelper {
     @PrimaryGeneratedColumn()
     id: number;

     @Column()
     title: string;

     @Column()
     body: string;

     // Here any fields that you need
   }
   ```

1. Next, generate migration file:

   ```bash
   npm run migration:generate -- src/database/migrations/CreatePostTable
   ```

1. Apply this migration to database via [npm run migration:run](#run-migration).

### Run migration

```bash
npm run migration:run
```

### Revert migration

```bash
npm run migration:revert
```

### Drop all tables in database

```bash
npm run schema:drop
```

---

## Working with database schema (Mongoose)

### Create schema

1. Create entity file with extension `.schema.ts`. For example `post.schema.ts`:

   ```ts
   // /src/posts/infrastructure/persistence/document/entities/post.schema.ts

   import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
   import { HydratedDocument } from 'mongoose';

   export type PostSchemaDocument = HydratedDocument<PostSchemaClass>;

   @Schema({
     timestamps: true,
     toJSON: {
       virtuals: true,
       getters: true,
     },
   })
   export class PostSchemaClass extends EntityDocumentHelper {
     @Prop()
     title: string;

     @Prop()
     body: string;

     // Here any fields that you need
   }

   export const PostSchema = SchemaFactory.createForClass(PostSchemaClass);
   ```

---

## Seeding (TypeORM)

### Creating seeds (TypeORM)

1. Create seed file with `npm run seed:create:relational -- --name=Post`. Where `Post` is name of entity.
1. Go to `src/database/seeds/relational/post/post-seed.service.ts`.
1. In `run` method extend your logic.
1. Run [npm run seed:run:relational](#run-seed-typeorm)

### Run seed (TypeORM)

```bash
npm run seed:run:relational
```

### Factory and Faker (TypeORM)

1. Install faker:

    ```bash
    npm i --save-dev @faker-js/faker
    ```

1. Create `src/database/seeds/relational/user/user.factory.ts`:

    ```ts
    import { faker } from '@faker-js/faker';
    import { RoleEnum } from '../../../../roles/roles.enum';
    import { StatusEnum } from '../../../../statuses/statuses.enum';
    import { Injectable } from '@nestjs/common';
    import { InjectRepository } from '@nestjs/typeorm';
    import { Repository } from 'typeorm';
    import { RoleEntity } from '../../../../roles/infrastructure/persistence/relational/entities/role.entity';
    import { UserEntity } from '../../../../users/infrastructure/persistence/relational/entities/user.entity';
    import { StatusEntity } from '../../../../statuses/infrastructure/persistence/relational/entities/status.entity';

    @Injectable()
    export class UserFactory {
      constructor(
        @InjectRepository(UserEntity)
        private repositoryUser: Repository<UserEntity>,
        @InjectRepository(RoleEntity)
        private repositoryRole: Repository<RoleEntity>,
        @InjectRepository(StatusEntity)
        private repositoryStatus: Repository<StatusEntity>,
      ) {}

      createRandomUser() {
        // Need for saving "this" context
        return () => {
          return this.repositoryUser.create({
            firstName: faker.person.firstName(),
            lastName: faker.person.lastName(),
            email: faker.internet.email(),
            password: faker.internet.password(),
            role: this.repositoryRole.create({
              id: RoleEnum.user,
              name: 'User',
            }),
            status: this.repositoryStatus.create({
              id: StatusEnum.active,
              name: 'Active',
            }),
          });
        };
      }
    }
    ```

1. Make changes in `src/database/seeds/relational/user/user-seed.service.ts`:

    ```ts
    // Some code here...
    import { UserFactory } from './user.factory';
    import { faker } from '@faker-js/faker';

    @Injectable()
    export class UserSeedService {
      constructor(
        // Some code here...
        private userFactory: UserFactory,
      ) {}

      async run() {
        // Some code here...

        await this.repository.save(
          faker.helpers.multiple(this.userFactory.createRandomUser(), {
            count: 5,
          }),
        );
      }
    }
    ```

1. Make changes in `src/database/seeds/relational/user/user-seed.module.ts`:

    ```ts
    import { Module } from '@nestjs/common';
    import { TypeOrmModule } from '@nestjs/typeorm';
    
    import { UserSeedService } from './user-seed.service';
    import { UserFactory } from './user.factory';

    import { UserEntity } from '../../../../users/infrastructure/persistence/relational/entities/user.entity';
    import { RoleEntity } from '../../../../roles/infrastructure/persistence/relational/entities/role.entity';
    import { StatusEntity } from '../../../../statuses/infrastructure/persistence/relational/entities/status.entity';

    @Module({
      imports: [TypeOrmModule.forFeature([UserEntity, Role, Status])],
      providers: [UserSeedService, UserFactory],
      exports: [UserSeedService, UserFactory],
    })
    export class UserSeedModule {}

    ```

1. Run seed:

    ```bash
    npm run seed:run
    ```

---

## Seeding (Mongoose)

### Creating seeds (Mongoose)

1. Create seed file with `npm run seed:create:document -- --name=Post`. Where `Post` is name of entity.
1. Go to `src/database/seeds/document/post/post-seed.service.ts`.
1. In `run` method extend your logic.
1. Run [npm run seed:run:document](#run-seed-mongoose)

### Run seed (Mongoose)

```bash
npm run seed:run:document
```

---

## Performance optimization (PostgreSQL + TypeORM)

### Indexes and Foreign Keys

Don't forget to create `indexes` on the Foreign Keys (FK) columns (if needed), because by default PostgreSQL [does not automatically add indexes to FK](https://stackoverflow.com/a/970605/18140714).

### Max connections

Set the optimal number of [max connections](https://node-postgres.com/apis/pool) to database for your application in `/.env`:

```txt
DATABASE_MAX_CONNECTIONS=100
```

You can think of this parameter as how many concurrent database connections your application can handle.

## Performance optimization (MongoDB + Mongoose)

### Design schema

Designing schema for MongoDB is completely different from designing schema for relational databases. For best performance, you should design your schema according to:

1. [MongoDB Schema Design Anti-Patterns](https://www.mongodb.com/developer/products/mongodb/schema-design-anti-pattern-massive-arrays)
1. [MongoDB Schema Design Best Practices](https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/)

---

Previous: [Command Line Interface](cli.md)

Next: [Auth](auth.md)

================
File: backend/docs/file-uploading.md
================
# File uploading

---

## Table of Contents <!-- omit in toc -->

- [Drivers support](#drivers-support)
- [Uploading and attach file flow for `local` driver](#uploading-and-attach-file-flow-for-local-driver)
  - [An example of uploading an avatar to a user profile (local)](#an-example-of-uploading-an-avatar-to-a-user-profile-local)
  - [Video example](#video-example)
- [Uploading and attach file flow for `s3` driver](#uploading-and-attach-file-flow-for-s3-driver)
  - [Configuration for `s3` driver](#configuration-for-s3-driver)
  - [An example of uploading an avatar to a user profile (S3)](#an-example-of-uploading-an-avatar-to-a-user-profile-s3)
- [Uploading and attach file flow for `s3-presigned` driver](#uploading-and-attach-file-flow-for-s3-presigned-driver)
  - [Configuration for `s3-presigned` driver](#configuration-for-s3-presigned-driver)
  - [An example of uploading an avatar to a user profile (S3 Presigned URL)](#an-example-of-uploading-an-avatar-to-a-user-profile-s3-presigned-url)
- [How to delete files?](#how-to-delete-files)

---

## Drivers support

Out-of-box boilerplate supports the following drivers: `local`, `s3`, and `s3-presigned`. You can set it in the `.env` file, variable `FILE_DRIVER`. If you want to use another service for storing files, you can extend it.

> For production we recommend using the "s3-presigned" driver to offload your server.

---

## Uploading and attach file flow for `local` driver

Endpoint `/api/v1/files/upload` is used for uploading files, which returns `File` entity with `id` and `path`. After receiving `File` entity you can attach this to another entity.

### An example of uploading an avatar to a user profile (local)

```mermaid
sequenceDiagram
    participant A as Fronted App
    participant B as Backend App

    A->>B: Upload file via POST /api/v1/files/upload
    B->>A: Receive File entity with "id" and "path" properties
    note left of A: Attach File entity to User entity
    A->>B: Update user via PATCH /api/v1/auth/me
```

### Video example

<https://user-images.githubusercontent.com/6001723/224558636-d22480e4-f70a-4789-b6fc-6ea343685dc7.mp4>

## Uploading and attach file flow for `s3` driver

Endpoint `/api/v1/files/upload` is used for uploading files, which returns `File` entity with `id` and `path`. After receiving `File` entity you can attach this to another entity.

### Configuration for `s3` driver

1. Open https://s3.console.aws.amazon.com/s3/buckets
1. Click "Create bucket"
1. Create bucket (for example, `your-unique-bucket-name`)
1. Open your bucket
1. Click "Permissions" tab
1. Find "Cross-origin resource sharing (CORS)" section
1. Click "Edit"
1. Paste the following configuration

    ```json
    [
      {
        "AllowedHeaders": ["*"],
        "AllowedMethods": ["GET"],
        "AllowedOrigins": ["*"],
        "ExposeHeaders": []
      }
    ]
    ```

1. Click "Save changes"
1. Update `.env` file with the following variables:

    ```dotenv
    FILE_DRIVER=s3
    ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID
    SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY
    AWS_S3_REGION=YOUR_AWS_S3_REGION
    AWS_DEFAULT_S3_BUCKET=YOUR_AWS_DEFAULT_S3_BUCKET
    ```

### An example of uploading an avatar to a user profile (S3)

```mermaid
sequenceDiagram
    participant A as Fronted App
    participant B as Backend App
    participant C as AWS S3

    A->>B: Upload file via POST /api/v1/files/upload
    B->>C: Upload file to S3
    B->>A: Receive File entity with "id" and "path" properties
    note left of A: Attach File entity to User entity
    A->>B: Update user via PATCH /api/v1/auth/me
```

## Uploading and attach file flow for `s3-presigned` driver

Endpoint `/api/v1/files/upload` is used for uploading files. In this case `/api/v1/files/upload` receives only `fileName` property (without binary file), and returns the `presigned URL` and `File` entity with `id` and `path`. After receiving the `presigned URL` and `File` entity you need to upload your file to the `presigned URL` and after that attach `File` to another entity.

### Configuration for `s3-presigned` driver

1. Open https://s3.console.aws.amazon.com/s3/buckets
1. Click "Create bucket"
1. Create bucket (for example, `your-unique-bucket-name`)
1. Open your bucket
1. Click "Permissions" tab
1. Find "Cross-origin resource sharing (CORS)" section
1. Click "Edit"
1. Paste the following configuration

    ```json
    [
      {
        "AllowedHeaders": ["*"],
        "AllowedMethods": ["GET", "PUT"],
        "AllowedOrigins": ["*"],
        "ExposeHeaders": []
      }
    ]
    ```

   For production we recommend to use more strict configuration:

   ```json
   [
     {
       "AllowedHeaders": ["*"],
       "AllowedMethods": ["PUT"],
       "AllowedOrigins": ["https://your-domain.com"],
       "ExposeHeaders": []
     },
      {
        "AllowedHeaders": ["*"],
        "AllowedMethods": ["GET"],
        "AllowedOrigins": ["*"],
        "ExposeHeaders": []
      }
   ]
   ```

1. Click "Save changes"
1. Update `.env` file with the following variables:

    ```dotenv
    FILE_DRIVER=s3-presigned
    ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID
    SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY
    AWS_S3_REGION=YOUR_AWS_S3_REGION
    AWS_DEFAULT_S3_BUCKET=YOUR_AWS_DEFAULT_S3_BUCKET
    ```

### An example of uploading an avatar to a user profile (S3 Presigned URL)

```mermaid
sequenceDiagram
    participant C as AWS S3
    participant A as Fronted App
    
    participant B as Backend App

    A->>B: Send file name (not binary file) via POST /api/v1/files/upload
    note right of B: Generate presigned URL
    B->>A: Receive presigned URL and File entity with "id" and "path" properties
    A->>C: Upload file to S3 via presigned URL
    note right of A: Attach File entity to User entity
    A->>B: Update user via PATCH /api/v1/auth/me
```

## How to delete files?

We prefer not to delete files, as this may have negative experience during restoring data. Also for this reason we also use [Soft-Delete](https://orkhan.gitbook.io/typeorm/docs/delete-query-builder#soft-delete) approach in database. However, if you need to delete files you can create your own handler, cronjob, etc.

---

Previous: [Serialization](serialization.md)

Next: [Tests](tests.md)

================
File: backend/docs/installing-and-running.md
================
# Installation

NestJS Boilerplate supports [TypeORM](https://www.npmjs.com/package/typeorm) and [Mongoose](https://www.npmjs.com/package/mongoose) for working with databases. By default, TypeORM uses [PostgreSQL](https://www.postgresql.org/) as the main database, but you can use any relational database.

Switching between TypeORM and Mongoose is implemented based on the [Hexagonal Architecture](architecture.md#hexagonal-architecture). This makes it easy to choose the right database for your application.

---

## Table of Contents <!-- omit in toc -->

- [Comfortable development (PostgreSQL + TypeORM)](#comfortable-development-postgresql--typeorm)
  - [Video guideline (PostgreSQL + TypeORM)](#video-guideline-postgresql--typeorm)
- [Comfortable development (MongoDB + Mongoose)](#comfortable-development-mongodb--mongoose)
- [Quick run (PostgreSQL + TypeORM)](#quick-run-postgresql--typeorm)
- [Quick run (MongoDB + Mongoose)](#quick-run-mongodb--mongoose)
- [Links](#links)

---

## Comfortable development (PostgreSQL + TypeORM)

1. Clone repository

   ```bash
   git clone --depth 1 https://github.com/brocoders/nestjs-boilerplate.git my-app
   ```

1. Go to folder, and copy `env-example-relational` as `.env`.

   ```bash
   cd my-app/
   cp env-example-relational .env
   ```

1. Change `DATABASE_HOST=postgres` to `DATABASE_HOST=localhost`

   Change `MAIL_HOST=maildev` to `MAIL_HOST=localhost`

1. Run additional container:

   ```bash
   docker compose up -d postgres adminer maildev
   ```

1. Install dependency

   ```bash
   npm install
   ```

1. Run app configuration

   > You should run this command only the first time on initialization of your project, all next time skip it.

   > If you want to contribute to the boilerplate, you should NOT run this command.

   ```bash
   npm run app:config
   ```

1. Run migrations

   ```bash
   npm run migration:run
   ```

1. Run seeds

   ```bash
   npm run seed:run:relational
   ```

1. Run app in dev mode

   ```bash
   npm run start:dev
   ```

1. Open <http://localhost:3000>

### Video guideline (PostgreSQL + TypeORM)

<https://github.com/user-attachments/assets/136a16aa-f94a-4b20-8eaf-6b4262964315>

---

## Comfortable development (MongoDB + Mongoose)

1. Clone repository

   ```bash
   git clone --depth 1 https://github.com/brocoders/nestjs-boilerplate.git my-app
   ```

1. Go to folder, and copy `env-example-document` as `.env`.

   ```bash
   cd my-app/
   cp env-example-document .env
   ```

1. Change `DATABASE_URL=mongodb://mongo:27017` to `DATABASE_URL=mongodb://localhost:27017`

1. Run additional container:

   ```bash
   docker compose -f docker-compose.document.yaml up -d mongo mongo-express maildev
   ```

1. Install dependency

   ```bash
   npm install
   ```

1. Run app configuration

   > You should run this command only the first time on initialization of your project, all next time skip it.

   > If you want to contribute to the boilerplate, you should NOT run this command.

   ```bash
   npm run app:config
   ```

1. Run seeds

   ```bash
   npm run seed:run:document
   ```

1. Run app in dev mode

   ```bash
   npm run start:dev
   ```

1. Open <http://localhost:3000>

---

## Quick run (PostgreSQL + TypeORM)

If you want quick run your app, you can use following commands:

1. Clone repository

   ```bash
   git clone --depth 1 https://github.com/brocoders/nestjs-boilerplate.git my-app
   ```

1. Go to folder, and copy `env-example-relational` as `.env`.

   ```bash
   cd my-app/
   cp env-example-relational .env
   ```

1. Run containers

   ```bash
   docker compose up -d
   ```

1. For check status run

   ```bash
   docker compose logs
   ```

1. Open <http://localhost:3000>

---

## Quick run (MongoDB + Mongoose)

If you want quick run your app, you can use following commands:

1. Clone repository

   ```bash
   git clone --depth 1 https://github.com/brocoders/nestjs-boilerplate.git my-app
   ```

1. Go to folder, and copy `env-example-document` as `.env`.

   ```bash
   cd my-app/
   cp env-example-document .env
   ```

1. Run containers

   ```bash
   docker compose -f docker-compose.document.yaml up -d
   ```

1. For check status run

   ```bash
   docker compose -f docker-compose.document.yaml logs
   ```

1. Open <http://localhost:3000>

---

## Links

- Swagger (API docs): <http://localhost:3000/docs>
- Adminer (client for DB): <http://localhost:8080>
- MongoDB Express (client for DB): <http://localhost:8081/>
- Maildev: <http://localhost:1080>

---

Previous: [Introduction](introduction.md)

Next: [Architecture](architecture.md)

================
File: backend/docs/introduction.md
================
# Introduction

## Online demo

Demo: <https://nestjs-boilerplate-test.herokuapp.com/docs>

Frontend (React, Next.js): <https://github.com/brocoders/extensive-react-boilerplate>

<https://github.com/user-attachments/assets/a66f114a-c714-4036-8eeb-20cbf04ae985>

## Features

- [x] Database. Support [TypeORM](https://www.npmjs.com/package/typeorm) and [Mongoose](https://www.npmjs.com/package/mongoose).
- [x] Seeding.
- [x] Config Service ([@nestjs/config](https://www.npmjs.com/package/@nestjs/config)).
- [x] Mailing ([nodemailer](https://www.npmjs.com/package/nodemailer)).
- [x] Sign in and sign up via email.
- [x] Social sign in (Apple, Facebook, Google, Twitter).
- [x] Admin and User roles.
- [x] Internationalization/Translations (I18N) ([nestjs-i18n](https://www.npmjs.com/package/nestjs-i18n)).
- [x] File uploads. Support local and Amazon S3 drivers.
- [x] Swagger.
- [x] Support E2E and units tests.
- [x] Docker.
- [x] CI (Github Actions).

---

Previous: [Main](readme.md)

Next: [Installing and Running](installing-and-running.md)

================
File: backend/docs/readme.md
================
# NestJS Boilerplate Documentation

---

## Table of Contents

- [Introduction](introduction.md)
- [Installing and Running](installing-and-running.md)
- [Architecture](architecture.md)
- [Command Line Interface](cli.md)
- [Working with database](database.md)
- [Auth](auth.md)
- [Serialization](serialization.md)
- [File uploading](file-uploading.md)
- [Tests](tests.md)
- [Benchmarking](benchmarking.md)
- [Automatic update of dependencies](automatic-update-dependencies.md)

================
File: backend/docs/serialization.md
================
# Serialization

For serialization boilerplate use [class-transformer](https://www.npmjs.com/package/class-transformer) and global interceptor `ClassSerializerInterceptor`.

---

## Table of Contents <!-- omit in toc -->

- [Hide private property](#hide-private-property)
- [Show private property for admins](#show-private-property-for-admins)

---

## Hide private property

If you need to hide some property in the entity you can use `@Exclude({ toPlainOnly: true })` on the column.

```ts
// /src/users/entities/user.entity.ts

import { Exclude } from 'class-transformer';

@Entity()
export class User extends EntityRelationalHelper {
  // Some code here...

  @Column({ nullable: true })
  @Exclude({ toPlainOnly: true })
  password: string;

  // Some code here...
}
```

## Show private property for admins

1. Create a controller that returns data only for admin and add `@SerializeOptions({ groups: ['admin'] })` to method:

   ```ts
   // /src/users/users.controller.ts

   // Some code here...

   @ApiBearerAuth()
   @Roles(RoleEnum.admin)
   @UseGuards(AuthGuard('jwt'), RolesGuard)
   @Controller({
     path: 'users',
     version: '1',
   })
   export class UsersController {
     constructor(private readonly usersService: UsersService) {}

     // Some code here...

     @SerializeOptions({
       groups: ['admin'],
     })
     @Get(':id')
     @HttpCode(HttpStatus.OK)
     findOne(@Param('id') id: string) {
       return this.usersService.findOne({ id: +id });
     }

     // Some code here...
   }
   ```

1. In the entity add `@Expose({ groups: ['admin'] })` to the column that should be exposed for admin:

   ```ts
   // /src/users/entities/user.entity.ts

   // Some code here...

   import { Expose } from 'class-transformer';

   @Entity()
   export class User extends EntityRelationalHelper {
     // Some code here...

     @Column({ unique: true, nullable: true })
     @Expose({ groups: ['admin'] })
     email: string | null;

     // Some code here...
   }
   ```

---

Previous: [Auth](auth.md)

Next: [File uploading](file-uploading.md)

================
File: backend/docs/tests.md
================
# Tests

## Table of Contents <!-- omit in toc -->

- [Unit Tests](#unit-tests)
- [E2E Tests](#e2e-tests)
- [Tests in Docker](#tests-in-docker)
  - [For relational database](#for-relational-database)
  - [For document database](#for-document-database)

## Unit Tests

```bash
npm run test
```

## E2E Tests

```bash
npm run test:e2e
```

## Tests in Docker

### For relational database

```bash
npm run test:e2e:relational:docker
```

### For document database

```bash
npm run test:e2e:document:docker
```

---

Previous: [File uploading](file-uploading.md)

Next: [Benchmarking](benchmarking.md)

================
File: backend/src/auth/config/auth-config.type.ts
================
export type AuthConfig = {
  secret?: string;
  expires?: string;
  refreshSecret?: string;
  refreshExpires?: string;
  forgotSecret?: string;
  forgotExpires?: string;
  confirmEmailSecret?: string;
  confirmEmailExpires?: string;
};

================
File: backend/src/auth/config/auth.config.ts
================
import { registerAs } from '@nestjs/config';

import { IsString } from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { AuthConfig } from './auth-config.type';

class EnvironmentVariablesValidator {
  @IsString()
  AUTH_JWT_SECRET: string;

  @IsString()
  AUTH_JWT_TOKEN_EXPIRES_IN: string;

  @IsString()
  AUTH_REFRESH_SECRET: string;

  @IsString()
  AUTH_REFRESH_TOKEN_EXPIRES_IN: string;

  @IsString()
  AUTH_FORGOT_SECRET: string;

  @IsString()
  AUTH_FORGOT_TOKEN_EXPIRES_IN: string;

  @IsString()
  AUTH_CONFIRM_EMAIL_SECRET: string;

  @IsString()
  AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN: string;
}

export default registerAs<AuthConfig>('auth', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    secret: process.env.AUTH_JWT_SECRET,
    expires: process.env.AUTH_JWT_TOKEN_EXPIRES_IN,
    refreshSecret: process.env.AUTH_REFRESH_SECRET,
    refreshExpires: process.env.AUTH_REFRESH_TOKEN_EXPIRES_IN,
    forgotSecret: process.env.AUTH_FORGOT_SECRET,
    forgotExpires: process.env.AUTH_FORGOT_TOKEN_EXPIRES_IN,
    confirmEmailSecret: process.env.AUTH_CONFIRM_EMAIL_SECRET,
    confirmEmailExpires: process.env.AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN,
  };
});

================
File: backend/src/auth/dto/auth-confirm-email.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class AuthConfirmEmailDto {
  @ApiProperty()
  @IsNotEmpty()
  hash: string;
}

================
File: backend/src/auth/dto/auth-email-login.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsEmail, IsNotEmpty } from 'class-validator';
import { Transform } from 'class-transformer';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class AuthEmailLoginDto {
  @ApiProperty({ example: 'test1@example.com', type: String })
  @Transform(lowerCaseTransformer)
  @IsEmail()
  @IsNotEmpty()
  email: string;

  @ApiProperty()
  @IsNotEmpty()
  password: string;
}

================
File: backend/src/auth/dto/auth-forgot-password.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsEmail } from 'class-validator';
import { Transform } from 'class-transformer';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class AuthForgotPasswordDto {
  @ApiProperty({ example: 'test1@example.com', type: String })
  @Transform(lowerCaseTransformer)
  @IsEmail()
  email: string;
}

================
File: backend/src/auth/dto/auth-register-login.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';
import { Transform } from 'class-transformer';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class AuthRegisterLoginDto {
  @ApiProperty({ example: 'test1@example.com', type: String })
  @Transform(lowerCaseTransformer)
  @IsEmail()
  email: string;

  @ApiProperty()
  @MinLength(6)
  password: string;

  @ApiProperty({ example: 'John' })
  @IsNotEmpty()
  firstName: string;

  @ApiProperty({ example: 'Doe' })
  @IsNotEmpty()
  lastName: string;
}

================
File: backend/src/auth/dto/auth-reset-password.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class AuthResetPasswordDto {
  @ApiProperty()
  @IsNotEmpty()
  password: string;

  @ApiProperty()
  @IsNotEmpty()
  hash: string;
}

================
File: backend/src/auth/dto/auth-update.dto.ts
================
import { ApiPropertyOptional } from '@nestjs/swagger';
import { IsEmail, IsNotEmpty, IsOptional, MinLength } from 'class-validator';
import { FileDto } from '../../files/dto/file.dto';
import { Transform } from 'class-transformer';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class AuthUpdateDto {
  @ApiPropertyOptional({ type: () => FileDto })
  @IsOptional()
  photo?: FileDto | null;

  @ApiPropertyOptional({ example: 'John' })
  @IsOptional()
  @IsNotEmpty({ message: 'mustBeNotEmpty' })
  firstName?: string;

  @ApiPropertyOptional({ example: 'Doe' })
  @IsOptional()
  @IsNotEmpty({ message: 'mustBeNotEmpty' })
  lastName?: string;

  @ApiPropertyOptional({ example: 'new.email@example.com' })
  @IsOptional()
  @IsNotEmpty()
  @IsEmail()
  @Transform(lowerCaseTransformer)
  email?: string;

  @ApiPropertyOptional()
  @IsOptional()
  @IsNotEmpty()
  @MinLength(6)
  password?: string;

  @ApiPropertyOptional()
  @IsOptional()
  @IsNotEmpty({ message: 'mustBeNotEmpty' })
  oldPassword?: string;
}

================
File: backend/src/auth/dto/login-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { User } from '../../users/domain/user';

export class LoginResponseDto {
  @ApiProperty()
  token: string;

  @ApiProperty()
  refreshToken: string;

  @ApiProperty()
  tokenExpires: number;

  @ApiProperty({
    type: () => User,
  })
  user: User;
}

================
File: backend/src/auth/dto/refresh-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';

export class RefreshResponseDto {
  @ApiProperty()
  token: string;

  @ApiProperty()
  refreshToken: string;

  @ApiProperty()
  tokenExpires: number;
}

================
File: backend/src/auth/strategies/types/jwt-payload.type.ts
================
import { Session } from '../../../session/domain/session';
import { User } from '../../../users/domain/user';

export type JwtPayloadType = Pick<User, 'id' | 'role'> & {
  sessionId: Session['id'];
  iat: number;
  exp: number;
};

================
File: backend/src/auth/strategies/types/jwt-refresh-payload.type.ts
================
import { Session } from '../../../session/domain/session';

export type JwtRefreshPayloadType = {
  sessionId: Session['id'];
  hash: Session['hash'];
  iat: number;
  exp: number;
};

================
File: backend/src/auth/strategies/anonymous.strategy.ts
================
import { Strategy } from 'passport-anonymous';
import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';

@Injectable()
export class AnonymousStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super();
  }

  public validate(payload: unknown, request: unknown): unknown {
    return request;
  }
}

================
File: backend/src/auth/strategies/jwt-refresh.strategy.ts
================
import { ExtractJwt, Strategy } from 'passport-jwt';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ConfigService } from '@nestjs/config';
import { JwtRefreshPayloadType } from './types/jwt-refresh-payload.type';
import { OrNeverType } from '../../utils/types/or-never.type';
import { AllConfigType } from '../../config/config.type';

@Injectable()
export class JwtRefreshStrategy extends PassportStrategy(
  Strategy,
  'jwt-refresh',
) {
  constructor(configService: ConfigService<AllConfigType>) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: configService.get('auth.refreshSecret', { infer: true }),
    });
  }

  public validate(
    payload: JwtRefreshPayloadType,
  ): OrNeverType<JwtRefreshPayloadType> {
    if (!payload.sessionId) {
      throw new UnauthorizedException();
    }

    return payload;
  }
}

================
File: backend/src/auth/strategies/jwt.strategy.ts
================
import { ExtractJwt, Strategy } from 'passport-jwt';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ConfigService } from '@nestjs/config';
import { OrNeverType } from '../../utils/types/or-never.type';
import { JwtPayloadType } from './types/jwt-payload.type';
import { AllConfigType } from '../../config/config.type';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {
  constructor(configService: ConfigService<AllConfigType>) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: configService.get('auth.secret', { infer: true }),
    });
  }

  // Why we don't check if the user exists in the database:
  // https://github.com/brocoders/nestjs-boilerplate/blob/main/docs/auth.md#about-jwt-strategy
  public validate(payload: JwtPayloadType): OrNeverType<JwtPayloadType> {
    if (!payload.id) {
      throw new UnauthorizedException();
    }

    return payload;
  }
}

================
File: backend/src/auth/auth-providers.enum.ts
================
export enum AuthProvidersEnum {
  email = 'email',
  facebook = 'facebook',
  google = 'google',
  twitter = 'twitter',
  apple = 'apple',
}

================
File: backend/src/auth/auth.controller.ts
================
import {
  Body,
  Controller,
  Get,
  HttpCode,
  HttpStatus,
  Request,
  Post,
  UseGuards,
  Patch,
  Delete,
  SerializeOptions,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';
import { AuthEmailLoginDto } from './dto/auth-email-login.dto';
import { AuthForgotPasswordDto } from './dto/auth-forgot-password.dto';
import { AuthConfirmEmailDto } from './dto/auth-confirm-email.dto';
import { AuthResetPasswordDto } from './dto/auth-reset-password.dto';
import { AuthUpdateDto } from './dto/auth-update.dto';
import { AuthGuard } from '@nestjs/passport';
import { AuthRegisterLoginDto } from './dto/auth-register-login.dto';
import { LoginResponseDto } from './dto/login-response.dto';
import { NullableType } from '../utils/types/nullable.type';
import { User } from '../users/domain/user';
import { RefreshResponseDto } from './dto/refresh-response.dto';

@ApiTags('Auth')
@Controller({
  path: 'auth',
  version: '1',
})
export class AuthController {
  constructor(private readonly service: AuthService) {}

  @SerializeOptions({
    groups: ['me'],
  })
  @Post('email/login')
  @ApiOkResponse({
    type: LoginResponseDto,
  })
  @HttpCode(HttpStatus.OK)
  public login(@Body() loginDto: AuthEmailLoginDto): Promise<LoginResponseDto> {
    return this.service.validateLogin(loginDto);
  }

  @Post('email/register')
  @HttpCode(HttpStatus.NO_CONTENT)
  async register(@Body() createUserDto: AuthRegisterLoginDto): Promise<void> {
    return this.service.register(createUserDto);
  }

  @Post('email/confirm')
  @HttpCode(HttpStatus.NO_CONTENT)
  async confirmEmail(
    @Body() confirmEmailDto: AuthConfirmEmailDto,
  ): Promise<void> {
    return this.service.confirmEmail(confirmEmailDto.hash);
  }

  @Post('email/confirm/new')
  @HttpCode(HttpStatus.NO_CONTENT)
  async confirmNewEmail(
    @Body() confirmEmailDto: AuthConfirmEmailDto,
  ): Promise<void> {
    return this.service.confirmNewEmail(confirmEmailDto.hash);
  }

  @Post('forgot/password')
  @HttpCode(HttpStatus.NO_CONTENT)
  async forgotPassword(
    @Body() forgotPasswordDto: AuthForgotPasswordDto,
  ): Promise<void> {
    return this.service.forgotPassword(forgotPasswordDto.email);
  }

  @Post('reset/password')
  @HttpCode(HttpStatus.NO_CONTENT)
  resetPassword(@Body() resetPasswordDto: AuthResetPasswordDto): Promise<void> {
    return this.service.resetPassword(
      resetPasswordDto.hash,
      resetPasswordDto.password,
    );
  }

  @ApiBearerAuth()
  @SerializeOptions({
    groups: ['me'],
  })
  @Get('me')
  @UseGuards(AuthGuard('jwt'))
  @ApiOkResponse({
    type: User,
  })
  @HttpCode(HttpStatus.OK)
  public me(@Request() request): Promise<NullableType<User>> {
    return this.service.me(request.user);
  }

  @ApiBearerAuth()
  @ApiOkResponse({
    type: RefreshResponseDto,
  })
  @SerializeOptions({
    groups: ['me'],
  })
  @Post('refresh')
  @UseGuards(AuthGuard('jwt-refresh'))
  @HttpCode(HttpStatus.OK)
  public refresh(@Request() request): Promise<RefreshResponseDto> {
    return this.service.refreshToken({
      sessionId: request.user.sessionId,
      hash: request.user.hash,
    });
  }

  @ApiBearerAuth()
  @Post('logout')
  @UseGuards(AuthGuard('jwt'))
  @HttpCode(HttpStatus.NO_CONTENT)
  public async logout(@Request() request): Promise<void> {
    await this.service.logout({
      sessionId: request.user.sessionId,
    });
  }

  @ApiBearerAuth()
  @SerializeOptions({
    groups: ['me'],
  })
  @Patch('me')
  @UseGuards(AuthGuard('jwt'))
  @HttpCode(HttpStatus.OK)
  @ApiOkResponse({
    type: User,
  })
  public update(
    @Request() request,
    @Body() userDto: AuthUpdateDto,
  ): Promise<NullableType<User>> {
    return this.service.update(request.user, userDto);
  }

  @ApiBearerAuth()
  @Delete('me')
  @UseGuards(AuthGuard('jwt'))
  @HttpCode(HttpStatus.NO_CONTENT)
  public async delete(@Request() request): Promise<void> {
    return this.service.softDelete(request.user);
  }
}

================
File: backend/src/auth/auth.module.ts
================
import { Module } from '@nestjs/common';
import { AuthController } from './auth.controller';
import { AuthService } from './auth.service';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { JwtStrategy } from './strategies/jwt.strategy';
import { AnonymousStrategy } from './strategies/anonymous.strategy';
import { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';
import { MailModule } from '../mail/mail.module';
import { SessionModule } from '../session/session.module';
import { UsersModule } from '../users/users.module';

@Module({
  imports: [
    UsersModule,
    SessionModule,
    PassportModule,
    MailModule,
    JwtModule.register({}),
  ],
  controllers: [AuthController],
  providers: [AuthService, JwtStrategy, JwtRefreshStrategy, AnonymousStrategy],
  exports: [AuthService],
})
export class AuthModule {}

================
File: backend/src/auth/auth.service.ts
================
import {
  HttpStatus,
  Injectable,
  NotFoundException,
  UnauthorizedException,
  UnprocessableEntityException,
} from '@nestjs/common';
import ms from 'ms';
import crypto from 'crypto';
import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';
import { JwtService } from '@nestjs/jwt';
import bcrypt from 'bcryptjs';
import { AuthEmailLoginDto } from './dto/auth-email-login.dto';
import { AuthUpdateDto } from './dto/auth-update.dto';
import { AuthProvidersEnum } from './auth-providers.enum';
import { SocialInterface } from '../social/interfaces/social.interface';
import { AuthRegisterLoginDto } from './dto/auth-register-login.dto';
import { NullableType } from '../utils/types/nullable.type';
import { LoginResponseDto } from './dto/login-response.dto';
import { ConfigService } from '@nestjs/config';
import { JwtRefreshPayloadType } from './strategies/types/jwt-refresh-payload.type';
import { JwtPayloadType } from './strategies/types/jwt-payload.type';
import { UsersService } from '../users/users.service';
import { AllConfigType } from '../config/config.type';
import { MailService } from '../mail/mail.service';
import { RoleEnum } from '../roles/roles.enum';
import { Session } from '../session/domain/session';
import { SessionService } from '../session/session.service';
import { StatusEnum } from '../statuses/statuses.enum';
import { User } from '../users/domain/user';

@Injectable()
export class AuthService {
  constructor(
    private jwtService: JwtService,
    private usersService: UsersService,
    private sessionService: SessionService,
    private mailService: MailService,
    private configService: ConfigService<AllConfigType>,
  ) {}

  async validateLogin(loginDto: AuthEmailLoginDto): Promise<LoginResponseDto> {
    const user = await this.usersService.findByEmail(loginDto.email);

    if (!user) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          email: 'notFound',
        },
      });
    }

    if (user.provider !== AuthProvidersEnum.email) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          email: `needLoginViaProvider:${user.provider}`,
        },
      });
    }

    if (!user.password) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          password: 'incorrectPassword',
        },
      });
    }

    const isValidPassword = await bcrypt.compare(
      loginDto.password,
      user.password,
    );

    if (!isValidPassword) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          password: 'incorrectPassword',
        },
      });
    }

    const hash = crypto
      .createHash('sha256')
      .update(randomStringGenerator())
      .digest('hex');

    const session = await this.sessionService.create({
      user,
      hash,
    });

    const { token, refreshToken, tokenExpires } = await this.getTokensData({
      id: user.id,
      role: user.role,
      sessionId: session.id,
      hash,
    });

    return {
      refreshToken,
      token,
      tokenExpires,
      user,
    };
  }

  async validateSocialLogin(
    authProvider: string,
    socialData: SocialInterface,
  ): Promise<LoginResponseDto> {
    let user: NullableType<User> = null;
    const socialEmail = socialData.email?.toLowerCase();
    let userByEmail: NullableType<User> = null;

    if (socialEmail) {
      userByEmail = await this.usersService.findByEmail(socialEmail);
    }

    if (socialData.id) {
      user = await this.usersService.findBySocialIdAndProvider({
        socialId: socialData.id,
        provider: authProvider,
      });
    }

    if (user) {
      if (socialEmail && !userByEmail) {
        user.email = socialEmail;
      }
      await this.usersService.update(user.id, user);
    } else if (userByEmail) {
      user = userByEmail;
    } else if (socialData.id) {
      const role = {
        id: RoleEnum.user,
      };
      const status = {
        id: StatusEnum.active,
      };

      user = await this.usersService.create({
        email: socialEmail ?? null,
        firstName: socialData.firstName ?? null,
        lastName: socialData.lastName ?? null,
        socialId: socialData.id,
        provider: authProvider,
        role,
        status,
      });

      user = await this.usersService.findById(user.id);
    }

    if (!user) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          user: 'userNotFound',
        },
      });
    }

    const hash = crypto
      .createHash('sha256')
      .update(randomStringGenerator())
      .digest('hex');

    const session = await this.sessionService.create({
      user,
      hash,
    });

    const {
      token: jwtToken,
      refreshToken,
      tokenExpires,
    } = await this.getTokensData({
      id: user.id,
      role: user.role,
      sessionId: session.id,
      hash,
    });

    return {
      refreshToken,
      token: jwtToken,
      tokenExpires,
      user,
    };
  }

  async register(dto: AuthRegisterLoginDto): Promise<void> {
    const user = await this.usersService.create({
      ...dto,
      email: dto.email,
      role: {
        id: RoleEnum.user,
      },
      status: {
        id: StatusEnum.inactive,
      },
    });

    const hash = await this.jwtService.signAsync(
      {
        confirmEmailUserId: user.id,
      },
      {
        secret: this.configService.getOrThrow('auth.confirmEmailSecret', {
          infer: true,
        }),
        expiresIn: this.configService.getOrThrow('auth.confirmEmailExpires', {
          infer: true,
        }),
      },
    );

    await this.mailService.userSignUp({
      to: dto.email,
      data: {
        hash,
      },
    });
  }

  async confirmEmail(hash: string): Promise<void> {
    let userId: User['id'];

    try {
      const jwtData = await this.jwtService.verifyAsync<{
        confirmEmailUserId: User['id'];
      }>(hash, {
        secret: this.configService.getOrThrow('auth.confirmEmailSecret', {
          infer: true,
        }),
      });

      userId = jwtData.confirmEmailUserId;
    } catch {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          hash: `invalidHash`,
        },
      });
    }

    const user = await this.usersService.findById(userId);

    if (
      !user ||
      user?.status?.id?.toString() !== StatusEnum.inactive.toString()
    ) {
      throw new NotFoundException({
        status: HttpStatus.NOT_FOUND,
        error: `notFound`,
      });
    }

    user.status = {
      id: StatusEnum.active,
    };

    await this.usersService.update(user.id, user);
  }

  async confirmNewEmail(hash: string): Promise<void> {
    let userId: User['id'];
    let newEmail: User['email'];

    try {
      const jwtData = await this.jwtService.verifyAsync<{
        confirmEmailUserId: User['id'];
        newEmail: User['email'];
      }>(hash, {
        secret: this.configService.getOrThrow('auth.confirmEmailSecret', {
          infer: true,
        }),
      });

      userId = jwtData.confirmEmailUserId;
      newEmail = jwtData.newEmail;
    } catch {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          hash: `invalidHash`,
        },
      });
    }

    const user = await this.usersService.findById(userId);

    if (!user) {
      throw new NotFoundException({
        status: HttpStatus.NOT_FOUND,
        error: `notFound`,
      });
    }

    user.email = newEmail;
    user.status = {
      id: StatusEnum.active,
    };

    await this.usersService.update(user.id, user);
  }

  async forgotPassword(email: string): Promise<void> {
    const user = await this.usersService.findByEmail(email);

    if (!user) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          email: 'emailNotExists',
        },
      });
    }

    const tokenExpiresIn = this.configService.getOrThrow('auth.forgotExpires', {
      infer: true,
    });

    const tokenExpires = Date.now() + ms(tokenExpiresIn);

    const hash = await this.jwtService.signAsync(
      {
        forgotUserId: user.id,
      },
      {
        secret: this.configService.getOrThrow('auth.forgotSecret', {
          infer: true,
        }),
        expiresIn: tokenExpiresIn,
      },
    );

    await this.mailService.forgotPassword({
      to: email,
      data: {
        hash,
        tokenExpires,
      },
    });
  }

  async resetPassword(hash: string, password: string): Promise<void> {
    let userId: User['id'];

    try {
      const jwtData = await this.jwtService.verifyAsync<{
        forgotUserId: User['id'];
      }>(hash, {
        secret: this.configService.getOrThrow('auth.forgotSecret', {
          infer: true,
        }),
      });

      userId = jwtData.forgotUserId;
    } catch {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          hash: `invalidHash`,
        },
      });
    }

    const user = await this.usersService.findById(userId);

    if (!user) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          hash: `notFound`,
        },
      });
    }

    user.password = password;

    await this.sessionService.deleteByUserId({
      userId: user.id,
    });

    await this.usersService.update(user.id, user);
  }

  async me(userJwtPayload: JwtPayloadType): Promise<NullableType<User>> {
    return this.usersService.findById(userJwtPayload.id);
  }

  async update(
    userJwtPayload: JwtPayloadType,
    userDto: AuthUpdateDto,
  ): Promise<NullableType<User>> {
    const currentUser = await this.usersService.findById(userJwtPayload.id);

    if (!currentUser) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          user: 'userNotFound',
        },
      });
    }

    if (userDto.password) {
      if (!userDto.oldPassword) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            oldPassword: 'missingOldPassword',
          },
        });
      }

      if (!currentUser.password) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            oldPassword: 'incorrectOldPassword',
          },
        });
      }

      const isValidOldPassword = await bcrypt.compare(
        userDto.oldPassword,
        currentUser.password,
      );

      if (!isValidOldPassword) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            oldPassword: 'incorrectOldPassword',
          },
        });
      } else {
        await this.sessionService.deleteByUserIdWithExclude({
          userId: currentUser.id,
          excludeSessionId: userJwtPayload.sessionId,
        });
      }
    }

    if (userDto.email && userDto.email !== currentUser.email) {
      const userByEmail = await this.usersService.findByEmail(userDto.email);

      if (userByEmail && userByEmail.id !== currentUser.id) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            email: 'emailExists',
          },
        });
      }

      const hash = await this.jwtService.signAsync(
        {
          confirmEmailUserId: currentUser.id,
          newEmail: userDto.email,
        },
        {
          secret: this.configService.getOrThrow('auth.confirmEmailSecret', {
            infer: true,
          }),
          expiresIn: this.configService.getOrThrow('auth.confirmEmailExpires', {
            infer: true,
          }),
        },
      );

      await this.mailService.confirmNewEmail({
        to: userDto.email,
        data: {
          hash,
        },
      });
    }

    delete userDto.email;
    delete userDto.oldPassword;

    await this.usersService.update(userJwtPayload.id, userDto);

    return this.usersService.findById(userJwtPayload.id);
  }

  async refreshToken(
    data: Pick<JwtRefreshPayloadType, 'sessionId' | 'hash'>,
  ): Promise<Omit<LoginResponseDto, 'user'>> {
    const session = await this.sessionService.findById(data.sessionId);

    if (!session) {
      throw new UnauthorizedException();
    }

    if (session.hash !== data.hash) {
      throw new UnauthorizedException();
    }

    const hash = crypto
      .createHash('sha256')
      .update(randomStringGenerator())
      .digest('hex');

    const user = await this.usersService.findById(session.user.id);

    if (!user?.role) {
      throw new UnauthorizedException();
    }

    await this.sessionService.update(session.id, {
      hash,
    });

    const { token, refreshToken, tokenExpires } = await this.getTokensData({
      id: session.user.id,
      role: {
        id: user.role.id,
      },
      sessionId: session.id,
      hash,
    });

    return {
      token,
      refreshToken,
      tokenExpires,
    };
  }

  async softDelete(user: User): Promise<void> {
    await this.usersService.remove(user.id);
  }

  async logout(data: Pick<JwtRefreshPayloadType, 'sessionId'>) {
    return this.sessionService.deleteById(data.sessionId);
  }

  private async getTokensData(data: {
    id: User['id'];
    role: User['role'];
    sessionId: Session['id'];
    hash: Session['hash'];
  }) {
    const tokenExpiresIn = this.configService.getOrThrow('auth.expires', {
      infer: true,
    });

    const tokenExpires = Date.now() + ms(tokenExpiresIn);

    const [token, refreshToken] = await Promise.all([
      await this.jwtService.signAsync(
        {
          id: data.id,
          role: data.role,
          sessionId: data.sessionId,
        },
        {
          secret: this.configService.getOrThrow('auth.secret', { infer: true }),
          expiresIn: tokenExpiresIn,
        },
      ),
      await this.jwtService.signAsync(
        {
          sessionId: data.sessionId,
          hash: data.hash,
        },
        {
          secret: this.configService.getOrThrow('auth.refreshSecret', {
            infer: true,
          }),
          expiresIn: this.configService.getOrThrow('auth.refreshExpires', {
            infer: true,
          }),
        },
      ),
    ]);

    return {
      token,
      refreshToken,
      tokenExpires,
    };
  }
}

================
File: backend/src/auth-apple/config/apple-config.type.ts
================
export type AppleConfig = {
  appAudience: string[];
};

================
File: backend/src/auth-apple/config/apple.config.ts
================
import { registerAs } from '@nestjs/config';

import { IsJSON, IsOptional } from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { AppleConfig } from './apple-config.type';

class EnvironmentVariablesValidator {
  @IsJSON()
  @IsOptional()
  APPLE_APP_AUDIENCE: string;
}

export default registerAs<AppleConfig>('apple', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    appAudience: JSON.parse(process.env.APPLE_APP_AUDIENCE ?? '[]'),
  };
});

================
File: backend/src/auth-apple/dto/auth-apple-login.dto.ts
================
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { Allow, IsNotEmpty } from 'class-validator';

export class AuthAppleLoginDto {
  @ApiProperty({ example: 'abc' })
  @IsNotEmpty()
  idToken: string;

  @Allow()
  @ApiPropertyOptional()
  firstName?: string;

  @Allow()
  @ApiPropertyOptional()
  lastName?: string;
}

================
File: backend/src/auth-apple/auth-apple.controller.ts
================
import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Post,
  SerializeOptions,
} from '@nestjs/common';
import { ApiOkResponse, ApiTags } from '@nestjs/swagger';
import { AuthService } from '../auth/auth.service';
import { AuthAppleService } from './auth-apple.service';
import { AuthAppleLoginDto } from './dto/auth-apple-login.dto';
import { LoginResponseDto } from '../auth/dto/login-response.dto';

@ApiTags('Auth')
@Controller({
  path: 'auth/apple',
  version: '1',
})
export class AuthAppleController {
  constructor(
    private readonly authService: AuthService,
    private readonly authAppleService: AuthAppleService,
  ) {}

  @ApiOkResponse({
    type: LoginResponseDto,
  })
  @SerializeOptions({
    groups: ['me'],
  })
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(@Body() loginDto: AuthAppleLoginDto): Promise<LoginResponseDto> {
    const socialData = await this.authAppleService.getProfileByToken(loginDto);

    return this.authService.validateSocialLogin('apple', socialData);
  }
}

================
File: backend/src/auth-apple/auth-apple.module.ts
================
import { Module } from '@nestjs/common';
import { AuthAppleService } from './auth-apple.service';
import { ConfigModule } from '@nestjs/config';
import { AuthAppleController } from './auth-apple.controller';
import { AuthModule } from '../auth/auth.module';

@Module({
  imports: [ConfigModule, AuthModule],
  providers: [AuthAppleService],
  exports: [AuthAppleService],
  controllers: [AuthAppleController],
})
export class AuthAppleModule {}

================
File: backend/src/auth-apple/auth-apple.service.ts
================
import { Injectable } from '@nestjs/common';
import appleSigninAuth from 'apple-signin-auth';
import { ConfigService } from '@nestjs/config';
import { SocialInterface } from '../social/interfaces/social.interface';
import { AuthAppleLoginDto } from './dto/auth-apple-login.dto';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class AuthAppleService {
  constructor(private configService: ConfigService<AllConfigType>) {}

  async getProfileByToken(
    loginDto: AuthAppleLoginDto,
  ): Promise<SocialInterface> {
    const data = await appleSigninAuth.verifyIdToken(loginDto.idToken, {
      audience: this.configService.get('apple.appAudience', { infer: true }),
    });

    return {
      id: data.sub,
      email: data.email,
      firstName: loginDto.firstName,
      lastName: loginDto.lastName,
    };
  }
}

================
File: backend/src/auth-facebook/config/facebook-config.type.ts
================
export type FacebookConfig = {
  appId?: string;
  appSecret?: string;
};

================
File: backend/src/auth-facebook/config/facebook.config.ts
================
import { registerAs } from '@nestjs/config';

import { IsOptional, IsString } from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { FacebookConfig } from './facebook-config.type';

class EnvironmentVariablesValidator {
  @IsString()
  @IsOptional()
  FACEBOOK_APP_ID: string;

  @IsString()
  @IsOptional()
  FACEBOOK_APP_SECRET: string;
}

export default registerAs<FacebookConfig>('facebook', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    appId: process.env.FACEBOOK_APP_ID,
    appSecret: process.env.FACEBOOK_APP_SECRET,
  };
});

================
File: backend/src/auth-facebook/dto/auth-facebook-login.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class AuthFacebookLoginDto {
  @ApiProperty({ example: 'abc' })
  @IsNotEmpty()
  accessToken: string;
}

================
File: backend/src/auth-facebook/interfaces/facebook.interface.ts
================
export interface FacebookInterface {
  id: string;
  first_name?: string;
  last_name?: string;
  email?: string;
}

================
File: backend/src/auth-facebook/auth-facebook.controller.ts
================
import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Post,
  SerializeOptions,
} from '@nestjs/common';
import { ApiOkResponse, ApiTags } from '@nestjs/swagger';
import { AuthService } from '../auth/auth.service';
import { AuthFacebookService } from './auth-facebook.service';
import { AuthFacebookLoginDto } from './dto/auth-facebook-login.dto';
import { LoginResponseDto } from '../auth/dto/login-response.dto';

@ApiTags('Auth')
@Controller({
  path: 'auth/facebook',
  version: '1',
})
export class AuthFacebookController {
  constructor(
    private readonly authService: AuthService,
    private readonly authFacebookService: AuthFacebookService,
  ) {}

  @ApiOkResponse({
    type: LoginResponseDto,
  })
  @SerializeOptions({
    groups: ['me'],
  })
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(
    @Body() loginDto: AuthFacebookLoginDto,
  ): Promise<LoginResponseDto> {
    const socialData =
      await this.authFacebookService.getProfileByToken(loginDto);

    return this.authService.validateSocialLogin('facebook', socialData);
  }
}

================
File: backend/src/auth-facebook/auth-facebook.module.ts
================
import { Module } from '@nestjs/common';
import { AuthFacebookService } from './auth-facebook.service';
import { ConfigModule } from '@nestjs/config';
import { AuthFacebookController } from './auth-facebook.controller';
import { AuthModule } from '../auth/auth.module';

@Module({
  imports: [ConfigModule, AuthModule],
  providers: [AuthFacebookService],
  exports: [AuthFacebookService],
  controllers: [AuthFacebookController],
})
export class AuthFacebookModule {}

================
File: backend/src/auth-facebook/auth-facebook.service.ts
================
import { Injectable } from '@nestjs/common';
import { Facebook } from 'fb';
import { ConfigService } from '@nestjs/config';
import { SocialInterface } from '../social/interfaces/social.interface';
import { FacebookInterface } from './interfaces/facebook.interface';
import { AuthFacebookLoginDto } from './dto/auth-facebook-login.dto';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class AuthFacebookService {
  constructor(private configService: ConfigService<AllConfigType>) {}

  async getProfileByToken(
    loginDto: AuthFacebookLoginDto,
  ): Promise<SocialInterface> {
    const fb: Facebook = new Facebook({
      appId: this.configService.get('facebook.appId', {
        infer: true,
      }),
      appSecret: this.configService.get('facebook.appSecret', {
        infer: true,
      }),
      version: 'v7.0',
    });
    fb.setAccessToken(loginDto.accessToken);

    const data: FacebookInterface = await new Promise((resolve) => {
      fb.api(
        '/me',
        'get',
        { fields: 'id,last_name,email,first_name' },
        (response) => {
          resolve(response);
        },
      );
    });

    return {
      id: data.id,
      email: data.email,
      firstName: data.first_name,
      lastName: data.last_name,
    };
  }
}

================
File: backend/src/auth-google/config/google-config.type.ts
================
export type GoogleConfig = {
  clientId?: string;
  clientSecret?: string;
};

================
File: backend/src/auth-google/config/google.config.ts
================
import { registerAs } from '@nestjs/config';

import { IsOptional, IsString } from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { GoogleConfig } from './google-config.type';

class EnvironmentVariablesValidator {
  @IsString()
  @IsOptional()
  GOOGLE_CLIENT_ID: string;

  @IsString()
  @IsOptional()
  GOOGLE_CLIENT_SECRET: string;
}

export default registerAs<GoogleConfig>('google', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    clientId: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  };
});

================
File: backend/src/auth-google/dto/auth-google-login.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class AuthGoogleLoginDto {
  @ApiProperty({ example: 'abc' })
  @IsNotEmpty()
  idToken: string;
}

================
File: backend/src/auth-google/auth-google.controller.ts
================
import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Post,
  SerializeOptions,
} from '@nestjs/common';
import { ApiOkResponse, ApiTags } from '@nestjs/swagger';
import { AuthService } from '../auth/auth.service';
import { AuthGoogleService } from './auth-google.service';
import { AuthGoogleLoginDto } from './dto/auth-google-login.dto';
import { LoginResponseDto } from '../auth/dto/login-response.dto';

@ApiTags('Auth')
@Controller({
  path: 'auth/google',
  version: '1',
})
export class AuthGoogleController {
  constructor(
    private readonly authService: AuthService,
    private readonly authGoogleService: AuthGoogleService,
  ) {}

  @ApiOkResponse({
    type: LoginResponseDto,
  })
  @SerializeOptions({
    groups: ['me'],
  })
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(@Body() loginDto: AuthGoogleLoginDto): Promise<LoginResponseDto> {
    const socialData = await this.authGoogleService.getProfileByToken(loginDto);

    return this.authService.validateSocialLogin('google', socialData);
  }
}

================
File: backend/src/auth-google/auth-google.module.ts
================
import { Module } from '@nestjs/common';
import { AuthGoogleService } from './auth-google.service';
import { ConfigModule } from '@nestjs/config';
import { AuthGoogleController } from './auth-google.controller';
import { AuthModule } from '../auth/auth.module';

@Module({
  imports: [ConfigModule, AuthModule],
  providers: [AuthGoogleService],
  exports: [AuthGoogleService],
  controllers: [AuthGoogleController],
})
export class AuthGoogleModule {}

================
File: backend/src/auth-google/auth-google.service.ts
================
import {
  HttpStatus,
  Injectable,
  UnprocessableEntityException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { OAuth2Client } from 'google-auth-library';
import { SocialInterface } from '../social/interfaces/social.interface';
import { AuthGoogleLoginDto } from './dto/auth-google-login.dto';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class AuthGoogleService {
  private google: OAuth2Client;

  constructor(private configService: ConfigService<AllConfigType>) {
    this.google = new OAuth2Client(
      configService.get('google.clientId', { infer: true }),
      configService.get('google.clientSecret', { infer: true }),
    );
  }

  async getProfileByToken(
    loginDto: AuthGoogleLoginDto,
  ): Promise<SocialInterface> {
    const ticket = await this.google.verifyIdToken({
      idToken: loginDto.idToken,
      audience: [
        this.configService.getOrThrow('google.clientId', { infer: true }),
      ],
    });

    const data = ticket.getPayload();

    if (!data) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          user: 'wrongToken',
        },
      });
    }

    return {
      id: data.sub,
      email: data.email,
      firstName: data.given_name,
      lastName: data.family_name,
    };
  }
}

================
File: backend/src/auth-twitter/config/twitter-config.type.ts
================
export type TwitterConfig = {
  consumerKey?: string;
  consumerSecret?: string;
};

================
File: backend/src/auth-twitter/config/twitter.config.ts
================
import { registerAs } from '@nestjs/config';
import { IsString, IsOptional } from 'class-validator';
import validateConfig from '../../utils/validate-config';

class EnvironmentVariablesValidator {
  @IsString()
  @IsOptional()
  TWITTER_CONSUMER_KEY: string;

  @IsString()
  @IsOptional()
  TWITTER_CONSUMER_SECRET: string;
}

export default registerAs('twitter', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    consumerKey: process.env.TWITTER_CONSUMER_KEY,
    consumerSecret: process.env.TWITTER_CONSUMER_SECRET,
  };
});

================
File: backend/src/auth-twitter/dto/auth-twitter-login.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class AuthTwitterLoginDto {
  @ApiProperty({ example: 'abc' })
  @IsNotEmpty()
  accessTokenKey: string;

  @ApiProperty({ example: 'abc' })
  @IsNotEmpty()
  accessTokenSecret: string;
}

================
File: backend/src/auth-twitter/auth-twitter.controller.ts
================
import {
  Body,
  Controller,
  HttpCode,
  HttpStatus,
  Post,
  SerializeOptions,
} from '@nestjs/common';
import { ApiOkResponse, ApiTags } from '@nestjs/swagger';
import { AuthService } from '../auth/auth.service';
import { AuthTwitterService } from './auth-twitter.service';
import { AuthTwitterLoginDto } from './dto/auth-twitter-login.dto';
import { LoginResponseDto } from '../auth/dto/login-response.dto';

@ApiTags('Auth')
@Controller({
  path: 'auth/twitter',
  version: '1',
})
export class AuthTwitterController {
  constructor(
    private readonly authService: AuthService,
    private readonly authTwitterService: AuthTwitterService,
  ) {}

  @ApiOkResponse({
    type: LoginResponseDto,
  })
  @SerializeOptions({
    groups: ['me'],
  })
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(
    @Body() loginDto: AuthTwitterLoginDto,
  ): Promise<LoginResponseDto> {
    const socialData =
      await this.authTwitterService.getProfileByToken(loginDto);

    return this.authService.validateSocialLogin('twitter', socialData);
  }
}

================
File: backend/src/auth-twitter/auth-twitter.module.ts
================
import { Module } from '@nestjs/common';
import { AuthTwitterService } from './auth-twitter.service';
import { ConfigModule } from '@nestjs/config';
import { AuthTwitterController } from './auth-twitter.controller';
import { AuthModule } from '../auth/auth.module';

@Module({
  imports: [ConfigModule, AuthModule],
  providers: [AuthTwitterService],
  exports: [AuthTwitterService],
  controllers: [AuthTwitterController],
})
export class AuthTwitterModule {}

================
File: backend/src/auth-twitter/auth-twitter.service.ts
================
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Twitter from 'twitter';
import { SocialInterface } from '../social/interfaces/social.interface';
import { AuthTwitterLoginDto } from './dto/auth-twitter-login.dto';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class AuthTwitterService {
  constructor(private configService: ConfigService<AllConfigType>) {}

  async getProfileByToken(
    loginDto: AuthTwitterLoginDto,
  ): Promise<SocialInterface> {
    const twitter = new Twitter({
      consumer_key: this.configService.getOrThrow('twitter.consumerKey', {
        infer: true,
      }),
      consumer_secret: this.configService.getOrThrow('twitter.consumerSecret', {
        infer: true,
      }),
      access_token_key: loginDto.accessTokenKey,
      access_token_secret: loginDto.accessTokenSecret,
    });

    const data: Twitter.ResponseData = await new Promise((resolve) => {
      twitter.get(
        'account/verify_credentials',
        { include_email: true },
        (error, profile) => {
          resolve(profile);
        },
      );
    });

    return {
      id: data.id?.toString(),
      email: data.email,
      firstName: data.name,
    };
  }
}

================
File: backend/src/config/app-config.type.ts
================
export type AppConfig = {
  nodeEnv: string;
  name: string;
  workingDirectory: string;
  frontendDomain?: string;
  backendDomain: string;
  port: number;
  apiPrefix: string;
  fallbackLanguage: string;
  headerLanguage: string;
};

================
File: backend/src/config/app.config.ts
================
import { registerAs } from '@nestjs/config';
import { AppConfig } from './app-config.type';
import validateConfig from '.././utils/validate-config';
import {
  IsEnum,
  IsInt,
  IsOptional,
  IsString,
  IsUrl,
  Max,
  Min,
} from 'class-validator';

enum Environment {
  Development = 'development',
  Production = 'production',
  Test = 'test',
}

class EnvironmentVariablesValidator {
  @IsEnum(Environment)
  @IsOptional()
  NODE_ENV: Environment;

  @IsInt()
  @Min(0)
  @Max(65535)
  @IsOptional()
  APP_PORT: number;

  @IsUrl({ require_tld: false })
  @IsOptional()
  FRONTEND_DOMAIN: string;

  @IsUrl({ require_tld: false })
  @IsOptional()
  BACKEND_DOMAIN: string;

  @IsString()
  @IsOptional()
  API_PREFIX: string;

  @IsString()
  @IsOptional()
  APP_FALLBACK_LANGUAGE: string;

  @IsString()
  @IsOptional()
  APP_HEADER_LANGUAGE: string;
}

export default registerAs<AppConfig>('app', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    nodeEnv: process.env.NODE_ENV || 'development',
    name: process.env.APP_NAME || 'app',
    workingDirectory: process.env.PWD || process.cwd(),
    frontendDomain: process.env.FRONTEND_DOMAIN,
    backendDomain: process.env.BACKEND_DOMAIN ?? 'http://localhost',
    port: process.env.APP_PORT
      ? parseInt(process.env.APP_PORT, 10)
      : process.env.PORT
        ? parseInt(process.env.PORT, 10)
        : 3000,
    apiPrefix: process.env.API_PREFIX || 'api',
    fallbackLanguage: process.env.APP_FALLBACK_LANGUAGE || 'en',
    headerLanguage: process.env.APP_HEADER_LANGUAGE || 'x-custom-lang',
  };
});

================
File: backend/src/config/config.type.ts
================
import { AppConfig } from './app-config.type';
import { AppleConfig } from '../auth-apple/config/apple-config.type';
import { AuthConfig } from '../auth/config/auth-config.type';
import { DatabaseConfig } from '../database/config/database-config.type';
import { FacebookConfig } from '../auth-facebook/config/facebook-config.type';
import { FileConfig } from '../files/config/file-config.type';
import { GoogleConfig } from '../auth-google/config/google-config.type';
import { MailConfig } from '../mail/config/mail-config.type';
import { TwitterConfig } from '../auth-twitter/config/twitter-config.type';

export type AllConfigType = {
  app: AppConfig;
  apple: AppleConfig;
  auth: AuthConfig;
  database: DatabaseConfig;
  facebook: FacebookConfig;
  file: FileConfig;
  google: GoogleConfig;
  mail: MailConfig;
  twitter: TwitterConfig;
};

================
File: backend/src/database/config/database-config.type.ts
================
export type DatabaseConfig = {
  isDocumentDatabase: boolean;
  url?: string;
  type?: string;
  host?: string;
  port?: number;
  password?: string;
  name?: string;
  username?: string;
  synchronize?: boolean;
  maxConnections: number;
  sslEnabled?: boolean;
  rejectUnauthorized?: boolean;
  ca?: string;
  key?: string;
  cert?: string;
};

================
File: backend/src/database/config/database.config.ts
================
import { registerAs } from '@nestjs/config';

import {
  IsOptional,
  IsInt,
  Min,
  Max,
  IsString,
  ValidateIf,
  IsBoolean,
} from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { DatabaseConfig } from './database-config.type';

class EnvironmentVariablesValidator {
  @ValidateIf((envValues) => envValues.DATABASE_URL)
  @IsString()
  DATABASE_URL: string;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsString()
  DATABASE_TYPE: string;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsString()
  DATABASE_HOST: string;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsInt()
  @Min(0)
  @Max(65535)
  DATABASE_PORT: number;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsString()
  DATABASE_PASSWORD: string;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsString()
  DATABASE_NAME: string;

  @ValidateIf((envValues) => !envValues.DATABASE_URL)
  @IsString()
  DATABASE_USERNAME: string;

  @IsBoolean()
  @IsOptional()
  DATABASE_SYNCHRONIZE: boolean;

  @IsInt()
  @IsOptional()
  DATABASE_MAX_CONNECTIONS: number;

  @IsBoolean()
  @IsOptional()
  DATABASE_SSL_ENABLED: boolean;

  @IsBoolean()
  @IsOptional()
  DATABASE_REJECT_UNAUTHORIZED: boolean;

  @IsString()
  @IsOptional()
  DATABASE_CA: string;

  @IsString()
  @IsOptional()
  DATABASE_KEY: string;

  @IsString()
  @IsOptional()
  DATABASE_CERT: string;
}

export default registerAs<DatabaseConfig>('database', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    isDocumentDatabase: ['mongodb'].includes(process.env.DATABASE_TYPE ?? ''),
    url: process.env.DATABASE_URL,
    type: process.env.DATABASE_TYPE,
    host: process.env.DATABASE_HOST,
    port: process.env.DATABASE_PORT
      ? parseInt(process.env.DATABASE_PORT, 10)
      : 5432,
    password: process.env.DATABASE_PASSWORD,
    name: process.env.DATABASE_NAME,
    username: process.env.DATABASE_USERNAME,
    synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',
    maxConnections: process.env.DATABASE_MAX_CONNECTIONS
      ? parseInt(process.env.DATABASE_MAX_CONNECTIONS, 10)
      : 100,
    sslEnabled: process.env.DATABASE_SSL_ENABLED === 'true',
    rejectUnauthorized: process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',
    ca: process.env.DATABASE_CA,
    key: process.env.DATABASE_KEY,
    cert: process.env.DATABASE_CERT,
  };
});

================
File: backend/src/database/migrations/1715028537217-CreateUser.ts
================
import { MigrationInterface, QueryRunner } from 'typeorm';

export class CreateUser1715028537217 implements MigrationInterface {
  name = 'CreateUser1715028537217';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE TABLE "role" ("id" integer NOT NULL, "name" character varying NOT NULL, CONSTRAINT "PK_b36bcfe02fc8de3c57a8b2391c2" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TABLE "status" ("id" integer NOT NULL, "name" character varying NOT NULL, CONSTRAINT "PK_e12743a7086ec826733f54e1d95" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TABLE "file" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "path" character varying NOT NULL, CONSTRAINT "PK_36b46d232307066b3a2c9ea3a1d" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TABLE "user" ("id" SERIAL NOT NULL, "email" character varying, "password" character varying, "provider" character varying NOT NULL DEFAULT 'email', "socialId" character varying, "firstName" character varying, "lastName" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "photoId" uuid, "roleId" integer, "statusId" integer, CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"), CONSTRAINT "REL_75e2be4ce11d447ef43be0e374" UNIQUE ("photoId"), CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE INDEX "IDX_9bd2fe7a8e694dedc4ec2f666f" ON "user" ("socialId") `,
    );
    await queryRunner.query(
      `CREATE INDEX "IDX_58e4dbff0e1a32a9bdc861bb29" ON "user" ("firstName") `,
    );
    await queryRunner.query(
      `CREATE INDEX "IDX_f0e1b4ecdca13b177e2e3a0613" ON "user" ("lastName") `,
    );
    await queryRunner.query(
      `CREATE TABLE "session" ("id" SERIAL NOT NULL, "hash" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, "userId" integer, CONSTRAINT "PK_f55da76ac1c3ac420f444d2ff11" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE INDEX "IDX_3d2f174ef04fb312fdebd0ddc5" ON "session" ("userId") `,
    );
    await queryRunner.query(
      `ALTER TABLE "user" ADD CONSTRAINT "FK_75e2be4ce11d447ef43be0e374f" FOREIGN KEY ("photoId") REFERENCES "file"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `ALTER TABLE "user" ADD CONSTRAINT "FK_c28e52f758e7bbc53828db92194" FOREIGN KEY ("roleId") REFERENCES "role"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `ALTER TABLE "user" ADD CONSTRAINT "FK_dc18daa696860586ba4667a9d31" FOREIGN KEY ("statusId") REFERENCES "status"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `ALTER TABLE "session" ADD CONSTRAINT "FK_3d2f174ef04fb312fdebd0ddc53" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `ALTER TABLE "session" DROP CONSTRAINT "FK_3d2f174ef04fb312fdebd0ddc53"`,
    );
    await queryRunner.query(
      `ALTER TABLE "user" DROP CONSTRAINT "FK_dc18daa696860586ba4667a9d31"`,
    );
    await queryRunner.query(
      `ALTER TABLE "user" DROP CONSTRAINT "FK_c28e52f758e7bbc53828db92194"`,
    );
    await queryRunner.query(
      `ALTER TABLE "user" DROP CONSTRAINT "FK_75e2be4ce11d447ef43be0e374f"`,
    );
    await queryRunner.query(
      `DROP INDEX "public"."IDX_3d2f174ef04fb312fdebd0ddc5"`,
    );
    await queryRunner.query(`DROP TABLE "session"`);
    await queryRunner.query(
      `DROP INDEX "public"."IDX_f0e1b4ecdca13b177e2e3a0613"`,
    );
    await queryRunner.query(
      `DROP INDEX "public"."IDX_58e4dbff0e1a32a9bdc861bb29"`,
    );
    await queryRunner.query(
      `DROP INDEX "public"."IDX_9bd2fe7a8e694dedc4ec2f666f"`,
    );
    await queryRunner.query(`DROP TABLE "user"`);
    await queryRunner.query(`DROP TABLE "file"`);
    await queryRunner.query(`DROP TABLE "status"`);
    await queryRunner.query(`DROP TABLE "role"`);
  }
}

================
File: backend/src/database/seeds/document/user/user-seed.module.ts
================
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { UserSeedService } from './user-seed.service';
import {
  UserSchemaClass,
  UserSchema,
} from '../../../../users/infrastructure/persistence/document/entities/user.schema';

@Module({
  imports: [
    MongooseModule.forFeature([
      {
        name: UserSchemaClass.name,
        schema: UserSchema,
      },
    ]),
  ],
  providers: [UserSeedService],
  exports: [UserSeedService],
})
export class UserSeedModule {}

================
File: backend/src/database/seeds/document/user/user-seed.service.ts
================
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import bcrypt from 'bcryptjs';
import { Model } from 'mongoose';
import { RoleEnum } from '../../../../roles/roles.enum';
import { StatusEnum } from '../../../../statuses/statuses.enum';
import { UserSchemaClass } from '../../../../users/infrastructure/persistence/document/entities/user.schema';

@Injectable()
export class UserSeedService {
  constructor(
    @InjectModel(UserSchemaClass.name)
    private readonly model: Model<UserSchemaClass>,
  ) {}

  async run() {
    const admin = await this.model.findOne({
      email: 'admin@example.com',
    });

    if (!admin) {
      const salt = await bcrypt.genSalt();
      const password = await bcrypt.hash('secret', salt);

      const data = new this.model({
        email: 'admin@example.com',
        password: password,
        firstName: 'Super',
        lastName: 'Admin',
        role: {
          _id: RoleEnum.admin.toString(),
        },
        status: {
          _id: StatusEnum.active.toString(),
        },
      });
      await data.save();
    }

    const user = await this.model.findOne({
      email: 'john.doe@example.com',
    });

    if (!user) {
      const salt = await bcrypt.genSalt();
      const password = await bcrypt.hash('secret', salt);

      const data = new this.model({
        email: 'john.doe@example.com',
        password: password,
        firstName: 'John',
        lastName: 'Doe',
        role: {
          _id: RoleEnum.user.toString(),
        },
        status: {
          _id: StatusEnum.active.toString(),
        },
      });

      await data.save();
    }
  }
}

================
File: backend/src/database/seeds/document/run-seed.ts
================
import { NestFactory } from '@nestjs/core';
import { UserSeedService } from './user/user-seed.service';

import { SeedModule } from './seed.module';

const runSeed = async () => {
  const app = await NestFactory.create(SeedModule);

  // run
  await app.get(UserSeedService).run();

  await app.close();
};

void runSeed();

================
File: backend/src/database/seeds/document/seed.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';

import { MongooseModule } from '@nestjs/mongoose';

import { UserSeedModule } from './user/user-seed.module';
import appConfig from '../../../config/app.config';
import databaseConfig from '../../config/database.config';
import { MongooseConfigService } from '../../mongoose-config.service';

@Module({
  imports: [
    UserSeedModule,
    ConfigModule.forRoot({
      isGlobal: true,
      load: [databaseConfig, appConfig],
      envFilePath: ['.env'],
    }),
    MongooseModule.forRootAsync({
      useClass: MongooseConfigService,
    }),
  ],
})
export class SeedModule {}

================
File: backend/src/database/seeds/relational/role/role-seed.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

import { RoleSeedService } from './role-seed.service';
import { RoleEntity } from '../../../../roles/infrastructure/persistence/relational/entities/role.entity';

@Module({
  imports: [TypeOrmModule.forFeature([RoleEntity])],
  providers: [RoleSeedService],
  exports: [RoleSeedService],
})
export class RoleSeedModule {}

================
File: backend/src/database/seeds/relational/role/role-seed.service.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { RoleEntity } from '../../../../roles/infrastructure/persistence/relational/entities/role.entity';
import { RoleEnum } from '../../../../roles/roles.enum';

@Injectable()
export class RoleSeedService {
  constructor(
    @InjectRepository(RoleEntity)
    private repository: Repository<RoleEntity>,
  ) {}

  async run() {
    const countUser = await this.repository.count({
      where: {
        id: RoleEnum.user,
      },
    });

    if (!countUser) {
      await this.repository.save(
        this.repository.create({
          id: RoleEnum.user,
          name: 'User',
        }),
      );
    }

    const countAdmin = await this.repository.count({
      where: {
        id: RoleEnum.admin,
      },
    });

    if (!countAdmin) {
      await this.repository.save(
        this.repository.create({
          id: RoleEnum.admin,
          name: 'Admin',
        }),
      );
    }
  }
}

================
File: backend/src/database/seeds/relational/status/status-seed.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { StatusSeedService } from './status-seed.service';
import { StatusEntity } from '../../../../statuses/infrastructure/persistence/relational/entities/status.entity';

@Module({
  imports: [TypeOrmModule.forFeature([StatusEntity])],
  providers: [StatusSeedService],
  exports: [StatusSeedService],
})
export class StatusSeedModule {}

================
File: backend/src/database/seeds/relational/status/status-seed.service.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { StatusEntity } from '../../../../statuses/infrastructure/persistence/relational/entities/status.entity';
import { StatusEnum } from '../../../../statuses/statuses.enum';

@Injectable()
export class StatusSeedService {
  constructor(
    @InjectRepository(StatusEntity)
    private repository: Repository<StatusEntity>,
  ) {}

  async run() {
    const count = await this.repository.count();

    if (!count) {
      await this.repository.save([
        this.repository.create({
          id: StatusEnum.active,
          name: 'Active',
        }),
        this.repository.create({
          id: StatusEnum.inactive,
          name: 'Inactive',
        }),
      ]);
    }
  }
}

================
File: backend/src/database/seeds/relational/user/user-seed.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

import { UserSeedService } from './user-seed.service';
import { UserEntity } from '../../../../users/infrastructure/persistence/relational/entities/user.entity';

@Module({
  imports: [TypeOrmModule.forFeature([UserEntity])],
  providers: [UserSeedService],
  exports: [UserSeedService],
})
export class UserSeedModule {}

================
File: backend/src/database/seeds/relational/user/user-seed.service.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';

import { Repository } from 'typeorm';
import bcrypt from 'bcryptjs';
import { RoleEnum } from '../../../../roles/roles.enum';
import { StatusEnum } from '../../../../statuses/statuses.enum';
import { UserEntity } from '../../../../users/infrastructure/persistence/relational/entities/user.entity';

@Injectable()
export class UserSeedService {
  constructor(
    @InjectRepository(UserEntity)
    private repository: Repository<UserEntity>,
  ) {}

  async run() {
    const countAdmin = await this.repository.count({
      where: {
        role: {
          id: RoleEnum.admin,
        },
      },
    });

    if (!countAdmin) {
      const salt = await bcrypt.genSalt();
      const password = await bcrypt.hash('secret', salt);

      await this.repository.save(
        this.repository.create({
          firstName: 'Super',
          lastName: 'Admin',
          email: 'admin@example.com',
          password,
          role: {
            id: RoleEnum.admin,
            name: 'Admin',
          },
          status: {
            id: StatusEnum.active,
            name: 'Active',
          },
        }),
      );
    }

    const countUser = await this.repository.count({
      where: {
        role: {
          id: RoleEnum.user,
        },
      },
    });

    if (!countUser) {
      const salt = await bcrypt.genSalt();
      const password = await bcrypt.hash('secret', salt);

      await this.repository.save(
        this.repository.create({
          firstName: 'John',
          lastName: 'Doe',
          email: 'john.doe@example.com',
          password,
          role: {
            id: RoleEnum.user,
            name: 'Admin',
          },
          status: {
            id: StatusEnum.active,
            name: 'Active',
          },
        }),
      );
    }
  }
}

================
File: backend/src/database/seeds/relational/run-seed.ts
================
import { NestFactory } from '@nestjs/core';
import { RoleSeedService } from './role/role-seed.service';
import { SeedModule } from './seed.module';
import { StatusSeedService } from './status/status-seed.service';
import { UserSeedService } from './user/user-seed.service';

const runSeed = async () => {
  const app = await NestFactory.create(SeedModule);

  // run
  await app.get(RoleSeedService).run();
  await app.get(StatusSeedService).run();
  await app.get(UserSeedService).run();

  await app.close();
};

void runSeed();

================
File: backend/src/database/seeds/relational/seed.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';

import { DataSource, DataSourceOptions } from 'typeorm';
import { TypeOrmConfigService } from '../../typeorm-config.service';
import { RoleSeedModule } from './role/role-seed.module';
import { StatusSeedModule } from './status/status-seed.module';
import { UserSeedModule } from './user/user-seed.module';
import databaseConfig from '../../config/database.config';
import appConfig from '../../../config/app.config';

@Module({
  imports: [
    RoleSeedModule,
    StatusSeedModule,
    UserSeedModule,
    ConfigModule.forRoot({
      isGlobal: true,
      load: [databaseConfig, appConfig],
      envFilePath: ['.env'],
    }),
    TypeOrmModule.forRootAsync({
      useClass: TypeOrmConfigService,
      dataSourceFactory: async (options: DataSourceOptions) => {
        return new DataSource(options).initialize();
      },
    }),
  ],
})
export class SeedModule {}

================
File: backend/src/database/data-source.ts
================
import 'reflect-metadata';
import { DataSource, DataSourceOptions } from 'typeorm';

export const AppDataSource = new DataSource({
  type: process.env.DATABASE_TYPE,
  url: process.env.DATABASE_URL,
  host: process.env.DATABASE_HOST,
  port: process.env.DATABASE_PORT
    ? parseInt(process.env.DATABASE_PORT, 10)
    : 5432,
  username: process.env.DATABASE_USERNAME,
  password: process.env.DATABASE_PASSWORD,
  database: process.env.DATABASE_NAME,
  synchronize: process.env.DATABASE_SYNCHRONIZE === 'true',
  dropSchema: false,
  keepConnectionAlive: true,
  logging: process.env.NODE_ENV !== 'production',
  entities: [__dirname + '/../**/*.entity{.ts,.js}'],
  migrations: [__dirname + '/migrations/**/*{.ts,.js}'],
  cli: {
    entitiesDir: 'src',

    subscribersDir: 'subscriber',
  },
  extra: {
    // based on https://node-postgres.com/api/pool
    // max connection pool size
    max: process.env.DATABASE_MAX_CONNECTIONS
      ? parseInt(process.env.DATABASE_MAX_CONNECTIONS, 10)
      : 100,
    ssl:
      process.env.DATABASE_SSL_ENABLED === 'true'
        ? {
            rejectUnauthorized:
              process.env.DATABASE_REJECT_UNAUTHORIZED === 'true',
            ca: process.env.DATABASE_CA ?? undefined,
            key: process.env.DATABASE_KEY ?? undefined,
            cert: process.env.DATABASE_CERT ?? undefined,
          }
        : undefined,
  },
} as DataSourceOptions);

================
File: backend/src/database/mongoose-config.service.ts
================
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import {
  MongooseModuleOptions,
  MongooseOptionsFactory,
} from '@nestjs/mongoose';
import { AllConfigType } from '../config/config.type';
import mongooseAutoPopulate from 'mongoose-autopopulate';

@Injectable()
export class MongooseConfigService implements MongooseOptionsFactory {
  constructor(private configService: ConfigService<AllConfigType>) {}

  createMongooseOptions(): MongooseModuleOptions {
    return {
      uri: this.configService.get('database.url', { infer: true }),
      dbName: this.configService.get('database.name', { infer: true }),
      user: this.configService.get('database.username', { infer: true }),
      pass: this.configService.get('database.password', { infer: true }),
      connectionFactory(connection) {
        connection.plugin(mongooseAutoPopulate);
        return connection;
      },
    };
  }
}

================
File: backend/src/database/typeorm-config.service.ts
================
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class TypeOrmConfigService implements TypeOrmOptionsFactory {
  constructor(private configService: ConfigService<AllConfigType>) {}

  createTypeOrmOptions(): TypeOrmModuleOptions {
    return {
      type: this.configService.get('database.type', { infer: true }),
      url: this.configService.get('database.url', { infer: true }),
      host: this.configService.get('database.host', { infer: true }),
      port: this.configService.get('database.port', { infer: true }),
      username: this.configService.get('database.username', { infer: true }),
      password: this.configService.get('database.password', { infer: true }),
      database: this.configService.get('database.name', { infer: true }),
      synchronize: this.configService.get('database.synchronize', {
        infer: true,
      }),
      dropSchema: false,
      keepConnectionAlive: true,
      logging:
        this.configService.get('app.nodeEnv', { infer: true }) !== 'production',
      entities: [__dirname + '/../**/*.entity{.ts,.js}'],
      migrations: [__dirname + '/migrations/**/*{.ts,.js}'],
      cli: {
        entitiesDir: 'src',

        subscribersDir: 'subscriber',
      },
      extra: {
        // based on https://node-postgres.com/apis/pool
        // max connection pool size
        max: this.configService.get('database.maxConnections', { infer: true }),
        ssl: this.configService.get('database.sslEnabled', { infer: true })
          ? {
              rejectUnauthorized: this.configService.get(
                'database.rejectUnauthorized',
                { infer: true },
              ),
              ca:
                this.configService.get('database.ca', { infer: true }) ??
                undefined,
              key:
                this.configService.get('database.key', { infer: true }) ??
                undefined,
              cert:
                this.configService.get('database.cert', { infer: true }) ??
                undefined,
            }
          : undefined,
      },
    } as TypeOrmModuleOptions;
  }
}

================
File: backend/src/files/config/file-config.type.ts
================
export enum FileDriver {
  LOCAL = 'local',
  S3 = 's3',
  S3_PRESIGNED = 's3-presigned',
}

export type FileConfig = {
  driver: FileDriver;
  accessKeyId?: string;
  secretAccessKey?: string;
  awsDefaultS3Bucket?: string;
  awsS3Region?: string;
  maxFileSize: number;
};

================
File: backend/src/files/config/file.config.ts
================
import { registerAs } from '@nestjs/config';

import { IsEnum, IsString, ValidateIf } from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { FileDriver, FileConfig } from './file-config.type';

class EnvironmentVariablesValidator {
  @IsEnum(FileDriver)
  FILE_DRIVER: FileDriver;

  @ValidateIf((envValues) =>
    [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER),
  )
  @IsString()
  ACCESS_KEY_ID: string;

  @ValidateIf((envValues) =>
    [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER),
  )
  @IsString()
  SECRET_ACCESS_KEY: string;

  @ValidateIf((envValues) =>
    [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER),
  )
  @IsString()
  AWS_DEFAULT_S3_BUCKET: string;

  @ValidateIf((envValues) =>
    [FileDriver.S3, FileDriver.S3_PRESIGNED].includes(envValues.FILE_DRIVER),
  )
  @IsString()
  AWS_S3_REGION: string;
}

export default registerAs<FileConfig>('file', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    driver:
      (process.env.FILE_DRIVER as FileDriver | undefined) ?? FileDriver.LOCAL,
    accessKeyId: process.env.ACCESS_KEY_ID,
    secretAccessKey: process.env.SECRET_ACCESS_KEY,
    awsDefaultS3Bucket: process.env.AWS_DEFAULT_S3_BUCKET,
    awsS3Region: process.env.AWS_S3_REGION,
    maxFileSize: 5242880, // 5mb
  };
});

================
File: backend/src/files/domain/file.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { Allow } from 'class-validator';
import { Transform } from 'class-transformer';
import fileConfig from '../config/file.config';
import { FileConfig, FileDriver } from '../config/file-config.type';

import { GetObjectCommand, S3Client } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { AppConfig } from '../../config/app-config.type';
import appConfig from '../../config/app.config';

export class FileType {
  @ApiProperty({
    type: String,
    example: 'cbcfa8b8-3a25-4adb-a9c6-e325f0d0f3ae',
  })
  @Allow()
  id: string;

  @ApiProperty({
    type: String,
    example: 'https://example.com/path/to/file.jpg',
  })
  @Transform(
    ({ value }) => {
      if ((fileConfig() as FileConfig).driver === FileDriver.LOCAL) {
        return (appConfig() as AppConfig).backendDomain + value;
      } else if (
        [FileDriver.S3_PRESIGNED, FileDriver.S3].includes(
          (fileConfig() as FileConfig).driver,
        )
      ) {
        const s3 = new S3Client({
          region: (fileConfig() as FileConfig).awsS3Region ?? '',
          credentials: {
            accessKeyId: (fileConfig() as FileConfig).accessKeyId ?? '',
            secretAccessKey: (fileConfig() as FileConfig).secretAccessKey ?? '',
          },
        });

        const command = new GetObjectCommand({
          Bucket: (fileConfig() as FileConfig).awsDefaultS3Bucket ?? '',
          Key: value,
        });

        return getSignedUrl(s3, command, { expiresIn: 3600 });
      }

      return value;
    },
    {
      toPlainOnly: true,
    },
  )
  path: string;
}

================
File: backend/src/files/dto/file.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty, IsString } from 'class-validator';

export class FileDto {
  @ApiProperty()
  @IsString()
  @IsNotEmpty()
  id: string;

  path: string;
}

================
File: backend/src/files/infrastructure/persistence/document/entities/file.schema.ts
================
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';
import { EntityDocumentHelper } from '../../../../../utils/document-entity-helper';

export type FileSchemaDocument = HydratedDocument<FileSchemaClass>;

@Schema({
  toJSON: {
    virtuals: true,
    getters: true,
  },
})
export class FileSchemaClass extends EntityDocumentHelper {
  @Prop()
  path: string;
}

export const FileSchema = SchemaFactory.createForClass(FileSchemaClass);

================
File: backend/src/files/infrastructure/persistence/document/mappers/file.mapper.ts
================
import { FileType } from '../../../../domain/file';
import { FileSchemaClass } from '../entities/file.schema';

export class FileMapper {
  static toDomain(raw: FileSchemaClass): FileType {
    const domainEntity = new FileType();
    domainEntity.id = raw._id.toString();
    domainEntity.path = raw.path;
    return domainEntity;
  }
  static toPersistence(domainEntity: FileType): FileSchemaClass {
    const persistenceSchema = new FileSchemaClass();
    if (domainEntity.id) {
      persistenceSchema._id = domainEntity.id;
    }
    persistenceSchema.path = domainEntity.path;
    return persistenceSchema;
  }
}

================
File: backend/src/files/infrastructure/persistence/document/repositories/file.repository.ts
================
import { Injectable } from '@nestjs/common';

import { FileRepository } from '../../file.repository';
import { FileSchemaClass } from '../entities/file.schema';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { FileType } from '../../../../domain/file';

import { FileMapper } from '../mappers/file.mapper';
import { NullableType } from '../../../../../utils/types/nullable.type';

@Injectable()
export class FileDocumentRepository implements FileRepository {
  constructor(
    @InjectModel(FileSchemaClass.name)
    private fileModel: Model<FileSchemaClass>,
  ) {}

  async create(data: Omit<FileType, 'id'>): Promise<FileType> {
    const createdFile = new this.fileModel(data);
    const fileObject = await createdFile.save();
    return FileMapper.toDomain(fileObject);
  }

  async findById(id: FileType['id']): Promise<NullableType<FileType>> {
    const fileObject = await this.fileModel.findById(id);
    return fileObject ? FileMapper.toDomain(fileObject) : null;
  }

  async findByIds(ids: FileType['id'][]): Promise<FileType[]> {
    const fileObjects = await this.fileModel.find({ _id: { $in: ids } });
    return fileObjects.map((fileObject) => FileMapper.toDomain(fileObject));
  }
}

================
File: backend/src/files/infrastructure/persistence/document/document-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { FileSchema, FileSchemaClass } from './entities/file.schema';
import { FileRepository } from '../file.repository';
import { FileDocumentRepository } from './repositories/file.repository';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: FileSchemaClass.name, schema: FileSchema },
    ]),
  ],
  providers: [
    {
      provide: FileRepository,
      useClass: FileDocumentRepository,
    },
  ],
  exports: [FileRepository],
})
export class DocumentFilePersistenceModule {}

================
File: backend/src/files/infrastructure/persistence/relational/entities/file.entity.ts
================
import {
  // typeorm decorators here
  Column,
  Entity,
  PrimaryGeneratedColumn,
} from 'typeorm';
import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({ name: 'file' })
export class FileEntity extends EntityRelationalHelper {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  path: string;
}

================
File: backend/src/files/infrastructure/persistence/relational/mappers/file.mapper.ts
================
import { FileType } from '../../../../domain/file';
import { FileEntity } from '../entities/file.entity';

export class FileMapper {
  static toDomain(raw: FileEntity): FileType {
    const domainEntity = new FileType();
    domainEntity.id = raw.id;
    domainEntity.path = raw.path;
    return domainEntity;
  }

  static toPersistence(domainEntity: FileType): FileEntity {
    const persistenceEntity = new FileEntity();
    persistenceEntity.id = domainEntity.id;
    persistenceEntity.path = domainEntity.path;
    return persistenceEntity;
  }
}

================
File: backend/src/files/infrastructure/persistence/relational/repositories/file.repository.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { FileEntity } from '../entities/file.entity';
import { In, Repository } from 'typeorm';
import { FileRepository } from '../../file.repository';

import { FileMapper } from '../mappers/file.mapper';
import { FileType } from '../../../../domain/file';
import { NullableType } from '../../../../../utils/types/nullable.type';

@Injectable()
export class FileRelationalRepository implements FileRepository {
  constructor(
    @InjectRepository(FileEntity)
    private readonly fileRepository: Repository<FileEntity>,
  ) {}

  async create(data: FileType): Promise<FileType> {
    const persistenceModel = FileMapper.toPersistence(data);
    return this.fileRepository.save(
      this.fileRepository.create(persistenceModel),
    );
  }

  async findById(id: FileType['id']): Promise<NullableType<FileType>> {
    const entity = await this.fileRepository.findOne({
      where: {
        id: id,
      },
    });

    return entity ? FileMapper.toDomain(entity) : null;
  }

  async findByIds(ids: FileType['id'][]): Promise<FileType[]> {
    const entities = await this.fileRepository.find({
      where: {
        id: In(ids),
      },
    });

    return entities.map((entity) => FileMapper.toDomain(entity));
  }
}

================
File: backend/src/files/infrastructure/persistence/relational/relational-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { FileEntity } from './entities/file.entity';
import { FileRepository } from '../file.repository';
import { FileRelationalRepository } from './repositories/file.repository';

@Module({
  imports: [TypeOrmModule.forFeature([FileEntity])],
  providers: [
    {
      provide: FileRepository,
      useClass: FileRelationalRepository,
    },
  ],
  exports: [FileRepository],
})
export class RelationalFilePersistenceModule {}

================
File: backend/src/files/infrastructure/persistence/file.repository.ts
================
import { NullableType } from '../../../utils/types/nullable.type';
import { FileType } from '../../domain/file';

export abstract class FileRepository {
  abstract create(data: Omit<FileType, 'id'>): Promise<FileType>;

  abstract findById(id: FileType['id']): Promise<NullableType<FileType>>;

  abstract findByIds(ids: FileType['id'][]): Promise<FileType[]>;
}

================
File: backend/src/files/infrastructure/uploader/local/dto/file-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { FileType } from '../../../../domain/file';

export class FileResponseDto {
  @ApiProperty({
    type: () => FileType,
  })
  file: FileType;
}

================
File: backend/src/files/infrastructure/uploader/local/files.controller.ts
================
import {
  Controller,
  Get,
  Param,
  Post,
  Response,
  UploadedFile,
  UseGuards,
  UseInterceptors,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import {
  ApiBearerAuth,
  ApiBody,
  ApiConsumes,
  ApiCreatedResponse,
  ApiExcludeEndpoint,
  ApiTags,
} from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';
import { FilesLocalService } from './files.service';
import { FileResponseDto } from './dto/file-response.dto';

@ApiTags('Files')
@Controller({
  path: 'files',
  version: '1',
})
export class FilesLocalController {
  constructor(private readonly filesService: FilesLocalService) {}

  @ApiCreatedResponse({
    type: FileResponseDto,
  })
  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Post('upload')
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        file: {
          type: 'string',
          format: 'binary',
        },
      },
    },
  })
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(
    @UploadedFile() file: Express.Multer.File,
  ): Promise<FileResponseDto> {
    return this.filesService.create(file);
  }

  @Get(':path')
  @ApiExcludeEndpoint()
  download(@Param('path') path, @Response() response) {
    return response.sendFile(path, { root: './files' });
  }
}

================
File: backend/src/files/infrastructure/uploader/local/files.module.ts
================
import {
  HttpStatus,
  Module,
  UnprocessableEntityException,
} from '@nestjs/common';
import { FilesLocalController } from './files.controller';
import { MulterModule } from '@nestjs/platform-express';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { diskStorage } from 'multer';
import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';

import { FilesLocalService } from './files.service';

import { DocumentFilePersistenceModule } from '../../persistence/document/document-persistence.module';
import { RelationalFilePersistenceModule } from '../../persistence/relational/relational-persistence.module';
import { AllConfigType } from '../../../../config/config.type';
import { DatabaseConfig } from '../../../../database/config/database-config.type';
import databaseConfig from '../../../../database/config/database.config';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentFilePersistenceModule
  : RelationalFilePersistenceModule;
// </database-block>

@Module({
  imports: [
    infrastructurePersistenceModule,
    MulterModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService<AllConfigType>) => {
        return {
          fileFilter: (request, file, callback) => {
            if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
              return callback(
                new UnprocessableEntityException({
                  status: HttpStatus.UNPROCESSABLE_ENTITY,
                  errors: {
                    file: `cantUploadFileType`,
                  },
                }),
                false,
              );
            }

            callback(null, true);
          },
          storage: diskStorage({
            destination: './files',
            filename: (request, file, callback) => {
              callback(
                null,
                `${randomStringGenerator()}.${file.originalname
                  .split('.')
                  .pop()
                  ?.toLowerCase()}`,
              );
            },
          }),
          limits: {
            fileSize: configService.get('file.maxFileSize', { infer: true }),
          },
        };
      },
    }),
  ],
  controllers: [FilesLocalController],
  providers: [ConfigModule, ConfigService, FilesLocalService],
  exports: [FilesLocalService],
})
export class FilesLocalModule {}

================
File: backend/src/files/infrastructure/uploader/local/files.service.ts
================
import {
  HttpStatus,
  Injectable,
  UnprocessableEntityException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

import { FileRepository } from '../../persistence/file.repository';
import { AllConfigType } from '../../../../config/config.type';
import { FileType } from '../../../domain/file';

@Injectable()
export class FilesLocalService {
  constructor(
    private readonly configService: ConfigService<AllConfigType>,
    private readonly fileRepository: FileRepository,
  ) {}

  async create(file: Express.Multer.File): Promise<{ file: FileType }> {
    if (!file) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          file: 'selectFile',
        },
      });
    }

    return {
      file: await this.fileRepository.create({
        path: `/${this.configService.get('app.apiPrefix', {
          infer: true,
        })}/v1/${file.path}`,
      }),
    };
  }
}

================
File: backend/src/files/infrastructure/uploader/s3/dto/file-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { FileType } from '../../../../domain/file';

export class FileResponseDto {
  @ApiProperty({
    type: () => FileType,
  })
  file: FileType;
}

================
File: backend/src/files/infrastructure/uploader/s3/files.controller.ts
================
import {
  Controller,
  Post,
  UploadedFile,
  UseGuards,
  UseInterceptors,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import {
  ApiBearerAuth,
  ApiBody,
  ApiConsumes,
  ApiCreatedResponse,
  ApiTags,
} from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';
import { FilesS3Service } from './files.service';
import { FileResponseDto } from './dto/file-response.dto';

@ApiTags('Files')
@Controller({
  path: 'files',
  version: '1',
})
export class FilesS3Controller {
  constructor(private readonly filesService: FilesS3Service) {}

  @ApiCreatedResponse({
    type: FileResponseDto,
  })
  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Post('upload')
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        file: {
          type: 'string',
          format: 'binary',
        },
      },
    },
  })
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(
    @UploadedFile() file: Express.MulterS3.File,
  ): Promise<FileResponseDto> {
    return this.filesService.create(file);
  }
}

================
File: backend/src/files/infrastructure/uploader/s3/files.module.ts
================
import {
  HttpStatus,
  Module,
  UnprocessableEntityException,
} from '@nestjs/common';
import { FilesS3Controller } from './files.controller';
import { MulterModule } from '@nestjs/platform-express';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';
import { S3Client } from '@aws-sdk/client-s3';
import multerS3 from 'multer-s3';

import { FilesS3Service } from './files.service';

import { DocumentFilePersistenceModule } from '../../persistence/document/document-persistence.module';
import { RelationalFilePersistenceModule } from '../../persistence/relational/relational-persistence.module';
import { AllConfigType } from '../../../../config/config.type';
import { DatabaseConfig } from '../../../../database/config/database-config.type';
import databaseConfig from '../../../../database/config/database.config';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentFilePersistenceModule
  : RelationalFilePersistenceModule;
// </database-block>

@Module({
  imports: [
    infrastructurePersistenceModule,
    MulterModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService<AllConfigType>) => {
        const s3 = new S3Client({
          region: configService.get('file.awsS3Region', { infer: true }),
          credentials: {
            accessKeyId: configService.getOrThrow('file.accessKeyId', {
              infer: true,
            }),
            secretAccessKey: configService.getOrThrow('file.secretAccessKey', {
              infer: true,
            }),
          },
        });

        return {
          fileFilter: (request, file, callback) => {
            if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
              return callback(
                new UnprocessableEntityException({
                  status: HttpStatus.UNPROCESSABLE_ENTITY,
                  errors: {
                    file: `cantUploadFileType`,
                  },
                }),
                false,
              );
            }

            callback(null, true);
          },
          storage: multerS3({
            s3: s3,
            bucket: configService.getOrThrow('file.awsDefaultS3Bucket', {
              infer: true,
            }),
            contentType: multerS3.AUTO_CONTENT_TYPE,
            key: (request, file, callback) => {
              callback(
                null,
                `${randomStringGenerator()}.${file.originalname
                  .split('.')
                  .pop()
                  ?.toLowerCase()}`,
              );
            },
          }),
          limits: {
            fileSize: configService.get('file.maxFileSize', { infer: true }),
          },
        };
      },
    }),
  ],
  controllers: [FilesS3Controller],
  providers: [FilesS3Service],
  exports: [FilesS3Service],
})
export class FilesS3Module {}

================
File: backend/src/files/infrastructure/uploader/s3/files.service.ts
================
import {
  HttpStatus,
  Injectable,
  UnprocessableEntityException,
} from '@nestjs/common';
import { FileRepository } from '../../persistence/file.repository';
import { FileType } from '../../../domain/file';

@Injectable()
export class FilesS3Service {
  constructor(private readonly fileRepository: FileRepository) {}

  async create(file: Express.MulterS3.File): Promise<{ file: FileType }> {
    if (!file) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          file: 'selectFile',
        },
      });
    }

    return {
      file: await this.fileRepository.create({
        path: file.key,
      }),
    };
  }
}

================
File: backend/src/files/infrastructure/uploader/s3-presigned/dto/file-response.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { FileType } from '../../../../domain/file';

export class FileResponseDto {
  @ApiProperty({
    type: () => FileType,
  })
  file: FileType;

  @ApiProperty({
    type: String,
  })
  uploadSignedUrl: string;
}

================
File: backend/src/files/infrastructure/uploader/s3-presigned/dto/file.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNumber, IsString } from 'class-validator';

export class FileUploadDto {
  @ApiProperty({ example: 'image.jpg' })
  @IsString()
  fileName: string;

  @ApiProperty({ example: 138723 })
  @IsNumber()
  fileSize: number;
}

================
File: backend/src/files/infrastructure/uploader/s3-presigned/files.controller.ts
================
import { Body, Controller, Post, UseGuards } from '@nestjs/common';
import { ApiBearerAuth, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';
import { FilesS3PresignedService } from './files.service';
import { FileUploadDto } from './dto/file.dto';
import { FileResponseDto } from './dto/file-response.dto';

@ApiTags('Files')
@Controller({
  path: 'files',
  version: '1',
})
export class FilesS3PresignedController {
  constructor(private readonly filesService: FilesS3PresignedService) {}

  @ApiCreatedResponse({
    type: FileResponseDto,
  })
  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Post('upload')
  async uploadFile(@Body() file: FileUploadDto) {
    return this.filesService.create(file);
  }
}

================
File: backend/src/files/infrastructure/uploader/s3-presigned/files.module.ts
================
import {
  HttpStatus,
  Module,
  UnprocessableEntityException,
} from '@nestjs/common';
import { FilesS3PresignedController } from './files.controller';
import { MulterModule } from '@nestjs/platform-express';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';
import { S3Client } from '@aws-sdk/client-s3';
import multerS3 from 'multer-s3';

import { FilesS3PresignedService } from './files.service';

import { DocumentFilePersistenceModule } from '../../persistence/document/document-persistence.module';
import { RelationalFilePersistenceModule } from '../../persistence/relational/relational-persistence.module';
import { AllConfigType } from '../../../../config/config.type';
import { DatabaseConfig } from '../../../../database/config/database-config.type';
import databaseConfig from '../../../../database/config/database.config';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentFilePersistenceModule
  : RelationalFilePersistenceModule;
// </database-block>

@Module({
  imports: [
    infrastructurePersistenceModule,
    MulterModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService<AllConfigType>) => {
        const s3 = new S3Client({
          region: configService.get('file.awsS3Region', { infer: true }),
          credentials: {
            accessKeyId: configService.getOrThrow('file.accessKeyId', {
              infer: true,
            }),
            secretAccessKey: configService.getOrThrow('file.secretAccessKey', {
              infer: true,
            }),
          },
        });

        return {
          fileFilter: (request, file, callback) => {
            if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
              return callback(
                new UnprocessableEntityException({
                  status: HttpStatus.UNPROCESSABLE_ENTITY,
                  errors: {
                    file: `cantUploadFileType`,
                  },
                }),
                false,
              );
            }

            callback(null, true);
          },
          storage: multerS3({
            s3: s3,
            bucket: '',
            acl: 'public-read',
            contentType: multerS3.AUTO_CONTENT_TYPE,
            key: (request, file, callback) => {
              callback(
                null,
                `${randomStringGenerator()}.${file.originalname
                  .split('.')
                  .pop()
                  ?.toLowerCase()}`,
              );
            },
          }),
          limits: {
            fileSize: configService.get('file.maxFileSize', { infer: true }),
          },
        };
      },
    }),
  ],
  controllers: [FilesS3PresignedController],
  providers: [ConfigModule, ConfigService, FilesS3PresignedService],
  exports: [FilesS3PresignedService],
})
export class FilesS3PresignedModule {}

================
File: backend/src/files/infrastructure/uploader/s3-presigned/files.service.ts
================
import {
  HttpStatus,
  Injectable,
  PayloadTooLargeException,
  UnprocessableEntityException,
} from '@nestjs/common';
import { FileRepository } from '../../persistence/file.repository';

import { FileUploadDto } from './dto/file.dto';
import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';
import { ConfigService } from '@nestjs/config';
import { FileType } from '../../../domain/file';

@Injectable()
export class FilesS3PresignedService {
  private s3: S3Client;

  constructor(
    private readonly fileRepository: FileRepository,
    private readonly configService: ConfigService,
  ) {
    this.s3 = new S3Client({
      region: configService.get('file.awsS3Region', { infer: true }),
      credentials: {
        accessKeyId: configService.getOrThrow('file.accessKeyId', {
          infer: true,
        }),
        secretAccessKey: configService.getOrThrow('file.secretAccessKey', {
          infer: true,
        }),
      },
    });
  }

  async create(
    file: FileUploadDto,
  ): Promise<{ file: FileType; uploadSignedUrl: string }> {
    if (!file) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          file: 'selectFile',
        },
      });
    }

    if (!file.fileName.match(/\.(jpg|jpeg|png|gif)$/i)) {
      throw new UnprocessableEntityException({
        status: HttpStatus.UNPROCESSABLE_ENTITY,
        errors: {
          file: `cantUploadFileType`,
        },
      });
    }

    if (
      file.fileSize >
      (this.configService.get('file.maxFileSize', {
        infer: true,
      }) || 0)
    ) {
      throw new PayloadTooLargeException({
        statusCode: HttpStatus.PAYLOAD_TOO_LARGE,
        error: 'Payload Too Large',
        message: 'File too large',
      });
    }

    const key = `${randomStringGenerator()}.${file.fileName
      .split('.')
      .pop()
      ?.toLowerCase()}`;

    const command = new PutObjectCommand({
      Bucket: this.configService.getOrThrow('file.awsDefaultS3Bucket', {
        infer: true,
      }),
      Key: key,
      ContentLength: file.fileSize,
    });
    const signedUrl = await getSignedUrl(this.s3, command, { expiresIn: 3600 });
    const data = await this.fileRepository.create({
      path: key,
    });

    return {
      file: data,
      uploadSignedUrl: signedUrl,
    };
  }
}

================
File: backend/src/files/files.module.ts
================
import { Module } from '@nestjs/common';

import { DocumentFilePersistenceModule } from './infrastructure/persistence/document/document-persistence.module';
import { RelationalFilePersistenceModule } from './infrastructure/persistence/relational/relational-persistence.module';
import { FilesService } from './files.service';
import fileConfig from './config/file.config';
import { FileConfig, FileDriver } from './config/file-config.type';
import { FilesLocalModule } from './infrastructure/uploader/local/files.module';
import { FilesS3Module } from './infrastructure/uploader/s3/files.module';
import { FilesS3PresignedModule } from './infrastructure/uploader/s3-presigned/files.module';
import { DatabaseConfig } from '../database/config/database-config.type';
import databaseConfig from '../database/config/database.config';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentFilePersistenceModule
  : RelationalFilePersistenceModule;
// </database-block>

const infrastructureUploaderModule =
  (fileConfig() as FileConfig).driver === FileDriver.LOCAL
    ? FilesLocalModule
    : (fileConfig() as FileConfig).driver === FileDriver.S3
      ? FilesS3Module
      : FilesS3PresignedModule;

@Module({
  imports: [infrastructurePersistenceModule, infrastructureUploaderModule],
  providers: [FilesService],
  exports: [FilesService, infrastructurePersistenceModule],
})
export class FilesModule {}

================
File: backend/src/files/files.service.ts
================
import { Injectable } from '@nestjs/common';

import { FileRepository } from './infrastructure/persistence/file.repository';
import { FileType } from './domain/file';
import { NullableType } from '../utils/types/nullable.type';

@Injectable()
export class FilesService {
  constructor(private readonly fileRepository: FileRepository) {}

  findById(id: FileType['id']): Promise<NullableType<FileType>> {
    return this.fileRepository.findById(id);
  }

  findByIds(ids: FileType['id'][]): Promise<FileType[]> {
    return this.fileRepository.findByIds(ids);
  }
}

================
File: backend/src/home/home.controller.ts
================
import { Controller, Get } from '@nestjs/common';
import { ApiTags } from '@nestjs/swagger';

import { HomeService } from './home.service';

@ApiTags('Home')
@Controller()
export class HomeController {
  constructor(private service: HomeService) {}

  @Get()
  appInfo() {
    return this.service.appInfo();
  }
}

================
File: backend/src/home/home.module.ts
================
import { Module } from '@nestjs/common';
import { HomeService } from './home.service';
import { HomeController } from './home.controller';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [ConfigModule],
  controllers: [HomeController],
  providers: [HomeService],
})
export class HomeModule {}

================
File: backend/src/home/home.service.ts
================
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class HomeService {
  constructor(private configService: ConfigService<AllConfigType>) {}

  appInfo() {
    return { name: this.configService.get('app.name', { infer: true }) };
  }
}

================
File: backend/src/i18n/en/common.json
================
{
  "confirmEmail": "Confirm email",
  "resetPassword": "Reset password"
}

================
File: backend/src/i18n/en/confirm-email.json
================
{
  "text1": "Hey!",
  "text2": "You’re almost ready to start enjoying",
  "text3": "Simply click the big green button below to verify your email address."
}

================
File: backend/src/i18n/en/confirm-new-email.json
================
{
  "text1": "Hey!",
  "text2": "Confirm your new email address.",
  "text3": "Simply click the big green button below to verify your email address."
}

================
File: backend/src/i18n/en/reset-password.json
================
{
  "text1": "Trouble signing in?",
  "text2": "Resetting your password is easy.",
  "text3": "Just press the button below and follow the instructions. We’ll have you up and running in no time.",
  "text4": "If you did not make this request then please ignore this email."
}

================
File: backend/src/mail/config/mail-config.type.ts
================
export type MailConfig = {
  port: number;
  host?: string;
  user?: string;
  password?: string;
  defaultEmail?: string;
  defaultName?: string;
  ignoreTLS: boolean;
  secure: boolean;
  requireTLS: boolean;
};

================
File: backend/src/mail/config/mail.config.ts
================
import { registerAs } from '@nestjs/config';

import {
  IsString,
  IsInt,
  Min,
  Max,
  IsOptional,
  IsBoolean,
  IsEmail,
} from 'class-validator';
import validateConfig from '../../utils/validate-config';
import { MailConfig } from './mail-config.type';

class EnvironmentVariablesValidator {
  @IsInt()
  @Min(0)
  @Max(65535)
  @IsOptional()
  MAIL_PORT: number;

  @IsString()
  MAIL_HOST: string;

  @IsString()
  @IsOptional()
  MAIL_USER: string;

  @IsString()
  @IsOptional()
  MAIL_PASSWORD: string;

  @IsEmail()
  MAIL_DEFAULT_EMAIL: string;

  @IsString()
  MAIL_DEFAULT_NAME: string;

  @IsBoolean()
  MAIL_IGNORE_TLS: boolean;

  @IsBoolean()
  MAIL_SECURE: boolean;

  @IsBoolean()
  MAIL_REQUIRE_TLS: boolean;
}

export default registerAs<MailConfig>('mail', () => {
  validateConfig(process.env, EnvironmentVariablesValidator);

  return {
    port: process.env.MAIL_PORT ? parseInt(process.env.MAIL_PORT, 10) : 587,
    host: process.env.MAIL_HOST,
    user: process.env.MAIL_USER,
    password: process.env.MAIL_PASSWORD,
    defaultEmail: process.env.MAIL_DEFAULT_EMAIL,
    defaultName: process.env.MAIL_DEFAULT_NAME,
    ignoreTLS: process.env.MAIL_IGNORE_TLS === 'true',
    secure: process.env.MAIL_SECURE === 'true',
    requireTLS: process.env.MAIL_REQUIRE_TLS === 'true',
  };
});

================
File: backend/src/mail/interfaces/mail-data.interface.ts
================
export interface MailData<T = never> {
  to: string;
  data: T;
}

================
File: backend/src/mail/mail-templates/activation.hbs
================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=">
    <title>{{title}}</title>
</head>

<body style="margin:0;font-family:arial">
    <table style="border:0;width:100%">
        <tr style="background:#eeeeee">
            <td style="padding:20px;color:#808080;text-align:center;font-size:40px;font-weight:600">
                {{app_name}}
            </td>
        </tr>
        <tr>
            <td style="padding:20px;color:#808080;font-size:16px;font-weight:100">
                {{text1}}<br>
                {{text2}} {{app_name}}.<br>
                {{text3}}
            </td>
        </tr>
        <tr>
            <td style="text-align:center">
                <a href="{{url}}"
                    style="display:inline-block;padding:20px;background:#00838f;text-decoration:none;color:#ffffff">{{actionTitle}}</a>
            </td>
        </tr>
    </table>
</body>

</html>

================
File: backend/src/mail/mail-templates/confirm-new-email.hbs
================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=">
    <title>{{title}}</title>
</head>

<body style="margin:0;font-family:arial">
    <table style="border:0;width:100%">
        <tr style="background:#eeeeee">
            <td style="padding:20px;color:#808080;text-align:center;font-size:40px;font-weight:600">
                {{app_name}}
            </td>
        </tr>
        <tr>
            <td style="padding:20px;color:#808080;font-size:16px;font-weight:100">
                {{text1}}<br>
                {{text2}}<br>
                {{text3}}
            </td>
        </tr>
        <tr>
            <td style="text-align:center">
                <a href="{{url}}"
                    style="display:inline-block;padding:20px;background:#00838f;text-decoration:none;color:#ffffff">{{actionTitle}}</a>
            </td>
        </tr>
    </table>
</body>

</html>

================
File: backend/src/mail/mail-templates/reset-password.hbs
================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=">
    <title>{{title}}</title>
</head>

<body style="margin:0;font-family:arial">
    <table style="border:0;width:100%">
        <tr style="background:#eeeeee">
            <td style="padding:20px;color:#808080;text-align:center;font-size:40px;font-weight:600">
                {{app_name}}
            </td>
        </tr>
        <tr>
            <td style="padding:20px;color:#808080;font-size:16px;font-weight:100">
                {{text1}}<br>
                {{text2}}<br>
                {{text3}}
            </td>
        </tr>
        <tr>
            <td style="text-align:center">
                <a href="{{url}}"
                    style="display:inline-block;padding:20px;background:#00838f;text-decoration:none;color:#ffffff">{{actionTitle}}</a>
            </td>
        </tr>
        <tr>
            <td style="padding:20px;color:#808080;font-size:16px;font-weight:100">
                {{text4}}
            </td>
        </tr>
    </table>
</body>

</html>

================
File: backend/src/mail/mail.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { MailService } from './mail.service';
import { MailerModule } from '../mailer/mailer.module';

@Module({
  imports: [ConfigModule, MailerModule],
  providers: [MailService],
  exports: [MailService],
})
export class MailModule {}

================
File: backend/src/mail/mail.service.ts
================
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { I18nContext } from 'nestjs-i18n';
import { MailData } from './interfaces/mail-data.interface';

import { MaybeType } from '../utils/types/maybe.type';
import { MailerService } from '../mailer/mailer.service';
import path from 'path';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class MailService {
  constructor(
    private readonly mailerService: MailerService,
    private readonly configService: ConfigService<AllConfigType>,
  ) {}

  async userSignUp(mailData: MailData<{ hash: string }>): Promise<void> {
    const i18n = I18nContext.current();
    let emailConfirmTitle: MaybeType<string>;
    let text1: MaybeType<string>;
    let text2: MaybeType<string>;
    let text3: MaybeType<string>;

    if (i18n) {
      [emailConfirmTitle, text1, text2, text3] = await Promise.all([
        i18n.t('common.confirmEmail'),
        i18n.t('confirm-email.text1'),
        i18n.t('confirm-email.text2'),
        i18n.t('confirm-email.text3'),
      ]);
    }

    const url = new URL(
      this.configService.getOrThrow('app.frontendDomain', {
        infer: true,
      }) + '/confirm-email',
    );
    url.searchParams.set('hash', mailData.data.hash);

    await this.mailerService.sendMail({
      to: mailData.to,
      subject: emailConfirmTitle,
      text: `${url.toString()} ${emailConfirmTitle}`,
      templatePath: path.join(
        this.configService.getOrThrow('app.workingDirectory', {
          infer: true,
        }),
        'src',
        'mail',
        'mail-templates',
        'activation.hbs',
      ),
      context: {
        title: emailConfirmTitle,
        url: url.toString(),
        actionTitle: emailConfirmTitle,
        app_name: this.configService.get('app.name', { infer: true }),
        text1,
        text2,
        text3,
      },
    });
  }

  async forgotPassword(
    mailData: MailData<{ hash: string; tokenExpires: number }>,
  ): Promise<void> {
    const i18n = I18nContext.current();
    let resetPasswordTitle: MaybeType<string>;
    let text1: MaybeType<string>;
    let text2: MaybeType<string>;
    let text3: MaybeType<string>;
    let text4: MaybeType<string>;

    if (i18n) {
      [resetPasswordTitle, text1, text2, text3, text4] = await Promise.all([
        i18n.t('common.resetPassword'),
        i18n.t('reset-password.text1'),
        i18n.t('reset-password.text2'),
        i18n.t('reset-password.text3'),
        i18n.t('reset-password.text4'),
      ]);
    }

    const url = new URL(
      this.configService.getOrThrow('app.frontendDomain', {
        infer: true,
      }) + '/password-change',
    );
    url.searchParams.set('hash', mailData.data.hash);
    url.searchParams.set('expires', mailData.data.tokenExpires.toString());

    await this.mailerService.sendMail({
      to: mailData.to,
      subject: resetPasswordTitle,
      text: `${url.toString()} ${resetPasswordTitle}`,
      templatePath: path.join(
        this.configService.getOrThrow('app.workingDirectory', {
          infer: true,
        }),
        'src',
        'mail',
        'mail-templates',
        'reset-password.hbs',
      ),
      context: {
        title: resetPasswordTitle,
        url: url.toString(),
        actionTitle: resetPasswordTitle,
        app_name: this.configService.get('app.name', {
          infer: true,
        }),
        text1,
        text2,
        text3,
        text4,
      },
    });
  }

  async confirmNewEmail(mailData: MailData<{ hash: string }>): Promise<void> {
    const i18n = I18nContext.current();
    let emailConfirmTitle: MaybeType<string>;
    let text1: MaybeType<string>;
    let text2: MaybeType<string>;
    let text3: MaybeType<string>;

    if (i18n) {
      [emailConfirmTitle, text1, text2, text3] = await Promise.all([
        i18n.t('common.confirmEmail'),
        i18n.t('confirm-new-email.text1'),
        i18n.t('confirm-new-email.text2'),
        i18n.t('confirm-new-email.text3'),
      ]);
    }

    const url = new URL(
      this.configService.getOrThrow('app.frontendDomain', {
        infer: true,
      }) + '/confirm-new-email',
    );
    url.searchParams.set('hash', mailData.data.hash);

    await this.mailerService.sendMail({
      to: mailData.to,
      subject: emailConfirmTitle,
      text: `${url.toString()} ${emailConfirmTitle}`,
      templatePath: path.join(
        this.configService.getOrThrow('app.workingDirectory', {
          infer: true,
        }),
        'src',
        'mail',
        'mail-templates',
        'confirm-new-email.hbs',
      ),
      context: {
        title: emailConfirmTitle,
        url: url.toString(),
        actionTitle: emailConfirmTitle,
        app_name: this.configService.get('app.name', { infer: true }),
        text1,
        text2,
        text3,
      },
    });
  }
}

================
File: backend/src/mailer/mailer.module.ts
================
import { Module } from '@nestjs/common';
import { MailerService } from './mailer.service';

@Module({
  providers: [MailerService],
  exports: [MailerService],
})
export class MailerModule {}

================
File: backend/src/mailer/mailer.service.ts
================
import { Injectable } from '@nestjs/common';
import fs from 'node:fs/promises';
import { ConfigService } from '@nestjs/config';
import nodemailer from 'nodemailer';
import Handlebars from 'handlebars';
import { AllConfigType } from '../config/config.type';

@Injectable()
export class MailerService {
  private readonly transporter: nodemailer.Transporter;
  constructor(private readonly configService: ConfigService<AllConfigType>) {
    this.transporter = nodemailer.createTransport({
      host: configService.get('mail.host', { infer: true }),
      port: configService.get('mail.port', { infer: true }),
      ignoreTLS: configService.get('mail.ignoreTLS', { infer: true }),
      secure: configService.get('mail.secure', { infer: true }),
      requireTLS: configService.get('mail.requireTLS', { infer: true }),
      auth: {
        user: configService.get('mail.user', { infer: true }),
        pass: configService.get('mail.password', { infer: true }),
      },
    });
  }

  async sendMail({
    templatePath,
    context,
    ...mailOptions
  }: nodemailer.SendMailOptions & {
    templatePath: string;
    context: Record<string, unknown>;
  }): Promise<void> {
    let html: string | undefined;
    if (templatePath) {
      const template = await fs.readFile(templatePath, 'utf-8');
      html = Handlebars.compile(template, {
        strict: true,
      })(context);
    }

    await this.transporter.sendMail({
      ...mailOptions,
      from: mailOptions.from
        ? mailOptions.from
        : `"${this.configService.get('mail.defaultName', {
            infer: true,
          })}" <${this.configService.get('mail.defaultEmail', {
            infer: true,
          })}>`,
      html: mailOptions.html ? mailOptions.html : html,
    });
  }
}

================
File: backend/src/roles/domain/role.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { Allow } from 'class-validator';
import databaseConfig from '../../database/config/database.config';
import { DatabaseConfig } from '../../database/config/database-config.type';

// <database-block>
const idType = (databaseConfig() as DatabaseConfig).isDocumentDatabase
  ? String
  : Number;
// </database-block>

export class Role {
  @Allow()
  @ApiProperty({
    type: idType,
  })
  id: number | string;

  @Allow()
  @ApiProperty({
    type: String,
    example: 'admin',
  })
  name?: string;
}

================
File: backend/src/roles/dto/role.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNumber } from 'class-validator';

export class RoleDto {
  @ApiProperty()
  @IsNumber()
  id: number | string;
}

================
File: backend/src/roles/infrastructure/persistence/document/entities/role.schema.ts
================
export class RoleSchema {
  _id: string;

  name?: string;
}

================
File: backend/src/roles/infrastructure/persistence/relational/entities/role.entity.ts
================
import { Column, Entity, PrimaryColumn } from 'typeorm';
import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: 'role',
})
export class RoleEntity extends EntityRelationalHelper {
  @PrimaryColumn()
  id: number;

  @Column()
  name?: string;
}

================
File: backend/src/roles/roles.decorator.ts
================
import { SetMetadata } from '@nestjs/common';

export const Roles = (...roles: number[]) => SetMetadata('roles', roles);

================
File: backend/src/roles/roles.enum.ts
================
export enum RoleEnum {
  'admin' = 1,
  'user' = 2,
}

================
File: backend/src/roles/roles.guard.ts
================
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const roles = this.reflector.getAllAndOverride<(number | string)[]>(
      'roles',
      [context.getClass(), context.getHandler()],
    );
    if (!roles.length) {
      return true;
    }
    const request = context.switchToHttp().getRequest();

    return roles.map(String).includes(String(request.user?.role?.id));
  }
}

================
File: backend/src/session/domain/session.ts
================
import { User } from '../../users/domain/user';

export class Session {
  id: number | string;
  user: User;
  hash: string;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date;
}

================
File: backend/src/session/infrastructure/persistence/document/entities/session.schema.ts
================
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { now, HydratedDocument } from 'mongoose';
import { UserSchemaClass } from '../../../../../users/infrastructure/persistence/document/entities/user.schema';
import { EntityDocumentHelper } from '../../../../../utils/document-entity-helper';

export type SessionSchemaDocument = HydratedDocument<SessionSchemaClass>;

@Schema({
  timestamps: true,
  toJSON: {
    virtuals: true,
    getters: true,
  },
})
export class SessionSchemaClass extends EntityDocumentHelper {
  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'UserSchemaClass' })
  user: UserSchemaClass;

  @Prop()
  hash: string;

  @Prop({ default: now })
  createdAt: Date;

  @Prop({ default: now })
  updatedAt: Date;

  @Prop()
  deletedAt: Date;
}

export const SessionSchema = SchemaFactory.createForClass(SessionSchemaClass);

SessionSchema.index({ user: 1 });

================
File: backend/src/session/infrastructure/persistence/document/mappers/session.mapper.ts
================
import { UserSchemaClass } from '../../../../../users/infrastructure/persistence/document/entities/user.schema';
import { UserMapper } from '../../../../../users/infrastructure/persistence/document/mappers/user.mapper';
import { Session } from '../../../../domain/session';
import { SessionSchemaClass } from '../entities/session.schema';

export class SessionMapper {
  static toDomain(raw: SessionSchemaClass): Session {
    const domainEntity = new Session();
    domainEntity.id = raw._id.toString();

    if (raw.user) {
      domainEntity.user = UserMapper.toDomain(raw.user);
    }

    domainEntity.hash = raw.hash;
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;
    domainEntity.deletedAt = raw.deletedAt;
    return domainEntity;
  }
  static toPersistence(domainEntity: Session): SessionSchemaClass {
    const persistenceSchema = new UserSchemaClass();
    persistenceSchema._id = domainEntity.user.id.toString();
    const sessionEntity = new SessionSchemaClass();
    if (domainEntity.id && typeof domainEntity.id === 'string') {
      sessionEntity._id = domainEntity.id;
    }
    sessionEntity.user = persistenceSchema;
    sessionEntity.hash = domainEntity.hash;
    sessionEntity.createdAt = domainEntity.createdAt;
    sessionEntity.updatedAt = domainEntity.updatedAt;
    sessionEntity.deletedAt = domainEntity.deletedAt;
    return sessionEntity;
  }
}

================
File: backend/src/session/infrastructure/persistence/document/repositories/session.repository.ts
================
import { Injectable } from '@nestjs/common';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { SessionRepository } from '../../session.repository';
import { Session } from '../../../../domain/session';
import { SessionSchemaClass } from '../entities/session.schema';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { SessionMapper } from '../mappers/session.mapper';
import { User } from '../../../../../users/domain/user';

@Injectable()
export class SessionDocumentRepository implements SessionRepository {
  constructor(
    @InjectModel(SessionSchemaClass.name)
    private sessionModel: Model<SessionSchemaClass>,
  ) {}

  async findById(id: Session['id']): Promise<NullableType<Session>> {
    const sessionObject = await this.sessionModel.findById(id);
    return sessionObject ? SessionMapper.toDomain(sessionObject) : null;
  }

  async create(data: Session): Promise<Session> {
    const persistenceModel = SessionMapper.toPersistence(data);
    const createdSession = new this.sessionModel(persistenceModel);
    const sessionObject = await createdSession.save();
    return SessionMapper.toDomain(sessionObject);
  }

  async update(
    id: Session['id'],
    payload: Partial<Session>,
  ): Promise<Session | null> {
    const clonedPayload = { ...payload };
    delete clonedPayload.id;
    delete clonedPayload.createdAt;
    delete clonedPayload.updatedAt;
    delete clonedPayload.deletedAt;

    const filter = { _id: id.toString() };
    const session = await this.sessionModel.findOne(filter);

    if (!session) {
      return null;
    }

    const sessionObject = await this.sessionModel.findOneAndUpdate(
      filter,
      SessionMapper.toPersistence({
        ...SessionMapper.toDomain(session),
        ...clonedPayload,
      }),
      { new: true },
    );

    return sessionObject ? SessionMapper.toDomain(sessionObject) : null;
  }

  async deleteById(id: Session['id']): Promise<void> {
    await this.sessionModel.deleteOne({ _id: id.toString() });
  }

  async deleteByUserId({ userId }: { userId: User['id'] }): Promise<void> {
    await this.sessionModel.deleteMany({ user: userId.toString() });
  }

  async deleteByUserIdWithExclude({
    userId,
    excludeSessionId,
  }: {
    userId: User['id'];
    excludeSessionId: Session['id'];
  }): Promise<void> {
    const transformedCriteria = {
      user: userId.toString(),
      _id: { $not: { $eq: excludeSessionId.toString() } },
    };
    await this.sessionModel.deleteMany(transformedCriteria);
  }
}

================
File: backend/src/session/infrastructure/persistence/document/document-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { SessionSchema, SessionSchemaClass } from './entities/session.schema';
import { SessionRepository } from '../session.repository';
import { SessionDocumentRepository } from './repositories/session.repository';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: SessionSchemaClass.name, schema: SessionSchema },
    ]),
  ],
  providers: [
    {
      provide: SessionRepository,
      useClass: SessionDocumentRepository,
    },
  ],
  exports: [SessionRepository],
})
export class DocumentSessionPersistenceModule {}

================
File: backend/src/session/infrastructure/persistence/relational/entities/session.entity.ts
================
import {
  CreateDateColumn,
  Entity,
  Index,
  ManyToOne,
  PrimaryGeneratedColumn,
  DeleteDateColumn,
  Column,
  UpdateDateColumn,
} from 'typeorm';
import { UserEntity } from '../../../../../users/infrastructure/persistence/relational/entities/user.entity';

import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: 'session',
})
export class SessionEntity extends EntityRelationalHelper {
  @PrimaryGeneratedColumn()
  id: number;

  @ManyToOne(() => UserEntity, {
    eager: true,
  })
  @Index()
  user: UserEntity;

  @Column()
  hash: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @DeleteDateColumn()
  deletedAt: Date;
}

================
File: backend/src/session/infrastructure/persistence/relational/mappers/session.mapper.ts
================
import { UserEntity } from '../../../../../users/infrastructure/persistence/relational/entities/user.entity';
import { UserMapper } from '../../../../../users/infrastructure/persistence/relational/mappers/user.mapper';
import { Session } from '../../../../domain/session';
import { SessionEntity } from '../entities/session.entity';

export class SessionMapper {
  static toDomain(raw: SessionEntity): Session {
    const domainEntity = new Session();
    domainEntity.id = raw.id;
    if (raw.user) {
      domainEntity.user = UserMapper.toDomain(raw.user);
    }
    domainEntity.hash = raw.hash;
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;
    domainEntity.deletedAt = raw.deletedAt;
    return domainEntity;
  }

  static toPersistence(domainEntity: Session): SessionEntity {
    const user = new UserEntity();
    user.id = Number(domainEntity.user.id);

    const persistenceEntity = new SessionEntity();
    if (domainEntity.id && typeof domainEntity.id === 'number') {
      persistenceEntity.id = domainEntity.id;
    }
    persistenceEntity.hash = domainEntity.hash;
    persistenceEntity.user = user;
    persistenceEntity.createdAt = domainEntity.createdAt;
    persistenceEntity.updatedAt = domainEntity.updatedAt;
    persistenceEntity.deletedAt = domainEntity.deletedAt;

    return persistenceEntity;
  }
}

================
File: backend/src/session/infrastructure/persistence/relational/repositories/session.repository.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Not, Repository } from 'typeorm';
import { SessionEntity } from '../entities/session.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';

import { SessionRepository } from '../../session.repository';
import { Session } from '../../../../domain/session';

import { SessionMapper } from '../mappers/session.mapper';
import { User } from '../../../../../users/domain/user';

@Injectable()
export class SessionRelationalRepository implements SessionRepository {
  constructor(
    @InjectRepository(SessionEntity)
    private readonly sessionRepository: Repository<SessionEntity>,
  ) {}

  async findById(id: Session['id']): Promise<NullableType<Session>> {
    const entity = await this.sessionRepository.findOne({
      where: {
        id: Number(id),
      },
    });

    return entity ? SessionMapper.toDomain(entity) : null;
  }

  async create(data: Session): Promise<Session> {
    const persistenceModel = SessionMapper.toPersistence(data);
    return this.sessionRepository.save(
      this.sessionRepository.create(persistenceModel),
    );
  }

  async update(
    id: Session['id'],
    payload: Partial<
      Omit<Session, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>
    >,
  ): Promise<Session | null> {
    const entity = await this.sessionRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      throw new Error('Session not found');
    }

    const updatedEntity = await this.sessionRepository.save(
      this.sessionRepository.create(
        SessionMapper.toPersistence({
          ...SessionMapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return SessionMapper.toDomain(updatedEntity);
  }

  async deleteById(id: Session['id']): Promise<void> {
    await this.sessionRepository.softDelete({
      id: Number(id),
    });
  }

  async deleteByUserId(conditions: { userId: User['id'] }): Promise<void> {
    await this.sessionRepository.softDelete({
      user: {
        id: Number(conditions.userId),
      },
    });
  }

  async deleteByUserIdWithExclude(conditions: {
    userId: User['id'];
    excludeSessionId: Session['id'];
  }): Promise<void> {
    await this.sessionRepository.softDelete({
      user: {
        id: Number(conditions.userId),
      },
      id: Not(Number(conditions.excludeSessionId)),
    });
  }
}

================
File: backend/src/session/infrastructure/persistence/relational/relational-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { SessionRepository } from '../session.repository';
import { SessionRelationalRepository } from './repositories/session.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { SessionEntity } from './entities/session.entity';

@Module({
  imports: [TypeOrmModule.forFeature([SessionEntity])],
  providers: [
    {
      provide: SessionRepository,
      useClass: SessionRelationalRepository,
    },
  ],
  exports: [SessionRepository],
})
export class RelationalSessionPersistenceModule {}

================
File: backend/src/session/infrastructure/persistence/session.repository.ts
================
import { User } from '../../../users/domain/user';
import { NullableType } from '../../../utils/types/nullable.type';
import { Session } from '../../domain/session';

export abstract class SessionRepository {
  abstract findById(id: Session['id']): Promise<NullableType<Session>>;

  abstract create(
    data: Omit<Session, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>,
  ): Promise<Session>;

  abstract update(
    id: Session['id'],
    payload: Partial<
      Omit<Session, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>
    >,
  ): Promise<Session | null>;

  abstract deleteById(id: Session['id']): Promise<void>;

  abstract deleteByUserId(conditions: { userId: User['id'] }): Promise<void>;

  abstract deleteByUserIdWithExclude(conditions: {
    userId: User['id'];
    excludeSessionId: Session['id'];
  }): Promise<void>;
}

================
File: backend/src/session/session.module.ts
================
import { Module } from '@nestjs/common';

import { DocumentSessionPersistenceModule } from './infrastructure/persistence/document/document-persistence.module';
import { RelationalSessionPersistenceModule } from './infrastructure/persistence/relational/relational-persistence.module';
import { SessionService } from './session.service';
import { DatabaseConfig } from '../database/config/database-config.type';
import databaseConfig from '../database/config/database.config';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentSessionPersistenceModule
  : RelationalSessionPersistenceModule;
// </database-block>

@Module({
  imports: [infrastructurePersistenceModule],
  providers: [SessionService],
  exports: [SessionService, infrastructurePersistenceModule],
})
export class SessionModule {}

================
File: backend/src/session/session.service.ts
================
import { Injectable } from '@nestjs/common';

import { SessionRepository } from './infrastructure/persistence/session.repository';
import { Session } from './domain/session';
import { User } from '../users/domain/user';
import { NullableType } from '../utils/types/nullable.type';

@Injectable()
export class SessionService {
  constructor(private readonly sessionRepository: SessionRepository) {}

  findById(id: Session['id']): Promise<NullableType<Session>> {
    return this.sessionRepository.findById(id);
  }

  create(
    data: Omit<Session, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>,
  ): Promise<Session> {
    return this.sessionRepository.create(data);
  }

  update(
    id: Session['id'],
    payload: Partial<
      Omit<Session, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>
    >,
  ): Promise<Session | null> {
    return this.sessionRepository.update(id, payload);
  }

  deleteById(id: Session['id']): Promise<void> {
    return this.sessionRepository.deleteById(id);
  }

  deleteByUserId(conditions: { userId: User['id'] }): Promise<void> {
    return this.sessionRepository.deleteByUserId(conditions);
  }

  deleteByUserIdWithExclude(conditions: {
    userId: User['id'];
    excludeSessionId: Session['id'];
  }): Promise<void> {
    return this.sessionRepository.deleteByUserIdWithExclude(conditions);
  }
}

================
File: backend/src/social/interfaces/social.interface.ts
================
export interface SocialInterface {
  id: string;
  firstName?: string;
  lastName?: string;
  email?: string;
}

================
File: backend/src/social/tokens.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { Allow, IsNotEmpty } from 'class-validator';

export class Tokens {
  @ApiProperty()
  @IsNotEmpty()
  token1: string;

  @Allow()
  @ApiProperty()
  token2?: string;
}

================
File: backend/src/statuses/domain/status.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { Allow } from 'class-validator';
import databaseConfig from '../../database/config/database.config';
import { DatabaseConfig } from '../../database/config/database-config.type';

// <database-block>
const idType = (databaseConfig() as DatabaseConfig).isDocumentDatabase
  ? String
  : Number;
// </database-block>

export class Status {
  @Allow()
  @ApiProperty({
    type: idType,
  })
  id: number | string;

  @Allow()
  @ApiProperty({
    type: String,
    example: 'active',
  })
  name?: string;
}

================
File: backend/src/statuses/dto/status.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNumber } from 'class-validator';

export class StatusDto {
  @ApiProperty()
  @IsNumber()
  id: number | string;
}

================
File: backend/src/statuses/infrastructure/persistence/document/entities/status.schema.ts
================
export class StatusSchema {
  _id: string;

  name?: string;
}

================
File: backend/src/statuses/infrastructure/persistence/relational/entities/status.entity.ts
================
import { Column, Entity, PrimaryColumn } from 'typeorm';

import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: 'status',
})
export class StatusEntity extends EntityRelationalHelper {
  @PrimaryColumn()
  id: number;

  @Column()
  name?: string;
}

================
File: backend/src/statuses/statuses.enum.ts
================
export enum StatusEnum {
  'active' = 1,
  'inactive' = 2,
}

================
File: backend/src/users/domain/user.ts
================
import { Exclude, Expose } from 'class-transformer';
import { FileType } from '../../files/domain/file';
import { Role } from '../../roles/domain/role';
import { Status } from '../../statuses/domain/status';
import { ApiProperty } from '@nestjs/swagger';
import databaseConfig from '../../database/config/database.config';
import { DatabaseConfig } from '../../database/config/database-config.type';

// <database-block>
const idType = (databaseConfig() as DatabaseConfig).isDocumentDatabase
  ? String
  : Number;
// </database-block>

export class User {
  @ApiProperty({
    type: idType,
  })
  id: number | string;

  @ApiProperty({
    type: String,
    example: 'john.doe@example.com',
  })
  @Expose({ groups: ['me', 'admin'] })
  email: string | null;

  @Exclude({ toPlainOnly: true })
  password?: string;

  @ApiProperty({
    type: String,
    example: 'email',
  })
  @Expose({ groups: ['me', 'admin'] })
  provider: string;

  @ApiProperty({
    type: String,
    example: '1234567890',
  })
  @Expose({ groups: ['me', 'admin'] })
  socialId?: string | null;

  @ApiProperty({
    type: String,
    example: 'John',
  })
  firstName: string | null;

  @ApiProperty({
    type: String,
    example: 'Doe',
  })
  lastName: string | null;

  @ApiProperty({
    type: () => FileType,
  })
  photo?: FileType | null;

  @ApiProperty({
    type: () => Role,
  })
  role?: Role | null;

  @ApiProperty({
    type: () => Status,
  })
  status?: Status;

  @ApiProperty()
  createdAt: Date;

  @ApiProperty()
  updatedAt: Date;

  @ApiProperty()
  deletedAt: Date;
}

================
File: backend/src/users/dto/create-user.dto.ts
================
import {
  // decorators here
  Transform,
  Type,
} from 'class-transformer';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  // decorators here
  IsEmail,
  IsNotEmpty,
  IsOptional,
  MinLength,
} from 'class-validator';
import { FileDto } from '../../files/dto/file.dto';
import { RoleDto } from '../../roles/dto/role.dto';
import { StatusDto } from '../../statuses/dto/status.dto';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class CreateUserDto {
  @ApiProperty({ example: 'test1@example.com', type: String })
  @Transform(lowerCaseTransformer)
  @IsNotEmpty()
  @IsEmail()
  email: string | null;

  @ApiProperty()
  @MinLength(6)
  password?: string;

  provider?: string;

  socialId?: string | null;

  @ApiProperty({ example: 'John', type: String })
  @IsNotEmpty()
  firstName: string | null;

  @ApiProperty({ example: 'Doe', type: String })
  @IsNotEmpty()
  lastName: string | null;

  @ApiPropertyOptional({ type: () => FileDto })
  @IsOptional()
  photo?: FileDto | null;

  @ApiPropertyOptional({ type: RoleDto })
  @IsOptional()
  @Type(() => RoleDto)
  role?: RoleDto | null;

  @ApiPropertyOptional({ type: StatusDto })
  @IsOptional()
  @Type(() => StatusDto)
  status?: StatusDto;
}

================
File: backend/src/users/dto/query-user.dto.ts
================
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  IsNumber,
  IsOptional,
  IsString,
  ValidateNested,
} from 'class-validator';
import { Transform, Type, plainToInstance } from 'class-transformer';
import { User } from '../domain/user';
import { RoleDto } from '../../roles/dto/role.dto';

export class FilterUserDto {
  @ApiPropertyOptional({ type: RoleDto })
  @IsOptional()
  @ValidateNested({ each: true })
  @Type(() => RoleDto)
  roles?: RoleDto[] | null;
}

export class SortUserDto {
  @ApiProperty()
  @Type(() => String)
  @IsString()
  orderBy: keyof User;

  @ApiProperty()
  @IsString()
  order: string;
}

export class QueryUserDto {
  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 1))
  @IsNumber()
  @IsOptional()
  page?: number;

  @ApiPropertyOptional()
  @Transform(({ value }) => (value ? Number(value) : 10))
  @IsNumber()
  @IsOptional()
  limit?: number;

  @ApiPropertyOptional({ type: String })
  @IsOptional()
  @Transform(({ value }) =>
    value ? plainToInstance(FilterUserDto, JSON.parse(value)) : undefined,
  )
  @ValidateNested()
  @Type(() => FilterUserDto)
  filters?: FilterUserDto | null;

  @ApiPropertyOptional({ type: String })
  @IsOptional()
  @Transform(({ value }) => {
    return value ? plainToInstance(SortUserDto, JSON.parse(value)) : undefined;
  })
  @ValidateNested({ each: true })
  @Type(() => SortUserDto)
  sort?: SortUserDto[] | null;
}

================
File: backend/src/users/dto/update-user.dto.ts
================
import { PartialType, ApiPropertyOptional } from '@nestjs/swagger';
import { CreateUserDto } from './create-user.dto';

import { Transform, Type } from 'class-transformer';
import { IsEmail, IsOptional, MinLength } from 'class-validator';
import { FileDto } from '../../files/dto/file.dto';
import { RoleDto } from '../../roles/dto/role.dto';
import { StatusDto } from '../../statuses/dto/status.dto';
import { lowerCaseTransformer } from '../../utils/transformers/lower-case.transformer';

export class UpdateUserDto extends PartialType(CreateUserDto) {
  @ApiPropertyOptional({ example: 'test1@example.com', type: String })
  @Transform(lowerCaseTransformer)
  @IsOptional()
  @IsEmail()
  email?: string | null;

  @ApiPropertyOptional()
  @IsOptional()
  @MinLength(6)
  password?: string;

  provider?: string;

  socialId?: string | null;

  @ApiPropertyOptional({ example: 'John', type: String })
  @IsOptional()
  firstName?: string | null;

  @ApiPropertyOptional({ example: 'Doe', type: String })
  @IsOptional()
  lastName?: string | null;

  @ApiPropertyOptional({ type: () => FileDto })
  @IsOptional()
  photo?: FileDto | null;

  @ApiPropertyOptional({ type: () => RoleDto })
  @IsOptional()
  @Type(() => RoleDto)
  role?: RoleDto | null;

  @ApiPropertyOptional({ type: () => StatusDto })
  @IsOptional()
  @Type(() => StatusDto)
  status?: StatusDto;
}

================
File: backend/src/users/dto/user.dto.ts
================
import { ApiProperty } from '@nestjs/swagger';
import { IsNotEmpty } from 'class-validator';

export class UserDto {
  @ApiProperty({
    type: String,
    example: 'userId',
  })
  @IsNotEmpty()
  id: string | number;
}

================
File: backend/src/users/infrastructure/persistence/document/entities/user.schema.ts
================
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { now, HydratedDocument } from 'mongoose';

import { AuthProvidersEnum } from '../../../../../auth/auth-providers.enum';
import { FileSchemaClass } from '../../../../../files/infrastructure/persistence/document/entities/file.schema';
import { EntityDocumentHelper } from '../../../../../utils/document-entity-helper';
import { StatusSchema } from '../../../../../statuses/infrastructure/persistence/document/entities/status.schema';
import { RoleSchema } from '../../../../../roles/infrastructure/persistence/document/entities/role.schema';

export type UserSchemaDocument = HydratedDocument<UserSchemaClass>;

@Schema({
  timestamps: true,
  toJSON: {
    virtuals: true,
    getters: true,
  },
})
export class UserSchemaClass extends EntityDocumentHelper {
  @Prop({
    type: String,
    unique: true,
  })
  email: string | null;

  @Prop()
  password?: string;

  @Prop({
    default: AuthProvidersEnum.email,
  })
  provider: string;

  @Prop({
    type: String,
    default: null,
  })
  socialId?: string | null;

  @Prop({
    type: String,
  })
  firstName: string | null;

  @Prop({
    type: String,
  })
  lastName: string | null;

  @Prop({
    type: FileSchemaClass,
  })
  photo?: FileSchemaClass | null;

  @Prop({
    type: RoleSchema,
  })
  role?: RoleSchema | null;

  @Prop({
    type: StatusSchema,
  })
  status?: StatusSchema;

  @Prop({ default: now })
  createdAt: Date;

  @Prop({ default: now })
  updatedAt: Date;

  @Prop()
  deletedAt: Date;
}

export const UserSchema = SchemaFactory.createForClass(UserSchemaClass);

UserSchema.index({ 'role._id': 1 });

================
File: backend/src/users/infrastructure/persistence/document/mappers/user.mapper.ts
================
import { User } from '../../../../domain/user';
import { UserSchemaClass } from '../entities/user.schema';
import { FileSchemaClass } from '../../../../../files/infrastructure/persistence/document/entities/file.schema';
import { FileMapper } from '../../../../../files/infrastructure/persistence/document/mappers/file.mapper';
import { Role } from '../../../../../roles/domain/role';
import { Status } from '../../../../../statuses/domain/status';
import { RoleSchema } from '../../../../../roles/infrastructure/persistence/document/entities/role.schema';
import { StatusSchema } from '../../../../../statuses/infrastructure/persistence/document/entities/status.schema';

export class UserMapper {
  static toDomain(raw: UserSchemaClass): User {
    const domainEntity = new User();
    domainEntity.id = raw._id.toString();
    domainEntity.email = raw.email;
    domainEntity.password = raw.password;
    domainEntity.provider = raw.provider;
    domainEntity.socialId = raw.socialId;
    domainEntity.firstName = raw.firstName;
    domainEntity.lastName = raw.lastName;
    if (raw.photo) {
      domainEntity.photo = FileMapper.toDomain(raw.photo);
    } else if (raw.photo === null) {
      domainEntity.photo = null;
    }

    if (raw.role) {
      domainEntity.role = new Role();
      domainEntity.role.id = raw.role._id;
    }

    if (raw.status) {
      domainEntity.status = new Status();
      domainEntity.status.id = raw.status._id;
    }

    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;
    domainEntity.deletedAt = raw.deletedAt;

    return domainEntity;
  }

  static toPersistence(domainEntity: User): UserSchemaClass {
    let role: RoleSchema | undefined = undefined;

    if (domainEntity.role) {
      role = new RoleSchema();
      role._id = domainEntity.role.id.toString();
    }

    let photo: FileSchemaClass | undefined = undefined;

    if (domainEntity.photo) {
      photo = new FileSchemaClass();
      photo._id = domainEntity.photo.id;
      photo.path = domainEntity.photo.path;
    }

    let status: StatusSchema | undefined = undefined;

    if (domainEntity.status) {
      status = new StatusSchema();
      status._id = domainEntity.status.id.toString();
    }

    const persistenceSchema = new UserSchemaClass();
    if (domainEntity.id && typeof domainEntity.id === 'string') {
      persistenceSchema._id = domainEntity.id;
    }
    persistenceSchema.email = domainEntity.email;
    persistenceSchema.password = domainEntity.password;
    persistenceSchema.provider = domainEntity.provider;
    persistenceSchema.socialId = domainEntity.socialId;
    persistenceSchema.firstName = domainEntity.firstName;
    persistenceSchema.lastName = domainEntity.lastName;
    persistenceSchema.photo = photo;
    persistenceSchema.role = role;
    persistenceSchema.status = status;
    persistenceSchema.createdAt = domainEntity.createdAt;
    persistenceSchema.updatedAt = domainEntity.updatedAt;
    persistenceSchema.deletedAt = domainEntity.deletedAt;
    return persistenceSchema;
  }
}

================
File: backend/src/users/infrastructure/persistence/document/repositories/user.repository.ts
================
import { Injectable } from '@nestjs/common';

import { NullableType } from '../../../../../utils/types/nullable.type';
import { FilterUserDto, SortUserDto } from '../../../../dto/query-user.dto';
import { User } from '../../../../domain/user';
import { UserRepository } from '../../user.repository';
import { UserSchemaClass } from '../entities/user.schema';
import { InjectModel } from '@nestjs/mongoose';
import { FilterQuery, Model } from 'mongoose';
import { UserMapper } from '../mappers/user.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class UsersDocumentRepository implements UserRepository {
  constructor(
    @InjectModel(UserSchemaClass.name)
    private readonly usersModel: Model<UserSchemaClass>,
  ) {}

  async create(data: User): Promise<User> {
    const persistenceModel = UserMapper.toPersistence(data);
    const createdUser = new this.usersModel(persistenceModel);
    const userObject = await createdUser.save();
    return UserMapper.toDomain(userObject);
  }

  async findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterUserDto | null;
    sortOptions?: SortUserDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<User[]> {
    const where: FilterQuery<UserSchemaClass> = {};
    if (filterOptions?.roles?.length) {
      where['role._id'] = {
        $in: filterOptions.roles.map((role) => role.id.toString()),
      };
    }

    const userObjects = await this.usersModel
      .find(where)
      .sort(
        sortOptions?.reduce(
          (accumulator, sort) => ({
            ...accumulator,
            [sort.orderBy === 'id' ? '_id' : sort.orderBy]:
              sort.order.toUpperCase() === 'ASC' ? 1 : -1,
          }),
          {},
        ),
      )
      .skip((paginationOptions.page - 1) * paginationOptions.limit)
      .limit(paginationOptions.limit);

    return userObjects.map((userObject) => UserMapper.toDomain(userObject));
  }

  async findById(id: User['id']): Promise<NullableType<User>> {
    const userObject = await this.usersModel.findById(id);
    return userObject ? UserMapper.toDomain(userObject) : null;
  }

  async findByIds(ids: User['id'][]): Promise<User[]> {
    const userObjects = await this.usersModel.find({ _id: { $in: ids } });
    return userObjects.map((userObject) => UserMapper.toDomain(userObject));
  }

  async findByEmail(email: User['email']): Promise<NullableType<User>> {
    if (!email) return null;

    const userObject = await this.usersModel.findOne({ email });
    return userObject ? UserMapper.toDomain(userObject) : null;
  }

  async findBySocialIdAndProvider({
    socialId,
    provider,
  }: {
    socialId: User['socialId'];
    provider: User['provider'];
  }): Promise<NullableType<User>> {
    if (!socialId || !provider) return null;

    const userObject = await this.usersModel.findOne({
      socialId,
      provider,
    });

    return userObject ? UserMapper.toDomain(userObject) : null;
  }

  async update(id: User['id'], payload: Partial<User>): Promise<User | null> {
    const clonedPayload = { ...payload };
    delete clonedPayload.id;

    const filter = { _id: id.toString() };
    const user = await this.usersModel.findOne(filter);

    if (!user) {
      return null;
    }

    const userObject = await this.usersModel.findOneAndUpdate(
      filter,
      UserMapper.toPersistence({
        ...UserMapper.toDomain(user),
        ...clonedPayload,
      }),
      { new: true },
    );

    return userObject ? UserMapper.toDomain(userObject) : null;
  }

  async remove(id: User['id']): Promise<void> {
    await this.usersModel.deleteOne({
      _id: id.toString(),
    });
  }
}

================
File: backend/src/users/infrastructure/persistence/document/document-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { UserSchema, UserSchemaClass } from './entities/user.schema';
import { UserRepository } from '../user.repository';
import { UsersDocumentRepository } from './repositories/user.repository';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: UserSchemaClass.name, schema: UserSchema },
    ]),
  ],
  providers: [
    {
      provide: UserRepository,
      useClass: UsersDocumentRepository,
    },
  ],
  exports: [UserRepository],
})
export class DocumentUserPersistenceModule {}

================
File: backend/src/users/infrastructure/persistence/relational/entities/user.entity.ts
================
import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  Entity,
  Index,
  ManyToOne,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
  JoinColumn,
  OneToOne,
} from 'typeorm';
import { RoleEntity } from '../../../../../roles/infrastructure/persistence/relational/entities/role.entity';
import { StatusEntity } from '../../../../../statuses/infrastructure/persistence/relational/entities/status.entity';
import { FileEntity } from '../../../../../files/infrastructure/persistence/relational/entities/file.entity';

import { AuthProvidersEnum } from '../../../../../auth/auth-providers.enum';
import { EntityRelationalHelper } from '../../../../../utils/relational-entity-helper';

@Entity({
  name: 'user',
})
export class UserEntity extends EntityRelationalHelper {
  @PrimaryGeneratedColumn()
  id: number;

  // For "string | null" we need to use String type.
  // More info: https://github.com/typeorm/typeorm/issues/2567
  @Column({ type: String, unique: true, nullable: true })
  email: string | null;

  @Column({ nullable: true })
  password?: string;

  @Column({ default: AuthProvidersEnum.email })
  provider: string;

  @Index()
  @Column({ type: String, nullable: true })
  socialId?: string | null;

  @Index()
  @Column({ type: String, nullable: true })
  firstName: string | null;

  @Index()
  @Column({ type: String, nullable: true })
  lastName: string | null;

  @OneToOne(() => FileEntity, {
    eager: true,
  })
  @JoinColumn()
  photo?: FileEntity | null;

  @ManyToOne(() => RoleEntity, {
    eager: true,
  })
  role?: RoleEntity | null;

  @ManyToOne(() => StatusEntity, {
    eager: true,
  })
  status?: StatusEntity;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @DeleteDateColumn()
  deletedAt: Date;
}

================
File: backend/src/users/infrastructure/persistence/relational/mappers/user.mapper.ts
================
import { FileEntity } from '../../../../../files/infrastructure/persistence/relational/entities/file.entity';
import { FileMapper } from '../../../../../files/infrastructure/persistence/relational/mappers/file.mapper';
import { RoleEntity } from '../../../../../roles/infrastructure/persistence/relational/entities/role.entity';
import { StatusEntity } from '../../../../../statuses/infrastructure/persistence/relational/entities/status.entity';
import { User } from '../../../../domain/user';
import { UserEntity } from '../entities/user.entity';

export class UserMapper {
  static toDomain(raw: UserEntity): User {
    const domainEntity = new User();
    domainEntity.id = raw.id;
    domainEntity.email = raw.email;
    domainEntity.password = raw.password;
    domainEntity.provider = raw.provider;
    domainEntity.socialId = raw.socialId;
    domainEntity.firstName = raw.firstName;
    domainEntity.lastName = raw.lastName;
    if (raw.photo) {
      domainEntity.photo = FileMapper.toDomain(raw.photo);
    }
    domainEntity.role = raw.role;
    domainEntity.status = raw.status;
    domainEntity.createdAt = raw.createdAt;
    domainEntity.updatedAt = raw.updatedAt;
    domainEntity.deletedAt = raw.deletedAt;
    return domainEntity;
  }

  static toPersistence(domainEntity: User): UserEntity {
    let role: RoleEntity | undefined = undefined;

    if (domainEntity.role) {
      role = new RoleEntity();
      role.id = Number(domainEntity.role.id);
    }

    let photo: FileEntity | undefined | null = undefined;

    if (domainEntity.photo) {
      photo = new FileEntity();
      photo.id = domainEntity.photo.id;
      photo.path = domainEntity.photo.path;
    } else if (domainEntity.photo === null) {
      photo = null;
    }

    let status: StatusEntity | undefined = undefined;

    if (domainEntity.status) {
      status = new StatusEntity();
      status.id = Number(domainEntity.status.id);
    }

    const persistenceEntity = new UserEntity();
    if (domainEntity.id && typeof domainEntity.id === 'number') {
      persistenceEntity.id = domainEntity.id;
    }
    persistenceEntity.email = domainEntity.email;
    persistenceEntity.password = domainEntity.password;
    persistenceEntity.provider = domainEntity.provider;
    persistenceEntity.socialId = domainEntity.socialId;
    persistenceEntity.firstName = domainEntity.firstName;
    persistenceEntity.lastName = domainEntity.lastName;
    persistenceEntity.photo = photo;
    persistenceEntity.role = role;
    persistenceEntity.status = status;
    persistenceEntity.createdAt = domainEntity.createdAt;
    persistenceEntity.updatedAt = domainEntity.updatedAt;
    persistenceEntity.deletedAt = domainEntity.deletedAt;
    return persistenceEntity;
  }
}

================
File: backend/src/users/infrastructure/persistence/relational/repositories/user.repository.ts
================
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';

import { FindOptionsWhere, Repository, In } from 'typeorm';
import { UserEntity } from '../entities/user.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { FilterUserDto, SortUserDto } from '../../../../dto/query-user.dto';
import { User } from '../../../../domain/user';
import { UserRepository } from '../../user.repository';
import { UserMapper } from '../mappers/user.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';

@Injectable()
export class UsersRelationalRepository implements UserRepository {
  constructor(
    @InjectRepository(UserEntity)
    private readonly usersRepository: Repository<UserEntity>,
  ) {}

  async create(data: User): Promise<User> {
    const persistenceModel = UserMapper.toPersistence(data);
    const newEntity = await this.usersRepository.save(
      this.usersRepository.create(persistenceModel),
    );
    return UserMapper.toDomain(newEntity);
  }

  async findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterUserDto | null;
    sortOptions?: SortUserDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<User[]> {
    const where: FindOptionsWhere<UserEntity> = {};
    if (filterOptions?.roles?.length) {
      where.role = filterOptions.roles.map((role) => ({
        id: Number(role.id),
      }));
    }

    const entities = await this.usersRepository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
      where: where,
      order: sortOptions?.reduce(
        (accumulator, sort) => ({
          ...accumulator,
          [sort.orderBy]: sort.order,
        }),
        {},
      ),
    });

    return entities.map((user) => UserMapper.toDomain(user));
  }

  async findById(id: User['id']): Promise<NullableType<User>> {
    const entity = await this.usersRepository.findOne({
      where: { id: Number(id) },
    });

    return entity ? UserMapper.toDomain(entity) : null;
  }

  async findByIds(ids: User['id'][]): Promise<User[]> {
    const entities = await this.usersRepository.find({
      where: { id: In(ids) },
    });

    return entities.map((user) => UserMapper.toDomain(user));
  }

  async findByEmail(email: User['email']): Promise<NullableType<User>> {
    if (!email) return null;

    const entity = await this.usersRepository.findOne({
      where: { email },
    });

    return entity ? UserMapper.toDomain(entity) : null;
  }

  async findBySocialIdAndProvider({
    socialId,
    provider,
  }: {
    socialId: User['socialId'];
    provider: User['provider'];
  }): Promise<NullableType<User>> {
    if (!socialId || !provider) return null;

    const entity = await this.usersRepository.findOne({
      where: { socialId, provider },
    });

    return entity ? UserMapper.toDomain(entity) : null;
  }

  async update(id: User['id'], payload: Partial<User>): Promise<User> {
    const entity = await this.usersRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      throw new Error('User not found');
    }

    const updatedEntity = await this.usersRepository.save(
      this.usersRepository.create(
        UserMapper.toPersistence({
          ...UserMapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return UserMapper.toDomain(updatedEntity);
  }

  async remove(id: User['id']): Promise<void> {
    await this.usersRepository.softDelete(id);
  }
}

================
File: backend/src/users/infrastructure/persistence/relational/relational-persistence.module.ts
================
import { Module } from '@nestjs/common';
import { UserRepository } from '../user.repository';
import { UsersRelationalRepository } from './repositories/user.repository';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserEntity } from './entities/user.entity';

@Module({
  imports: [TypeOrmModule.forFeature([UserEntity])],
  providers: [
    {
      provide: UserRepository,
      useClass: UsersRelationalRepository,
    },
  ],
  exports: [UserRepository],
})
export class RelationalUserPersistenceModule {}

================
File: backend/src/users/infrastructure/persistence/user.repository.ts
================
import { DeepPartial } from '../../../utils/types/deep-partial.type';
import { NullableType } from '../../../utils/types/nullable.type';
import { IPaginationOptions } from '../../../utils/types/pagination-options';
import { User } from '../../domain/user';

import { FilterUserDto, SortUserDto } from '../../dto/query-user.dto';

export abstract class UserRepository {
  abstract create(
    data: Omit<User, 'id' | 'createdAt' | 'deletedAt' | 'updatedAt'>,
  ): Promise<User>;

  abstract findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterUserDto | null;
    sortOptions?: SortUserDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<User[]>;

  abstract findById(id: User['id']): Promise<NullableType<User>>;
  abstract findByIds(ids: User['id'][]): Promise<User[]>;
  abstract findByEmail(email: User['email']): Promise<NullableType<User>>;
  abstract findBySocialIdAndProvider({
    socialId,
    provider,
  }: {
    socialId: User['socialId'];
    provider: User['provider'];
  }): Promise<NullableType<User>>;

  abstract update(
    id: User['id'],
    payload: DeepPartial<User>,
  ): Promise<User | null>;

  abstract remove(id: User['id']): Promise<void>;
}

================
File: backend/src/users/users.controller.ts
================
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Query,
  HttpStatus,
  HttpCode,
  SerializeOptions,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiParam,
  ApiTags,
} from '@nestjs/swagger';
import { Roles } from '../roles/roles.decorator';
import { RoleEnum } from '../roles/roles.enum';
import { AuthGuard } from '@nestjs/passport';

import {
  InfinityPaginationResponse,
  InfinityPaginationResponseDto,
} from '../utils/dto/infinity-pagination-response.dto';
import { NullableType } from '../utils/types/nullable.type';
import { QueryUserDto } from './dto/query-user.dto';
import { User } from './domain/user';
import { UsersService } from './users.service';
import { RolesGuard } from '../roles/roles.guard';
import { infinityPagination } from '../utils/infinity-pagination';

@ApiBearerAuth()
@Roles(RoleEnum.admin)
@UseGuards(AuthGuard('jwt'), RolesGuard)
@ApiTags('Users')
@Controller({
  path: 'users',
  version: '1',
})
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @ApiCreatedResponse({
    type: User,
  })
  @SerializeOptions({
    groups: ['admin'],
  })
  @Post()
  @HttpCode(HttpStatus.CREATED)
  create(@Body() createProfileDto: CreateUserDto): Promise<User> {
    return this.usersService.create(createProfileDto);
  }

  @ApiOkResponse({
    type: InfinityPaginationResponse(User),
  })
  @SerializeOptions({
    groups: ['admin'],
  })
  @Get()
  @HttpCode(HttpStatus.OK)
  async findAll(
    @Query() query: QueryUserDto,
  ): Promise<InfinityPaginationResponseDto<User>> {
    const page = query?.page ?? 1;
    let limit = query?.limit ?? 10;
    if (limit > 50) {
      limit = 50;
    }

    return infinityPagination(
      await this.usersService.findManyWithPagination({
        filterOptions: query?.filters,
        sortOptions: query?.sort,
        paginationOptions: {
          page,
          limit,
        },
      }),
      { page, limit },
    );
  }

  @ApiOkResponse({
    type: User,
  })
  @SerializeOptions({
    groups: ['admin'],
  })
  @Get(':id')
  @HttpCode(HttpStatus.OK)
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  findOne(@Param('id') id: User['id']): Promise<NullableType<User>> {
    return this.usersService.findById(id);
  }

  @ApiOkResponse({
    type: User,
  })
  @SerializeOptions({
    groups: ['admin'],
  })
  @Patch(':id')
  @HttpCode(HttpStatus.OK)
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  update(
    @Param('id') id: User['id'],
    @Body() updateProfileDto: UpdateUserDto,
  ): Promise<User | null> {
    return this.usersService.update(id, updateProfileDto);
  }

  @Delete(':id')
  @ApiParam({
    name: 'id',
    type: String,
    required: true,
  })
  @HttpCode(HttpStatus.NO_CONTENT)
  remove(@Param('id') id: User['id']): Promise<void> {
    return this.usersService.remove(id);
  }
}

================
File: backend/src/users/users.module.ts
================
import { Module } from '@nestjs/common';

import { UsersController } from './users.controller';

import { UsersService } from './users.service';
import { DocumentUserPersistenceModule } from './infrastructure/persistence/document/document-persistence.module';
import { RelationalUserPersistenceModule } from './infrastructure/persistence/relational/relational-persistence.module';
import { DatabaseConfig } from '../database/config/database-config.type';
import databaseConfig from '../database/config/database.config';
import { FilesModule } from '../files/files.module';

// <database-block>
const infrastructurePersistenceModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? DocumentUserPersistenceModule
  : RelationalUserPersistenceModule;
// </database-block>

@Module({
  imports: [
    // import modules, etc.
    infrastructurePersistenceModule,
    FilesModule,
  ],
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService, infrastructurePersistenceModule],
})
export class UsersModule {}

================
File: backend/src/users/users.service.ts
================
import {
  HttpStatus,
  Injectable,
  UnprocessableEntityException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { NullableType } from '../utils/types/nullable.type';
import { FilterUserDto, SortUserDto } from './dto/query-user.dto';
import { UserRepository } from './infrastructure/persistence/user.repository';
import { User } from './domain/user';
import bcrypt from 'bcryptjs';
import { AuthProvidersEnum } from '../auth/auth-providers.enum';
import { FilesService } from '../files/files.service';
import { RoleEnum } from '../roles/roles.enum';
import { StatusEnum } from '../statuses/statuses.enum';
import { IPaginationOptions } from '../utils/types/pagination-options';
import { FileType } from '../files/domain/file';
import { Role } from '../roles/domain/role';
import { Status } from '../statuses/domain/status';
import { UpdateUserDto } from './dto/update-user.dto';

@Injectable()
export class UsersService {
  constructor(
    private readonly usersRepository: UserRepository,
    private readonly filesService: FilesService,
  ) {}

  async create(createUserDto: CreateUserDto): Promise<User> {
    // Do not remove comment below.
    // <creating-property />

    let password: string | undefined = undefined;

    if (createUserDto.password) {
      const salt = await bcrypt.genSalt();
      password = await bcrypt.hash(createUserDto.password, salt);
    }

    let email: string | null = null;

    if (createUserDto.email) {
      const userObject = await this.usersRepository.findByEmail(
        createUserDto.email,
      );
      if (userObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            email: 'emailAlreadyExists',
          },
        });
      }
      email = createUserDto.email;
    }

    let photo: FileType | null | undefined = undefined;

    if (createUserDto.photo?.id) {
      const fileObject = await this.filesService.findById(
        createUserDto.photo.id,
      );
      if (!fileObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            photo: 'imageNotExists',
          },
        });
      }
      photo = fileObject;
    } else if (createUserDto.photo === null) {
      photo = null;
    }

    let role: Role | undefined = undefined;

    if (createUserDto.role?.id) {
      const roleObject = Object.values(RoleEnum)
        .map(String)
        .includes(String(createUserDto.role.id));
      if (!roleObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            role: 'roleNotExists',
          },
        });
      }

      role = {
        id: createUserDto.role.id,
      };
    }

    let status: Status | undefined = undefined;

    if (createUserDto.status?.id) {
      const statusObject = Object.values(StatusEnum)
        .map(String)
        .includes(String(createUserDto.status.id));
      if (!statusObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            status: 'statusNotExists',
          },
        });
      }

      status = {
        id: createUserDto.status.id,
      };
    }

    return this.usersRepository.create({
      // Do not remove comment below.
      // <creating-property-payload />
      firstName: createUserDto.firstName,
      lastName: createUserDto.lastName,
      email: email,
      password: password,
      photo: photo,
      role: role,
      status: status,
      provider: createUserDto.provider ?? AuthProvidersEnum.email,
      socialId: createUserDto.socialId,
    });
  }

  findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterUserDto | null;
    sortOptions?: SortUserDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<User[]> {
    return this.usersRepository.findManyWithPagination({
      filterOptions,
      sortOptions,
      paginationOptions,
    });
  }

  findById(id: User['id']): Promise<NullableType<User>> {
    return this.usersRepository.findById(id);
  }

  findByIds(ids: User['id'][]): Promise<User[]> {
    return this.usersRepository.findByIds(ids);
  }

  findByEmail(email: User['email']): Promise<NullableType<User>> {
    return this.usersRepository.findByEmail(email);
  }

  findBySocialIdAndProvider({
    socialId,
    provider,
  }: {
    socialId: User['socialId'];
    provider: User['provider'];
  }): Promise<NullableType<User>> {
    return this.usersRepository.findBySocialIdAndProvider({
      socialId,
      provider,
    });
  }

  async update(
    id: User['id'],
    updateUserDto: UpdateUserDto,
  ): Promise<User | null> {
    // Do not remove comment below.
    // <updating-property />

    let password: string | undefined = undefined;

    if (updateUserDto.password) {
      const userObject = await this.usersRepository.findById(id);

      if (userObject && userObject?.password !== updateUserDto.password) {
        const salt = await bcrypt.genSalt();
        password = await bcrypt.hash(updateUserDto.password, salt);
      }
    }

    let email: string | null | undefined = undefined;

    if (updateUserDto.email) {
      const userObject = await this.usersRepository.findByEmail(
        updateUserDto.email,
      );

      if (userObject && userObject.id !== id) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            email: 'emailAlreadyExists',
          },
        });
      }

      email = updateUserDto.email;
    } else if (updateUserDto.email === null) {
      email = null;
    }

    let photo: FileType | null | undefined = undefined;

    if (updateUserDto.photo?.id) {
      const fileObject = await this.filesService.findById(
        updateUserDto.photo.id,
      );
      if (!fileObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            photo: 'imageNotExists',
          },
        });
      }
      photo = fileObject;
    } else if (updateUserDto.photo === null) {
      photo = null;
    }

    let role: Role | undefined = undefined;

    if (updateUserDto.role?.id) {
      const roleObject = Object.values(RoleEnum)
        .map(String)
        .includes(String(updateUserDto.role.id));
      if (!roleObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            role: 'roleNotExists',
          },
        });
      }

      role = {
        id: updateUserDto.role.id,
      };
    }

    let status: Status | undefined = undefined;

    if (updateUserDto.status?.id) {
      const statusObject = Object.values(StatusEnum)
        .map(String)
        .includes(String(updateUserDto.status.id));
      if (!statusObject) {
        throw new UnprocessableEntityException({
          status: HttpStatus.UNPROCESSABLE_ENTITY,
          errors: {
            status: 'statusNotExists',
          },
        });
      }

      status = {
        id: updateUserDto.status.id,
      };
    }

    return this.usersRepository.update(id, {
      // Do not remove comment below.
      // <updating-property-payload />
      firstName: updateUserDto.firstName,
      lastName: updateUserDto.lastName,
      email,
      password,
      photo,
      role,
      status,
      provider: updateUserDto.provider,
      socialId: updateUserDto.socialId,
    });
  }

  async remove(id: User['id']): Promise<void> {
    await this.usersRepository.remove(id);
  }
}

================
File: backend/src/utils/dto/infinity-pagination-response.dto.ts
================
import { Type } from '@nestjs/common';
import { ApiProperty } from '@nestjs/swagger';

export class InfinityPaginationResponseDto<T> {
  data: T[];
  hasNextPage: boolean;
}

export function InfinityPaginationResponse<T>(classReference: Type<T>) {
  abstract class Pagination {
    @ApiProperty({ type: [classReference] })
    data!: T[];

    @ApiProperty({
      type: Boolean,
      example: true,
    })
    hasNextPage: boolean;
  }

  Object.defineProperty(Pagination, 'name', {
    writable: false,
    value: `InfinityPagination${classReference.name}ResponseDto`,
  });

  return Pagination;
}

================
File: backend/src/utils/transformers/lower-case.transformer.ts
================
import { TransformFnParams } from 'class-transformer/types/interfaces';
import { MaybeType } from '../types/maybe.type';

export const lowerCaseTransformer = (
  params: TransformFnParams,
): MaybeType<string> => params.value?.toLowerCase().trim();

================
File: backend/src/utils/types/deep-partial.type.ts
================
export type DeepPartial<T> = {
  [P in keyof T]?: DeepPartial<T[P]>;
};

================
File: backend/src/utils/types/maybe.type.ts
================
export type MaybeType<T> = T | undefined;

================
File: backend/src/utils/types/nullable.type.ts
================
export type NullableType<T> = T | null;

================
File: backend/src/utils/types/or-never.type.ts
================
export type OrNeverType<T> = T | never;

================
File: backend/src/utils/types/pagination-options.ts
================
export interface IPaginationOptions {
  page: number;
  limit: number;
}

================
File: backend/src/utils/deep-resolver.ts
================
async function deepResolvePromises(input) {
  if (input instanceof Promise) {
    return await input;
  }

  if (Array.isArray(input)) {
    const resolvedArray = await Promise.all(input.map(deepResolvePromises));
    return resolvedArray;
  }

  if (input instanceof Date) {
    return input;
  }

  if (typeof input === 'object' && input !== null) {
    const keys = Object.keys(input);
    const resolvedObject = {};

    for (const key of keys) {
      const resolvedValue = await deepResolvePromises(input[key]);
      resolvedObject[key] = resolvedValue;
    }

    return resolvedObject;
  }

  return input;
}

export default deepResolvePromises;

================
File: backend/src/utils/document-entity-helper.ts
================
import { Transform } from 'class-transformer';

export class EntityDocumentHelper {
  @Transform(
    (value) => {
      if ('value' in value) {
        // https://github.com/typestack/class-transformer/issues/879
        return value.obj[value.key].toString();
      }

      return 'unknown value';
    },
    {
      toPlainOnly: true,
    },
  )
  public _id: string;
}

================
File: backend/src/utils/infinity-pagination.ts
================
import { IPaginationOptions } from './types/pagination-options';
import { InfinityPaginationResponseDto } from './dto/infinity-pagination-response.dto';

export const infinityPagination = <T>(
  data: T[],
  options: IPaginationOptions,
): InfinityPaginationResponseDto<T> => {
  return {
    data,
    hasNextPage: data.length === options.limit,
  };
};

================
File: backend/src/utils/relational-entity-helper.ts
================
import { instanceToPlain } from 'class-transformer';
import { AfterLoad, BaseEntity } from 'typeorm';

export class EntityRelationalHelper extends BaseEntity {
  __entity?: string;

  @AfterLoad()
  setEntityName() {
    this.__entity = this.constructor.name;
  }

  toJSON() {
    return instanceToPlain(this);
  }
}

================
File: backend/src/utils/serializer.interceptor.ts
================
import {
  Injectable,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import deepResolvePromises from './deep-resolver';

@Injectable()
export class ResolvePromisesInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {
    return next.handle().pipe(map((data) => deepResolvePromises(data)));
  }
}

================
File: backend/src/utils/validate-config.ts
================
import { plainToClass } from 'class-transformer';
import { validateSync } from 'class-validator';
import { ClassConstructor } from 'class-transformer/types/interfaces';

function validateConfig<T extends object>(
  config: Record<string, unknown>,
  envVariablesClass: ClassConstructor<T>,
) {
  const validatedConfig = plainToClass(envVariablesClass, config, {
    enableImplicitConversion: true,
  });
  const errors = validateSync(validatedConfig, {
    skipMissingProperties: false,
  });

  if (errors.length > 0) {
    throw new Error(errors.toString());
  }
  return validatedConfig;
}

export default validateConfig;

================
File: backend/src/utils/validation-options.ts
================
import {
  HttpStatus,
  UnprocessableEntityException,
  ValidationError,
  ValidationPipeOptions,
} from '@nestjs/common';

function generateErrors(errors: ValidationError[]) {
  return errors.reduce(
    (accumulator, currentValue) => ({
      ...accumulator,
      [currentValue.property]:
        (currentValue.children?.length ?? 0) > 0
          ? generateErrors(currentValue.children ?? [])
          : Object.values(currentValue.constraints ?? {}).join(', '),
    }),
    {},
  );
}

const validationOptions: ValidationPipeOptions = {
  transform: true,
  whitelist: true,
  errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,
  exceptionFactory: (errors: ValidationError[]) => {
    return new UnprocessableEntityException({
      status: HttpStatus.UNPROCESSABLE_ENTITY,
      errors: generateErrors(errors),
    });
  },
};

export default validationOptions;

================
File: backend/src/app.module.ts
================
import { Module } from '@nestjs/common';
import { UsersModule } from './users/users.module';
import { FilesModule } from './files/files.module';
import { AuthModule } from './auth/auth.module';
import databaseConfig from './database/config/database.config';
import authConfig from './auth/config/auth.config';
import appConfig from './config/app.config';
import mailConfig from './mail/config/mail.config';
import fileConfig from './files/config/file.config';
import facebookConfig from './auth-facebook/config/facebook.config';
import googleConfig from './auth-google/config/google.config';
import twitterConfig from './auth-twitter/config/twitter.config';
import appleConfig from './auth-apple/config/apple.config';
import path from 'path';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { AuthAppleModule } from './auth-apple/auth-apple.module';
import { AuthFacebookModule } from './auth-facebook/auth-facebook.module';
import { AuthGoogleModule } from './auth-google/auth-google.module';
import { AuthTwitterModule } from './auth-twitter/auth-twitter.module';
import { I18nModule } from 'nestjs-i18n/dist/i18n.module';
import { HeaderResolver } from 'nestjs-i18n';
import { TypeOrmConfigService } from './database/typeorm-config.service';
import { MailModule } from './mail/mail.module';
import { HomeModule } from './home/home.module';
import { DataSource, DataSourceOptions } from 'typeorm';
import { AllConfigType } from './config/config.type';
import { SessionModule } from './session/session.module';
import { MailerModule } from './mailer/mailer.module';
import { MongooseModule } from '@nestjs/mongoose';
import { MongooseConfigService } from './database/mongoose-config.service';
import { DatabaseConfig } from './database/config/database-config.type';

// <database-block>
const infrastructureDatabaseModule = (databaseConfig() as DatabaseConfig)
  .isDocumentDatabase
  ? MongooseModule.forRootAsync({
      useClass: MongooseConfigService,
    })
  : TypeOrmModule.forRootAsync({
      useClass: TypeOrmConfigService,
      dataSourceFactory: async (options: DataSourceOptions) => {
        return new DataSource(options).initialize();
      },
    });
// </database-block>

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      load: [
        databaseConfig,
        authConfig,
        appConfig,
        mailConfig,
        fileConfig,
        facebookConfig,
        googleConfig,
        twitterConfig,
        appleConfig,
      ],
      envFilePath: ['.env'],
    }),
    infrastructureDatabaseModule,
    I18nModule.forRootAsync({
      useFactory: (configService: ConfigService<AllConfigType>) => ({
        fallbackLanguage: configService.getOrThrow('app.fallbackLanguage', {
          infer: true,
        }),
        loaderOptions: { path: path.join(__dirname, '/i18n/'), watch: true },
      }),
      resolvers: [
        {
          use: HeaderResolver,
          useFactory: (configService: ConfigService<AllConfigType>) => {
            return [
              configService.get('app.headerLanguage', {
                infer: true,
              }),
            ];
          },
          inject: [ConfigService],
        },
      ],
      imports: [ConfigModule],
      inject: [ConfigService],
    }),
    UsersModule,
    FilesModule,
    AuthModule,
    AuthFacebookModule,
    AuthGoogleModule,
    AuthTwitterModule,
    AuthAppleModule,
    SessionModule,
    MailModule,
    MailerModule,
    HomeModule,
  ],
})
export class AppModule {}

================
File: backend/src/main.ts
================
import 'dotenv/config';
import {
  ClassSerializerInterceptor,
  ValidationPipe,
  VersioningType,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory, Reflector } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { useContainer } from 'class-validator';
import { AppModule } from './app.module';
import validationOptions from './utils/validation-options';
import { AllConfigType } from './config/config.type';
import { ResolvePromisesInterceptor } from './utils/serializer.interceptor';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { cors: true });
  useContainer(app.select(AppModule), { fallbackOnErrors: true });
  const configService = app.get(ConfigService<AllConfigType>);

  app.enableShutdownHooks();
  app.setGlobalPrefix(
    configService.getOrThrow('app.apiPrefix', { infer: true }),
    {
      exclude: ['/'],
    },
  );
  app.enableVersioning({
    type: VersioningType.URI,
  });
  app.useGlobalPipes(new ValidationPipe(validationOptions));
  app.useGlobalInterceptors(
    // ResolvePromisesInterceptor is used to resolve promises in responses because class-transformer can't do it
    // https://github.com/typestack/class-transformer/issues/549
    new ResolvePromisesInterceptor(),
    new ClassSerializerInterceptor(app.get(Reflector)),
  );

  const options = new DocumentBuilder()
    .setTitle('API')
    .setDescription('API docs')
    .setVersion('1.0')
    .addBearerAuth()
    .build();

  const document = SwaggerModule.createDocument(app, options);
  SwaggerModule.setup('docs', app, document);

  await app.listen(configService.getOrThrow('app.port', { infer: true }));
}
void bootstrap();

================
File: backend/test/admin/auth.e2e-spec.ts
================
import request from 'supertest';
import { ADMIN_EMAIL, ADMIN_PASSWORD, APP_URL } from '../utils/constants';

describe('Auth', () => {
  const app = APP_URL;

  describe('Admin', () => {
    it('should successfully login via /api/v1/auth/email/login (POST)', () => {
      return request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: ADMIN_EMAIL, password: ADMIN_PASSWORD })
        .expect(200)
        .expect(({ body }) => {
          expect(body.token).toBeDefined();
          expect(body.user.email).toBeDefined();
          expect(body.user.role).toBeDefined();
        });
    });
  });
});

================
File: backend/test/admin/users.e2e-spec.ts
================
import { APP_URL, ADMIN_EMAIL, ADMIN_PASSWORD } from '../utils/constants';
import request from 'supertest';
import { RoleEnum } from '../../src/roles/roles.enum';
import { StatusEnum } from '../../src/statuses/statuses.enum';

describe('Users Module', () => {
  const app = APP_URL;
  let apiToken;

  beforeAll(async () => {
    await request(app)
      .post('/api/v1/auth/email/login')
      .send({ email: ADMIN_EMAIL, password: ADMIN_PASSWORD })
      .then(({ body }) => {
        apiToken = body.token;
      });
  });

  describe('Update', () => {
    let newUser;
    const newUserEmail = `user-first.${Date.now()}@example.com`;
    const newUserChangedEmail = `user-first-changed.${Date.now()}@example.com`;
    const newUserPassword = `secret`;
    const newUserChangedPassword = `new-secret`;

    beforeAll(async () => {
      await request(app)
        .post('/api/v1/auth/email/register')
        .send({
          email: newUserEmail,
          password: newUserPassword,
          firstName: `First${Date.now()}`,
          lastName: 'E2E',
        });

      await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => {
          newUser = body.user;
        });
    });

    describe('User with "Admin" role', () => {
      it('should change password for existing user: /api/v1/users/:id (PATCH)', () => {
        return request(app)
          .patch(`/api/v1/users/${newUser.id}`)
          .auth(apiToken, {
            type: 'bearer',
          })
          .send({
            email: newUserChangedEmail,
            password: newUserChangedPassword,
          })
          .expect(200);
      });

      describe('Guest', () => {
        it('should login with changed password: /api/v1/auth/email/login (POST)', () => {
          return request(app)
            .post('/api/v1/auth/email/login')
            .send({
              email: newUserChangedEmail,
              password: newUserChangedPassword,
            })
            .expect(200)
            .expect(({ body }) => {
              expect(body.token).toBeDefined();
            });
        });
      });
    });
  });

  describe('Create', () => {
    const newUserByAdminEmail = `user-created-by-admin.${Date.now()}@example.com`;
    const newUserByAdminPassword = `secret`;

    describe('User with "Admin" role', () => {
      it('should fail to create new user with invalid email: /api/v1/users (POST)', () => {
        return request(app)
          .post(`/api/v1/users`)
          .auth(apiToken, {
            type: 'bearer',
          })
          .send({ email: 'fail-data' })
          .expect(422);
      });

      it('should successfully create new user: /api/v1/users (POST)', () => {
        return request(app)
          .post(`/api/v1/users`)
          .auth(apiToken, {
            type: 'bearer',
          })
          .send({
            email: newUserByAdminEmail,
            password: newUserByAdminPassword,
            firstName: `UserByAdmin${Date.now()}`,
            lastName: 'E2E',
            role: {
              id: RoleEnum.user,
            },
            status: {
              id: StatusEnum.active,
            },
          })
          .expect(201);
      });

      describe('Guest', () => {
        it('should successfully login via created by admin user: /api/v1/auth/email/login (GET)', () => {
          return request(app)
            .post('/api/v1/auth/email/login')
            .send({
              email: newUserByAdminEmail,
              password: newUserByAdminPassword,
            })
            .expect(200)
            .expect(({ body }) => {
              expect(body.token).toBeDefined();
            });
        });
      });
    });
  });

  describe('Get many', () => {
    describe('User with "Admin" role', () => {
      it('should get list of users: /api/v1/users (GET)', () => {
        return request(app)
          .get(`/api/v1/users`)
          .auth(apiToken, {
            type: 'bearer',
          })
          .expect(200)
          .send()
          .expect(({ body }) => {
            expect(body.data[0].provider).toBeDefined();
            expect(body.data[0].email).toBeDefined();
            expect(body.data[0].hash).not.toBeDefined();
            expect(body.data[0].password).not.toBeDefined();
          });
      });
    });
  });
});

================
File: backend/test/user/auth.e2e-spec.ts
================
import request from 'supertest';
import {
  APP_URL,
  TESTER_EMAIL,
  TESTER_PASSWORD,
  MAIL_HOST,
  MAIL_PORT,
} from '../utils/constants';

describe('Auth Module', () => {
  const app = APP_URL;
  const mail = `http://${MAIL_HOST}:${MAIL_PORT}`;
  const newUserFirstName = `Tester${Date.now()}`;
  const newUserLastName = `E2E`;
  const newUserEmail = `User.${Date.now()}@example.com`;
  const newUserPassword = `secret`;

  describe('Registration', () => {
    it('should fail with exists email: /api/v1/auth/email/register (POST)', () => {
      return request(app)
        .post('/api/v1/auth/email/register')
        .send({
          email: TESTER_EMAIL,
          password: TESTER_PASSWORD,
          firstName: 'Tester',
          lastName: 'E2E',
        })
        .expect(422)
        .expect(({ body }) => {
          expect(body.errors.email).toBeDefined();
        });
    });

    it('should successfully: /api/v1/auth/email/register (POST)', async () => {
      return request(app)
        .post('/api/v1/auth/email/register')
        .send({
          email: newUserEmail,
          password: newUserPassword,
          firstName: newUserFirstName,
          lastName: newUserLastName,
        })
        .expect(204);
    });

    describe('Login', () => {
      it('should successfully with unconfirmed email: /api/v1/auth/email/login (POST)', () => {
        return request(app)
          .post('/api/v1/auth/email/login')
          .send({ email: newUserEmail, password: newUserPassword })
          .expect(200)
          .expect(({ body }) => {
            expect(body.token).toBeDefined();
          });
      });
    });

    describe('Confirm email', () => {
      it('should successfully: /api/v1/auth/email/confirm (POST)', async () => {
        const hash = await request(mail)
          .get('/email')
          .then(({ body }) =>
            body
              .find(
                (letter) =>
                  letter.to[0].address.toLowerCase() ===
                    newUserEmail.toLowerCase() &&
                  /.*confirm\-email\?hash\=(\S+).*/g.test(letter.text),
              )
              ?.text.replace(/.*confirm\-email\?hash\=(\S+).*/g, '$1'),
          );

        return request(app)
          .post('/api/v1/auth/email/confirm')
          .send({
            hash,
          })
          .expect(204);
      });

      it('should fail for already confirmed email: /api/v1/auth/email/confirm (POST)', async () => {
        const hash = await request(mail)
          .get('/email')
          .then(({ body }) =>
            body
              .find(
                (letter) =>
                  letter.to[0].address.toLowerCase() ===
                    newUserEmail.toLowerCase() &&
                  /.*confirm\-email\?hash\=(\S+).*/g.test(letter.text),
              )
              ?.text.replace(/.*confirm\-email\?hash\=(\S+).*/g, '$1'),
          );

        return request(app)
          .post('/api/v1/auth/email/confirm')
          .send({
            hash,
          })
          .expect(404);
      });
    });
  });

  describe('Login', () => {
    it('should successfully for user with confirmed email: /api/v1/auth/email/login (POST)', () => {
      return request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .expect(200)
        .expect(({ body }) => {
          expect(body.token).toBeDefined();
          expect(body.refreshToken).toBeDefined();
          expect(body.tokenExpires).toBeDefined();
          expect(body.user.email).toBeDefined();
          expect(body.user.hash).not.toBeDefined();
          expect(body.user.password).not.toBeDefined();
        });
    });
  });

  describe('Logged in user', () => {
    let newUserApiToken;

    beforeAll(async () => {
      await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => {
          newUserApiToken = body.token;
        });
    });

    it('should retrieve your own profile: /api/v1/auth/me (GET)', async () => {
      await request(app)
        .get('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .send()
        .expect(({ body }) => {
          expect(body.provider).toBeDefined();
          expect(body.email).toBeDefined();
          expect(body.hash).not.toBeDefined();
          expect(body.password).not.toBeDefined();
        });
    });

    it('should get new refresh token: /api/v1/auth/refresh (POST)', async () => {
      let newUserRefreshToken = await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => body.refreshToken);

      newUserRefreshToken = await request(app)
        .post('/api/v1/auth/refresh')
        .auth(newUserRefreshToken, {
          type: 'bearer',
        })
        .send()
        .then(({ body }) => body.refreshToken);

      await request(app)
        .post('/api/v1/auth/refresh')
        .auth(newUserRefreshToken, {
          type: 'bearer',
        })
        .send()
        .expect(({ body }) => {
          expect(body.token).toBeDefined();
          expect(body.refreshToken).toBeDefined();
          expect(body.tokenExpires).toBeDefined();
        });
    });

    it('should fail on the second attempt to refresh token with the same token: /api/v1/auth/refresh (POST)', async () => {
      const newUserRefreshToken = await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => body.refreshToken);

      await request(app)
        .post('/api/v1/auth/refresh')
        .auth(newUserRefreshToken, {
          type: 'bearer',
        })
        .send();

      await request(app)
        .post('/api/v1/auth/refresh')
        .auth(newUserRefreshToken, {
          type: 'bearer',
        })
        .send()
        .expect(401);
    });

    it('should update profile successfully: /api/v1/auth/me (PATCH)', async () => {
      const newUserNewName = Date.now();
      const newUserNewPassword = 'new-secret';
      const newUserApiToken = await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => body.token);

      await request(app)
        .patch('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .send({
          firstName: newUserNewName,
          password: newUserNewPassword,
        })
        .expect(422);

      await request(app)
        .patch('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .send({
          firstName: newUserNewName,
          password: newUserNewPassword,
          oldPassword: newUserPassword,
        })
        .expect(200);

      await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserNewPassword })
        .expect(200)
        .expect(({ body }) => {
          expect(body.token).toBeDefined();
        });

      await request(app)
        .patch('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .send({ password: newUserPassword, oldPassword: newUserNewPassword })
        .expect(200);
    });

    it('should update profile email successfully: /api/v1/auth/me (PATCH)', async () => {
      const newUserFirstName = `Tester${Date.now()}`;
      const newUserLastName = `E2E`;
      const newUserEmail = `user.${Date.now()}@example.com`;
      const newUserPassword = `secret`;
      const newUserNewEmail = `new.${newUserEmail}`;

      await request(app)
        .post('/api/v1/auth/email/register')
        .send({
          email: newUserEmail,
          password: newUserPassword,
          firstName: newUserFirstName,
          lastName: newUserLastName,
        })
        .expect(204);

      const newUserApiToken = await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => body.token);

      await request(app)
        .patch('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .send({
          email: newUserNewEmail,
        })
        .expect(200);

      const hash = await request(mail)
        .get('/email')
        .then(({ body }) =>
          body
            .find((letter) => {
              return (
                letter.to[0].address.toLowerCase() ===
                  newUserNewEmail.toLowerCase() &&
                /.*confirm\-new\-email\?hash\=(\S+).*/g.test(letter.text)
              );
            })
            ?.text.replace(/.*confirm\-new\-email\?hash\=(\S+).*/g, '$1'),
        );

      await request(app)
        .get('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .expect(200)
        .expect(({ body }) => {
          expect(body.email).not.toBe(newUserNewEmail);
        });

      await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserNewEmail, password: newUserPassword })
        .expect(422);

      await request(app)
        .post('/api/v1/auth/email/confirm/new')
        .send({
          hash,
        })
        .expect(204);

      await request(app)
        .get('/api/v1/auth/me')
        .auth(newUserApiToken, {
          type: 'bearer',
        })
        .expect(200)
        .expect(({ body }) => {
          expect(body.email).toBe(newUserNewEmail);
        });

      await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserNewEmail, password: newUserPassword })
        .expect(200);
    });

    it('should delete profile successfully: /api/v1/auth/me (DELETE)', async () => {
      const newUserApiToken = await request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .then(({ body }) => body.token);

      await request(app).delete('/api/v1/auth/me').auth(newUserApiToken, {
        type: 'bearer',
      });

      return request(app)
        .post('/api/v1/auth/email/login')
        .send({ email: newUserEmail, password: newUserPassword })
        .expect(422);
    });
  });
});

================
File: backend/test/utils/constants.ts
================
export const APP_URL = `http://localhost:${process.env.APP_PORT}`;
export const TESTER_EMAIL = 'john.doe@example.com';
export const TESTER_PASSWORD = 'secret';
export const ADMIN_EMAIL = 'admin@example.com';
export const ADMIN_PASSWORD = 'secret';
export const MAIL_HOST = process.env.MAIL_HOST;
export const MAIL_PORT = process.env.MAIL_CLIENT_PORT;

================
File: backend/test/jest-e2e.json
================
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  }
}

================
File: backend/.all-contributorsrc
================
{
  "projectName": "nestjs-boilerplate",
  "projectOwner": "brocoders",
  "files": [
    "README.md"
  ],
  "commitType": "docs",
  "commitConvention": "angular",
  "contributorsPerLine": 7,
  "contributors": [
    {
      "login": "Shchepotin",
      "name": "Vladyslav Shchepotin",
      "avatar_url": "https://avatars.githubusercontent.com/u/6001723?v=4",
      "profile": "https://github.com/Shchepotin",
      "contributions": [
        "maintenance",
        "doc",
        "code"
      ]
    },
    {
      "login": "SergeiLomako",
      "name": "SergeiLomako",
      "avatar_url": "https://avatars.githubusercontent.com/u/31205374?v=4",
      "profile": "https://github.com/SergeiLomako",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "ElenVlass",
      "name": "Elena Vlasenko",
      "avatar_url": "https://avatars.githubusercontent.com/u/72293912?v=4",
      "profile": "https://github.com/ElenVlass",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "sars",
      "name": "Rodion",
      "avatar_url": "https://avatars.githubusercontent.com/u/226194?v=4",
      "profile": "http://brocoders.com",
      "contributions": [
        "business"
      ]
    }
  ]
}

================
File: backend/.dockerignore
================
/node_modules
/.data
/dist
/files

================
File: backend/.gitignore
================
# compiled output
/dist
/node_modules

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

.data
/files
.env
/ormconfig.json

================
File: backend/.hygen.js
================
module.exports = {
  templates: `${__dirname}/.hygen`,
};

================
File: backend/.nvmrc
================
22.11.0

================
File: backend/.prettierrc
================
{
  "singleQuote": true,
  "trailingComma": "all"
}

================
File: backend/CHANGELOG.md
================
## [1.2.0](https://github.com/brocoders/nestjs-boilerplate/compare/1.1.0...1.2.0) (2024-06-05)


### Features

* **auth:** update email ([9e180c9](https://github.com/brocoders/nestjs-boilerplate/commit/9e180c985bf4730405da8acb0b7e26c96c630252))
* **document:** add domain condition to document ([becb3c3](https://github.com/brocoders/nestjs-boilerplate/commit/becb3c368ee0df2eeca72176eb9d8250fdd5d46e))
* **install-scripts:** add option to select database ([2c204a6](https://github.com/brocoders/nestjs-boilerplate/commit/2c204a67198c3879a13123f2e3293d5dd322bbab))
* **resource:** generate for hexagonal architecture ([81b54b1](https://github.com/brocoders/nestjs-boilerplate/commit/81b54b10c9542abc9ff537e5ebbc4616e4c0de7a))
* **swagger:** add DTOs to responses [#1504](https://github.com/brocoders/nestjs-boilerplate/issues/1504) ([0071202](https://github.com/brocoders/nestjs-boilerplate/commit/0071202a90e9071eeb217326fefec4eccab85550))
* **tests:** add separated container ([16c9f0b](https://github.com/brocoders/nestjs-boilerplate/commit/16c9f0b671c1f249511dbe5a8b3f4655381e6510))


### Bug Fixes

* **auth:** missing role after refresh token flow [#1442](https://github.com/brocoders/nestjs-boilerplate/issues/1442) ([493742c](https://github.com/brocoders/nestjs-boilerplate/commit/493742c39dec7ff1d2299befec7bcdfd8295b96b))
* **auth:** refresh token only one time use ([0e58e08](https://github.com/brocoders/nestjs-boilerplate/commit/0e58e0872a852eaa5e0013fd2e81a9fffe2740b1))
* **deps:** update aws-sdk-js-v3 monorepo to v3.525.0 ([71fbeb3](https://github.com/brocoders/nestjs-boilerplate/commit/71fbeb3c94d3db9d6963687ccfa7efa2a63bb539))
* **deps:** update aws-sdk-js-v3 monorepo to v3.529.1 ([9cc6a60](https://github.com/brocoders/nestjs-boilerplate/commit/9cc6a60fb61ae2c3c3d18eface8a7b94b315fd7f))
* **deps:** update aws-sdk-js-v3 monorepo to v3.535.0 ([0245df7](https://github.com/brocoders/nestjs-boilerplate/commit/0245df72bb01724862db55b5a5cd9a0390fcdb48))
* **deps:** update aws-sdk-js-v3 monorepo to v3.540.0 ([4e79414](https://github.com/brocoders/nestjs-boilerplate/commit/4e794146e6769fdddacfd1d3a07a89ae8f039dda))
* **deps:** update aws-sdk-js-v3 monorepo to v3.554.0 ([33a0fe1](https://github.com/brocoders/nestjs-boilerplate/commit/33a0fe1d3c46196b135e14da670a08c29c0a4a4e))
* **deps:** update aws-sdk-js-v3 monorepo to v3.556.0 ([ba66854](https://github.com/brocoders/nestjs-boilerplate/commit/ba668542284a203f049fbe4b3825dc51c19d213a))
* **deps:** update aws-sdk-js-v3 monorepo to v3.564.0 ([d8cea5f](https://github.com/brocoders/nestjs-boilerplate/commit/d8cea5f3ce2493577f12c370957e22dcc0b62d25))
* **deps:** update aws-sdk-js-v3 monorepo to v3.565.0 ([87ba95d](https://github.com/brocoders/nestjs-boilerplate/commit/87ba95d75ea96fc5a12c2d51aadd59811c911885))
* **deps:** update aws-sdk-js-v3 monorepo to v3.567.0 ([2ad8c32](https://github.com/brocoders/nestjs-boilerplate/commit/2ad8c3248227a1d9c8526674bfa5253abcaa4043))
* **deps:** update aws-sdk-js-v3 monorepo to v3.569.0 ([dafecc7](https://github.com/brocoders/nestjs-boilerplate/commit/dafecc7d31084f95304f612c823ac70d61ff3ee1))
* **deps:** update aws-sdk-js-v3 monorepo to v3.582.0 ([6e8cee0](https://github.com/brocoders/nestjs-boilerplate/commit/6e8cee0cc9f6581a4d1e906ae3b3cd5cbc31cc4f))
* **deps:** update aws-sdk-js-v3 monorepo to v3.583.0 ([05556dd](https://github.com/brocoders/nestjs-boilerplate/commit/05556dd5d994fa29c6b24f16250d591326edde0c))
* **deps:** update dependency @nestjs/config to v3.2.1 ([a0ca2d0](https://github.com/brocoders/nestjs-boilerplate/commit/a0ca2d03efadd71db6cf29d89f43d489434eb487))
* **deps:** update dependency @nestjs/config to v3.2.2 ([85e6888](https://github.com/brocoders/nestjs-boilerplate/commit/85e6888b19dca38f00d5339f0d2ee3b6ee20563d))
* **deps:** update dependency @nestjs/mongoose to v10.0.5 ([5f0912c](https://github.com/brocoders/nestjs-boilerplate/commit/5f0912cc5867adbcdcff93a7518a61684a1eee7a))
* **deps:** update dependency @nestjs/mongoose to v10.0.6 ([48e484a](https://github.com/brocoders/nestjs-boilerplate/commit/48e484a14b8bc7a4b8cac6f67553038ca6a65fa8))
* **deps:** update dependency @nestjs/swagger to v7.3.1 ([4f28a24](https://github.com/brocoders/nestjs-boilerplate/commit/4f28a2496e619b9196e93b48b790eff340c99e9d))
* **deps:** update dependency google-auth-library to v9.10.0 ([a26b138](https://github.com/brocoders/nestjs-boilerplate/commit/a26b1380e1fe4c1337ab45e9bce3e4af1726d3df))
* **deps:** update dependency google-auth-library to v9.7.0 ([1e22eea](https://github.com/brocoders/nestjs-boilerplate/commit/1e22eeacba5270591361815cf3185a19a1627186))
* **deps:** update dependency google-auth-library to v9.8.0 ([60924ae](https://github.com/brocoders/nestjs-boilerplate/commit/60924ae59f8bee3cb5345b645eb022edc1ff01c0))
* **deps:** update dependency google-auth-library to v9.9.0 ([6bbd949](https://github.com/brocoders/nestjs-boilerplate/commit/6bbd94959feadfb221ed4d93f93cb54a47a6a3f7))
* **deps:** update dependency mongoose to v8.2.1 ([b16f037](https://github.com/brocoders/nestjs-boilerplate/commit/b16f0373b8606dce25c8b702f79c92f4d6d901dc))
* **deps:** update dependency mongoose to v8.2.2 ([8fb2d23](https://github.com/brocoders/nestjs-boilerplate/commit/8fb2d2310d1f6023594d273cdf2b6791e63509ad))
* **deps:** update dependency mongoose to v8.3.1 ([67b5b01](https://github.com/brocoders/nestjs-boilerplate/commit/67b5b010b3e54180522db6b99cef0830fe692e23))
* **deps:** update dependency mongoose to v8.3.2 ([802ff5a](https://github.com/brocoders/nestjs-boilerplate/commit/802ff5aad8d3edc5c2ee2d59221f5023d01cb3cf))
* **deps:** update dependency mongoose to v8.3.3 ([ee7a2b6](https://github.com/brocoders/nestjs-boilerplate/commit/ee7a2b69bbd1e2142538adf260bdedcad63126e6))
* **deps:** update dependency mongoose to v8.3.4 ([dd76916](https://github.com/brocoders/nestjs-boilerplate/commit/dd769161587ef767919f9835d78d38f1fc68a697))
* **deps:** update dependency mongoose to v8.4.0 ([85c97e1](https://github.com/brocoders/nestjs-boilerplate/commit/85c97e1df7132eece3779a14e7f4034e48568a18))
* **deps:** update dependency mongoose to v8.4.1 ([adb7713](https://github.com/brocoders/nestjs-boilerplate/commit/adb7713f697408b9e8225508022ec6845cf41631))
* **deps:** update dependency nodemailer to v6.9.11 ([f7dafaa](https://github.com/brocoders/nestjs-boilerplate/commit/f7dafaa295ac99a7cd8c2d43194986fab33a54ed))
* **deps:** update dependency nodemailer to v6.9.12 ([0c26e2a](https://github.com/brocoders/nestjs-boilerplate/commit/0c26e2aa37f06899d0c3c6b4db38661dbf415b6d))
* **deps:** update dependency nodemailer to v6.9.13 ([bf42e74](https://github.com/brocoders/nestjs-boilerplate/commit/bf42e74cc4f11833608837d0b658a1c1f6e8687b))
* **deps:** update dependency pg to v8.11.4 ([a343c03](https://github.com/brocoders/nestjs-boilerplate/commit/a343c03caecdc3fb81a531b81ff9dcec04d822fb))
* **deps:** update dependency pg to v8.11.5 ([bd69be5](https://github.com/brocoders/nestjs-boilerplate/commit/bd69be570e57903f7b3bc1f214b00f00e738b874))
* **deps:** update dependency reflect-metadata to v0.2.2 ([33009b3](https://github.com/brocoders/nestjs-boilerplate/commit/33009b3462d01d8bab8c1764a24cc1c5473bbf1e))
* **deps:** update dependency rimraf to v5.0.6 ([45ef8e0](https://github.com/brocoders/nestjs-boilerplate/commit/45ef8e02497edba13af9fc87e8e6e5bcd8deb93b))
* **deps:** update dependency rimraf to v5.0.7 ([b9220a0](https://github.com/brocoders/nestjs-boilerplate/commit/b9220a062bff7a81ae28136574fb6c7e3f027cc1))
* **deps:** update dependency swagger-ui-express to v5.0.1 ([0da3df0](https://github.com/brocoders/nestjs-boilerplate/commit/0da3df031c8d5e0560f21015542ff7ecb34dbffd))
* **deps:** update nest monorepo to v10.3.4 ([cfe1f18](https://github.com/brocoders/nestjs-boilerplate/commit/cfe1f1823f11c503a1939a1c62f93f318d44bb79))
* **deps:** update nest monorepo to v10.3.5 ([210df19](https://github.com/brocoders/nestjs-boilerplate/commit/210df19c01a1036e135b8960162d7d2d03907c17))
* **deps:** update nest monorepo to v10.3.6 ([50e2d4b](https://github.com/brocoders/nestjs-boilerplate/commit/50e2d4b2d9ec414975c19a7f744c7e544f42993a))
* **deps:** update nest monorepo to v10.3.7 ([b7e8a9b](https://github.com/brocoders/nestjs-boilerplate/commit/b7e8a9b5be6d67bd22c8678c39aa3b3a5d38d8dd))
* **deps:** update nest monorepo to v10.3.8 ([766ab6e](https://github.com/brocoders/nestjs-boilerplate/commit/766ab6ec21beecc672808ea97044ea1ad50c63b8))
* **deps:** upgrade mongoose ([acc79ac](https://github.com/brocoders/nestjs-boilerplate/commit/acc79acbddfe7fb5bcc5c487c494119d98c10b1a))
* **document:** find one and update ([9e2b0c5](https://github.com/brocoders/nestjs-boilerplate/commit/9e2b0c592411883d61f7670fdf8325366e33dfcd))
* **files:** remove endpoint for download file from swagger [#1533](https://github.com/brocoders/nestjs-boilerplate/issues/1533) ([2e9f73e](https://github.com/brocoders/nestjs-boilerplate/commit/2e9f73ef8e570f456f78165ecf4f2e1a4d067802))
* **files:** swagger ([11ae998](https://github.com/brocoders/nestjs-boilerplate/commit/11ae998015bad234a85f15d22d19c82501e798a4))
* **install-scripts:** correct removing twitter deps ([7fc7d8f](https://github.com/brocoders/nestjs-boilerplate/commit/7fc7d8fa498a87a6e8cce4bf5c0fc685c447cbc6))
* **swc:** change path to relative ([0e80661](https://github.com/brocoders/nestjs-boilerplate/commit/0e8066139faf055d0b527a02659c2cfa45076153))
* **tests:** add --passWithNoTests to pre-commit [#1498](https://github.com/brocoders/nestjs-boilerplate/issues/1498) ([c5c4c2b](https://github.com/brocoders/nestjs-boilerplate/commit/c5c4c2b251b1cd551c76e694517c0e1e62003c06))
* **tests:** overriding .env file ([d9a7fd9](https://github.com/brocoders/nestjs-boilerplate/commit/d9a7fd9a5ff74491e629ea9c5fca1e66ecea316b))
* **users:** emailAlreadyExists error in update function ([ab530c4](https://github.com/brocoders/nestjs-boilerplate/commit/ab530c4da7559bf2487698982799920a4d10e345))


### Documentation

* **architecture:** add new page [#1512](https://github.com/brocoders/nestjs-boilerplate/issues/1512) ([726d978](https://github.com/brocoders/nestjs-boilerplate/commit/726d978296dee03de40a8fec6633ea4776172df8))
* **architecture:** add Q&A ([afbc519](https://github.com/brocoders/nestjs-boilerplate/commit/afbc5193d08549703602c78ff17976cbb69ee8ab))
* **auth:** add info about JWT strategy ([4ab0da9](https://github.com/brocoders/nestjs-boilerplate/commit/4ab0da9836772b0dde63cf391e68e061b971d8da))
* **cli:** add new page ([d3a1b59](https://github.com/brocoders/nestjs-boilerplate/commit/d3a1b5915833b0fee62de143bf7a310e7c3b4456))
* **database:** add section about databases ([11b58ea](https://github.com/brocoders/nestjs-boilerplate/commit/11b58eacee2975d2795acf64a1ef7def669b416b))
* **database:** typos ([b60d4ec](https://github.com/brocoders/nestjs-boilerplate/commit/b60d4ec4ce3fc065c59e84db73c539b0654edd3f))
* update .all-contributorsrc ([d523e26](https://github.com/brocoders/nestjs-boilerplate/commit/d523e2638a649817883c57971914cdeccdd04bde))
* update README.md ([37af8e8](https://github.com/brocoders/nestjs-boilerplate/commit/37af8e8e9695b4d0db919fd461e6aa4a8dd3995f))


### Code Refactoring

* correct optional properties ([c108a30](https://github.com/brocoders/nestjs-boilerplate/commit/c108a30bc36787501cdee22de6e223ecb37824da))
* **database:** change relation ([8c1df7a](https://github.com/brocoders/nestjs-boilerplate/commit/8c1df7a8a3ba708c4fac416b99b1bbadad69b52b))
* replace http exception ([9b38243](https://github.com/brocoders/nestjs-boilerplate/commit/9b382431e4c432f1f2bc286afc0893de7f13a6c7))
* **repositories:** simplify ([2896589](https://github.com/brocoders/nestjs-boilerplate/commit/2896589f52d2df025f12069ba82ba4fac1db8ebd))


### Tests

* **user:** add test for updating email ([3110e44](https://github.com/brocoders/nestjs-boilerplate/commit/3110e449350f2808dc374a4f1fbbd6bec96c7849))


### Continuous Integration

* add database selection ([e0a4f32](https://github.com/brocoders/nestjs-boilerplate/commit/e0a4f32711e7b0e5c821d67be6e3c7504320dcfd))

## 1.1.0 (2024-02-25)


### Features

* add expires to url ([8e17307](https://github.com/brocoders/nestjs-boilerplate/commit/8e173071b61be3c4adacbd32b89a232c3399e83f))
* add factory for seed ([d826030](https://github.com/brocoders/nestjs-boilerplate/commit/d8260306b168955a1e5ac9f501216d40ebf750a1))
* add install script ([1bddd8e](https://github.com/brocoders/nestjs-boilerplate/commit/1bddd8e25addeb995d26ef789f9eed4a94af928f))
* add LICENSE ([dee24cf](https://github.com/brocoders/nestjs-boilerplate/commit/dee24cf315a0c9c0fed3cdcc57b03f7d74cc6eeb))
* add refresh token ([c1cd15f](https://github.com/brocoders/nestjs-boilerplate/commit/c1cd15ff96e90a17e12786fa0fb9e9b15f850585))
* add validation for config ([7f8b2bc](https://github.com/brocoders/nestjs-boilerplate/commit/7f8b2bced939d429c2d0e114df23905c4557d2bd))
* **app:** improved boilerplate with new features from NestJS v8 ([a59a18e](https://github.com/brocoders/nestjs-boilerplate/commit/a59a18e032c7127d42550c34747acab0a23049bc))
* **app:** remove deprecated libs ([654f4e6](https://github.com/brocoders/nestjs-boilerplate/commit/654f4e68a30464245d42aa781caa55f0cd3700a1))
* **app:** remove deprecated libs ([6a1111d](https://github.com/brocoders/nestjs-boilerplate/commit/6a1111ddd36c4a1ddf697c7debaa365e8a62e53f))
* **app:** remove deprecated libs ([f4a320e](https://github.com/brocoders/nestjs-boilerplate/commit/f4a320e9414a3bd2df0e5b7a1ba9420b916dc324))
* **CI:** added lint check ([ab933c3](https://github.com/brocoders/nestjs-boilerplate/commit/ab933c38933b1d1686c566d4d5d10ff11a96e564))
* **database:** added SSL connection config ([186e239](https://github.com/brocoders/nestjs-boilerplate/commit/186e23993643690c316241f3ad51685677a7021e))
* **database:** support MongoDB ([cf7e53f](https://github.com/brocoders/nestjs-boilerplate/commit/cf7e53f7a2c492be45f489ed1d33c6119483a209))
* **dependabot:** added updates for docker ([ca0fc31](https://github.com/brocoders/nestjs-boilerplate/commit/ca0fc31ec835dea31205420ae8d9d03395391236))
* **docker:** upgrade docker-compose to docker compose ([0dcf84d](https://github.com/brocoders/nestjs-boilerplate/commit/0dcf84d358e9dda6fa9646224197bb1f245bb545))
* **file:** add presigned s3 driver ([6d4463d](https://github.com/brocoders/nestjs-boilerplate/commit/6d4463dabc854d9c9a75a243c642285c51e0658d))
* **readme:** added database utils ([d28710e](https://github.com/brocoders/nestjs-boilerplate/commit/d28710e7b31fadc97bfe912104165e783d836802))
* remove @nestjs-modules/mailer ([ab493c3](https://github.com/brocoders/nestjs-boilerplate/commit/ab493c3379802195afec91545205fc7affd847d8))
* remove admin login endpoint ([59e6476](https://github.com/brocoders/nestjs-boilerplate/commit/59e6476f45fe0eb9d887ebad8d1234b40d2f70d2))
* **seed:** added code generator ([ef1af99](https://github.com/brocoders/nestjs-boilerplate/commit/ef1af99a9649e232106781d5bffd8ccf38a00178))
* update config rule ([e82b684](https://github.com/brocoders/nestjs-boilerplate/commit/e82b684e900d6398ae5d852e5c42617f2dbb448a))
* update issue templates ([825cd50](https://github.com/brocoders/nestjs-boilerplate/commit/825cd50262ecc8452bfa6aba89537b09ca03c57c))
* use confirmation with JWT tokens ([48c9694](https://github.com/brocoders/nestjs-boilerplate/commit/48c96946bf6a5f41b8b16eb1d11809a0fb1a36c1))
* **users:** added filtration and sorting ([7d14369](https://github.com/brocoders/nestjs-boilerplate/commit/7d143696b9a645ea49d56dd6ec445caf8a4d4661))
* **validation:** new logic ([fb9c6a6](https://github.com/brocoders/nestjs-boilerplate/commit/fb9c6a6add9b780ce0fc130222b07a95b513346d))


### Bug Fixes

* **apple:** audience as array ([171d745](https://github.com/brocoders/nestjs-boilerplate/commit/171d745059aff36b85414d8cc75583b231e84314))
* **auth-twitter:** Safeguard against undefined ID in Twitter auth response ([dea6a2c](https://github.com/brocoders/nestjs-boilerplate/commit/dea6a2cdd8505c22cc32ee05956d95f2b1fceaad))
* **auth:** :bug: fixed 500 error on login ([8627644](https://github.com/brocoders/nestjs-boilerplate/commit/8627644ca73d8e6f548f9c51f83200d975f95f18))
* **auth:** :bug: fixed 500 error on login ([33edb5c](https://github.com/brocoders/nestjs-boilerplate/commit/33edb5c21fb94324cc2f6494f25374fa33af7cbb))
* **auth:** FB instance ([19c8b5e](https://github.com/brocoders/nestjs-boilerplate/commit/19c8b5e2703d7944aed8410f24b36f105d1b7b45))
* **auth:** update password ([d2793ca](https://github.com/brocoders/nestjs-boilerplate/commit/d2793ca5bac92b8cd5faf10ff1935cf249e2edba))
* **auth:** validateSocialLogin creates empty users without validation ([b235daa](https://github.com/brocoders/nestjs-boilerplate/commit/b235daa177722c5dc73a28eedcfd1a4ffdb34444))
* **CI:** change branch ([f6275a1](https://github.com/brocoders/nestjs-boilerplate/commit/f6275a10030a150eccb1751f6164fe2f104a1c44))
* **config:** support Windows ([04d2d18](https://github.com/brocoders/nestjs-boilerplate/commit/04d2d185289e291297d268deae49beabc82d720c))
* **deps:** node mailer ([49cf4f1](https://github.com/brocoders/nestjs-boilerplate/commit/49cf4f1aecbe1cb1867ce96253873b05e071bae8))
* **deps:** pin dependencies ([2482f83](https://github.com/brocoders/nestjs-boilerplate/commit/2482f8367da3702f4957af4339c2539e66ef5352))
* **deps:** pin dependency source-map-support to 0.5.21 ([8c811ad](https://github.com/brocoders/nestjs-boilerplate/commit/8c811ad3c7a91b91e6ff4060db3d097b462adda8))
* **deps:** update aws-sdk-js-v3 monorepo to v3.504.0 ([8fe3cec](https://github.com/brocoders/nestjs-boilerplate/commit/8fe3ceccb63193b73f4eda41f89774669715ce68))
* **deps:** update aws-sdk-js-v3 monorepo to v3.515.0 ([665feb3](https://github.com/brocoders/nestjs-boilerplate/commit/665feb35d90fe0fcbe308b3ef684b76e8735cbd7))
* **deps:** update aws-sdk-js-v3 monorepo to v3.521.0 ([aefd4c2](https://github.com/brocoders/nestjs-boilerplate/commit/aefd4c25c0cb3bd4c77b189c9f6cea738197a7ab))
* **deps:** update dependency @aws-sdk/client-s3 to v3.290.0 ([ca9a0f1](https://github.com/brocoders/nestjs-boilerplate/commit/ca9a0f15eac3b44f88999666a26ec6cdf79bf610))
* **deps:** update dependency @aws-sdk/client-s3 to v3.309.0 ([df1ce34](https://github.com/brocoders/nestjs-boilerplate/commit/df1ce34c7af2d137ffb1f0cafddb2497d2caf211))
* **deps:** update dependency @aws-sdk/client-s3 to v3.312.0 ([7e34d25](https://github.com/brocoders/nestjs-boilerplate/commit/7e34d25a88f2b3b4e07712fdddbaacdf8b6b1c0c))
* **deps:** update dependency @aws-sdk/client-s3 to v3.317.0 ([85ebfab](https://github.com/brocoders/nestjs-boilerplate/commit/85ebfab98128d4ad382b8b88c296541a3023227f))
* **deps:** update dependency @aws-sdk/client-s3 to v3.319.0 ([eb185f7](https://github.com/brocoders/nestjs-boilerplate/commit/eb185f71f886c2fb00072d84c428f28e2438e1bb))
* **deps:** update dependency @aws-sdk/client-s3 to v3.321.1 ([1399d6f](https://github.com/brocoders/nestjs-boilerplate/commit/1399d6fe4b21f935f584db2037643489292ce163))
* **deps:** update dependency @aws-sdk/client-s3 to v3.332.0 ([8a4030f](https://github.com/brocoders/nestjs-boilerplate/commit/8a4030fbbd3fa41e644b1da600847bb00c6923d6))
* **deps:** update dependency @aws-sdk/client-s3 to v3.335.0 ([1b66422](https://github.com/brocoders/nestjs-boilerplate/commit/1b66422f6f1f2024842545aa583572e64086b53d))
* **deps:** update dependency @aws-sdk/client-s3 to v3.338.0 ([c89aa15](https://github.com/brocoders/nestjs-boilerplate/commit/c89aa1542efe509400de277f41a9fff745a575cf))
* **deps:** update dependency @aws-sdk/client-s3 to v3.341.0 ([17c05f9](https://github.com/brocoders/nestjs-boilerplate/commit/17c05f937a288d634e55a95c88b37e01ac552b2a))
* **deps:** update dependency @aws-sdk/client-s3 to v3.344.0 ([7db3a48](https://github.com/brocoders/nestjs-boilerplate/commit/7db3a486f0ddb0e5adc064758bf9502ef7e807cb))
* **deps:** update dependency @aws-sdk/client-s3 to v3.345.0 ([effcd5d](https://github.com/brocoders/nestjs-boilerplate/commit/effcd5d096bdd2948a0a87f3aa5983154ab50678))
* **deps:** update dependency @aws-sdk/client-s3 to v3.350.0 ([26e30a9](https://github.com/brocoders/nestjs-boilerplate/commit/26e30a92f881615682965bf0c8ea87d074586a01))
* **deps:** update dependency @aws-sdk/client-s3 to v3.354.0 ([cbc3acc](https://github.com/brocoders/nestjs-boilerplate/commit/cbc3accfd8c5007e3bfeb26fcd20e7431beb8856))
* **deps:** update dependency @aws-sdk/client-s3 to v3.360.0 ([4b0e77c](https://github.com/brocoders/nestjs-boilerplate/commit/4b0e77c6a947bab375030e3c69e1ef202a0e4283))
* **deps:** update dependency @aws-sdk/client-s3 to v3.374.0 ([f9d9222](https://github.com/brocoders/nestjs-boilerplate/commit/f9d9222331a5843eab99200ee99b93931cbe21bd))
* **deps:** update dependency @aws-sdk/client-s3 to v3.388.0 ([5ca6aaf](https://github.com/brocoders/nestjs-boilerplate/commit/5ca6aafc2651410c8b6a0d4780f461f4643948a8))
* **deps:** update dependency @aws-sdk/client-s3 to v3.391.0 ([59bc9aa](https://github.com/brocoders/nestjs-boilerplate/commit/59bc9aac0f559190a27cbae34c47d73492e302f4))
* **deps:** update dependency @aws-sdk/client-s3 to v3.395.0 ([c9aff23](https://github.com/brocoders/nestjs-boilerplate/commit/c9aff238c42e3df462dd18fa3d53ec9ecf3bc021))
* **deps:** update dependency @aws-sdk/client-s3 to v3.400.0 ([c334ef6](https://github.com/brocoders/nestjs-boilerplate/commit/c334ef6e070858f474d7a19cb67ffe0345cfca42))
* **deps:** update dependency @aws-sdk/client-s3 to v3.405.0 ([6e39a2a](https://github.com/brocoders/nestjs-boilerplate/commit/6e39a2ab2ec6efa3404f9de41fafc97654aedac9))
* **deps:** update dependency @aws-sdk/client-s3 to v3.412.0 ([2b0cae9](https://github.com/brocoders/nestjs-boilerplate/commit/2b0cae928fce66d70fb82ae9dac6f2bb2b804b2d))
* **deps:** update dependency @aws-sdk/client-s3 to v3.414.0 ([19b4219](https://github.com/brocoders/nestjs-boilerplate/commit/19b4219d0aa972bc3008572ec498eca90daf2cc6))
* **deps:** update dependency @aws-sdk/client-s3 to v3.417.0 ([83817d1](https://github.com/brocoders/nestjs-boilerplate/commit/83817d17ece56e82ffdbff2040abdf4e195249b4))
* **deps:** update dependency @aws-sdk/client-s3 to v3.418.0 ([03e6235](https://github.com/brocoders/nestjs-boilerplate/commit/03e6235eb1d2954ccc29dabddea78c5b8f2076c8))
* **deps:** update dependency @aws-sdk/client-s3 to v3.420.0 ([24c6040](https://github.com/brocoders/nestjs-boilerplate/commit/24c60407291c7f29233f3ac1ba358791973b709c))
* **deps:** update dependency @aws-sdk/client-s3 to v3.421.0 ([7d2fe3c](https://github.com/brocoders/nestjs-boilerplate/commit/7d2fe3cde7c3f56d99f7bf12685ec9543b0b3879))
* **deps:** update dependency @aws-sdk/client-s3 to v3.428.0 ([94f8509](https://github.com/brocoders/nestjs-boilerplate/commit/94f850921e42e6725432fccae59f107149404568))
* **deps:** update dependency @aws-sdk/client-s3 to v3.435.0 ([cfbabe0](https://github.com/brocoders/nestjs-boilerplate/commit/cfbabe0f103f73122243ac570404b79bcb74ed29))
* **deps:** update dependency @aws-sdk/client-s3 to v3.438.0 ([ed2d5c4](https://github.com/brocoders/nestjs-boilerplate/commit/ed2d5c42fcd6a07d0826ed9053de0c69634726c5))
* **deps:** update dependency @aws-sdk/client-s3 to v3.441.0 ([754e538](https://github.com/brocoders/nestjs-boilerplate/commit/754e538911bddb3eae8ceb025b79ef91e69e16bd))
* **deps:** update dependency @aws-sdk/client-s3 to v3.449.0 ([ca64faa](https://github.com/brocoders/nestjs-boilerplate/commit/ca64faa2ed32dd1777a3660fde1cff14c11b81c5))
* **deps:** update dependency @aws-sdk/client-s3 to v3.462.0 ([ba8ca64](https://github.com/brocoders/nestjs-boilerplate/commit/ba8ca640c42059406463a61c79a6045966804ccc))
* **deps:** update dependency @aws-sdk/client-s3 to v3.481.0 ([bca9c68](https://github.com/brocoders/nestjs-boilerplate/commit/bca9c686b07be90dd9f916e5ab941a90d5ddf421))
* **deps:** update dependency @aws-sdk/client-s3 to v3.484.0 ([0794e5b](https://github.com/brocoders/nestjs-boilerplate/commit/0794e5bbf927b03c8d3f4a0f6de4d47545326474))
* **deps:** update dependency @aws-sdk/client-s3 to v3.485.0 ([d9ba5e1](https://github.com/brocoders/nestjs-boilerplate/commit/d9ba5e172c7c11c70bae10749b31e6a11e314247))
* **deps:** update dependency @aws-sdk/client-s3 to v3.490.0 ([9b26ab1](https://github.com/brocoders/nestjs-boilerplate/commit/9b26ab187603c92db5968bad3833dca2468a4f78))
* **deps:** update dependency @aws-sdk/client-s3 to v3.501.0 ([96e6854](https://github.com/brocoders/nestjs-boilerplate/commit/96e685410ccc01794535a5cf440cc2d92ae6ad73))
* **deps:** update dependency @nestjs/config to v1 ([624254a](https://github.com/brocoders/nestjs-boilerplate/commit/624254a32373654b4a99ef88f1e88a1148b89519))
* **deps:** update dependency @nestjs/config to v1.0.1 ([895511e](https://github.com/brocoders/nestjs-boilerplate/commit/895511e3579f115e95aa9fc6e0b424fdd3bead95))
* **deps:** update dependency @nestjs/config to v1.0.2 ([7059f69](https://github.com/brocoders/nestjs-boilerplate/commit/7059f6906298b0885f2c5a623ce7ac87c08cb6b9))
* **deps:** update dependency @nestjs/config to v1.0.3 ([4da9121](https://github.com/brocoders/nestjs-boilerplate/commit/4da912127d4c97b9f7150b3f844634c0055f85ca))
* **deps:** update dependency @nestjs/config to v1.1.0 ([2515a36](https://github.com/brocoders/nestjs-boilerplate/commit/2515a369fdb1b605098a32b2bdbb2dd1b6000ffa))
* **deps:** update dependency @nestjs/config to v1.1.1 ([548e8ee](https://github.com/brocoders/nestjs-boilerplate/commit/548e8ee406ae23507e3ede1aa599d024b7aae693))
* **deps:** update dependency @nestjs/config to v1.1.3 ([8520e88](https://github.com/brocoders/nestjs-boilerplate/commit/8520e88415462838c62ff85c6b153f647258cf80))
* **deps:** update dependency @nestjs/config to v1.1.5 ([03a9d52](https://github.com/brocoders/nestjs-boilerplate/commit/03a9d523f1fe98a7c68b7a7fb738a567157d5053))
* **deps:** update dependency @nestjs/config to v1.1.6 ([3982959](https://github.com/brocoders/nestjs-boilerplate/commit/3982959dd355026f9f02316075ad802adeac6ce9))
* **deps:** update dependency @nestjs/config to v1.1.7 ([39abb6a](https://github.com/brocoders/nestjs-boilerplate/commit/39abb6a55b1cf50bc683bb46545f7124f7c74cbc))
* **deps:** update dependency @nestjs/config to v1.2.0 ([d5dabe7](https://github.com/brocoders/nestjs-boilerplate/commit/d5dabe71eff1fc9c6c65111478ad09e930afab1b))
* **deps:** update dependency @nestjs/config to v2.1.0 ([9dacc98](https://github.com/brocoders/nestjs-boilerplate/commit/9dacc983b8a7ca61d9e59d3bce696f440f676add))
* **deps:** update dependency @nestjs/config to v2.2.0 ([6cbebf3](https://github.com/brocoders/nestjs-boilerplate/commit/6cbebf3eb769ff23cf3973fa874a14918a6cdf14))
* **deps:** update dependency @nestjs/config to v2.3.1 ([c855fa5](https://github.com/brocoders/nestjs-boilerplate/commit/c855fa58dcdde7629d0d70a1e2817e9f848ff9a1))
* **deps:** update dependency @nestjs/config to v2.3.2 ([e28bf58](https://github.com/brocoders/nestjs-boilerplate/commit/e28bf58a0485f5827b4f2b256eb9057a53b9c73c))
* **deps:** update dependency @nestjs/config to v2.3.4 ([9add502](https://github.com/brocoders/nestjs-boilerplate/commit/9add502e8a10310a619cd88ad178010f20960b14))
* **deps:** update dependency @nestjs/config to v3 ([0a957e3](https://github.com/brocoders/nestjs-boilerplate/commit/0a957e365a1cf9f2023d8695946e4624a88255f2))
* **deps:** update dependency @nestjs/config to v3.0.1 ([4c14361](https://github.com/brocoders/nestjs-boilerplate/commit/4c14361d3297d330d79a1ede6b540f4b6940cfdc))
* **deps:** update dependency @nestjs/config to v3.1.1 ([8e6734e](https://github.com/brocoders/nestjs-boilerplate/commit/8e6734e2dd560115c8352f1b5459f4a576aac9d5))
* **deps:** update dependency @nestjs/config to v3.2.0 ([ea6b77d](https://github.com/brocoders/nestjs-boilerplate/commit/ea6b77da2290dc33551a524413cd8633bf3203b9))
* **deps:** update dependency @nestjs/jwt to v10.0.1 ([65db423](https://github.com/brocoders/nestjs-boilerplate/commit/65db423538733df40cf4fad14c0c4c47311f8c08))
* **deps:** update dependency @nestjs/jwt to v10.0.2 ([95a7a76](https://github.com/brocoders/nestjs-boilerplate/commit/95a7a76ef25a178ec7d06fa0972d8914a505e94e))
* **deps:** update dependency @nestjs/jwt to v10.0.3 ([dd8248c](https://github.com/brocoders/nestjs-boilerplate/commit/dd8248c3d4aff6bbed3344b6929be767f5dc5e89))
* **deps:** update dependency @nestjs/jwt to v10.1.0 ([a1e3d34](https://github.com/brocoders/nestjs-boilerplate/commit/a1e3d340ab35c1e22c19ba44fade2661e950f744))
* **deps:** update dependency @nestjs/jwt to v10.1.1 ([02ab3c8](https://github.com/brocoders/nestjs-boilerplate/commit/02ab3c8e53422fed44ac358e8e4ea1812d2c8bab))
* **deps:** update dependency @nestjs/jwt to v10.2.0 ([3af99b4](https://github.com/brocoders/nestjs-boilerplate/commit/3af99b4f6b1bdd34b70135281434c54b03059d9e))
* **deps:** update dependency @nestjs/jwt to v8 ([ab15045](https://github.com/brocoders/nestjs-boilerplate/commit/ab150456192b1e408d255c1c433874c0d4d82128))
* **deps:** update dependency @nestjs/jwt to v8.0.1 ([260b3e4](https://github.com/brocoders/nestjs-boilerplate/commit/260b3e45b64aab5e689348c939c22be754d0b741))
* **deps:** update dependency @nestjs/jwt to v9 ([bcb7099](https://github.com/brocoders/nestjs-boilerplate/commit/bcb709999003cfb2ff57dbe0f5e570d3ca76352f))
* **deps:** update dependency @nestjs/mongoose to v10.0.4 ([375a643](https://github.com/brocoders/nestjs-boilerplate/commit/375a643ec94f9976ffe7ee04ff3bb22463707196))
* **deps:** update dependency @nestjs/passport to v10.0.3 ([db6fe90](https://github.com/brocoders/nestjs-boilerplate/commit/db6fe90ef67e3f47704210dea34e67dbb0afa412))
* **deps:** update dependency @nestjs/passport to v7.1.6 ([f79afd3](https://github.com/brocoders/nestjs-boilerplate/commit/f79afd3224407facf465b853024042f7b7d8a0fe))
* **deps:** update dependency @nestjs/passport to v8 ([cb1082c](https://github.com/brocoders/nestjs-boilerplate/commit/cb1082cf9337900f75db1468b19bb9a9dff4e909))
* **deps:** update dependency @nestjs/passport to v8.0.1 ([adf2404](https://github.com/brocoders/nestjs-boilerplate/commit/adf24045147acaf80258beca9f374a2d43aeb256))
* **deps:** update dependency @nestjs/passport to v8.1.0 ([c55e852](https://github.com/brocoders/nestjs-boilerplate/commit/c55e8527205193ff5592c88076a8f03c5161260a))
* **deps:** update dependency @nestjs/passport to v8.2.0 ([d8f915a](https://github.com/brocoders/nestjs-boilerplate/commit/d8f915a86ec6cd851e32815a24a4f274b90e6868))
* **deps:** update dependency @nestjs/swagger to v4.8.1 ([fd57ef9](https://github.com/brocoders/nestjs-boilerplate/commit/fd57ef9b0fa52a8a2a57fcc1893940b34ebee649))
* **deps:** update dependency @nestjs/swagger to v4.8.2 ([596ecaa](https://github.com/brocoders/nestjs-boilerplate/commit/596ecaa099f865466bde3aa9b9f96d29e44962be))
* **deps:** update dependency @nestjs/swagger to v5 ([14b072c](https://github.com/brocoders/nestjs-boilerplate/commit/14b072cc2821aac1fee9742b08b02d8570c40a79))
* **deps:** update dependency @nestjs/swagger to v5.0.3 ([4767498](https://github.com/brocoders/nestjs-boilerplate/commit/4767498b5db3416448cf30be527961ee782d0a2e))
* **deps:** update dependency @nestjs/swagger to v5.0.4 ([ed8c6bd](https://github.com/brocoders/nestjs-boilerplate/commit/ed8c6bdadef0d0b1483b40f7eebf467679fb6480))
* **deps:** update dependency @nestjs/swagger to v5.0.8 ([0622c0c](https://github.com/brocoders/nestjs-boilerplate/commit/0622c0c20f33f3c44eaded64ea9d583f2b9972fd))
* **deps:** update dependency @nestjs/swagger to v5.0.9 ([deabdcb](https://github.com/brocoders/nestjs-boilerplate/commit/deabdcb280cf55c4be20a9de7edb6311c3eb4c4e))
* **deps:** update dependency @nestjs/swagger to v5.1.0 ([555abc5](https://github.com/brocoders/nestjs-boilerplate/commit/555abc54022901299450ac892fd62ca7f6cf1aee))
* **deps:** update dependency @nestjs/swagger to v5.1.1 ([41ddbfc](https://github.com/brocoders/nestjs-boilerplate/commit/41ddbfcf2162d0076544fc1fa398abdade9b98d4))
* **deps:** update dependency @nestjs/swagger to v5.1.4 ([f42b3b0](https://github.com/brocoders/nestjs-boilerplate/commit/f42b3b018735ee95e7baac2c1f2f714db3adfafb))
* **deps:** update dependency @nestjs/swagger to v5.1.5 ([0939b32](https://github.com/brocoders/nestjs-boilerplate/commit/0939b32c376ff49c5f4b5f5955a9813684223c52))
* **deps:** update dependency @nestjs/swagger to v5.2.0 ([000ad94](https://github.com/brocoders/nestjs-boilerplate/commit/000ad94a8afa1b4a82cc4c7ab5af2a4e64a5b96a))
* **deps:** update dependency @nestjs/swagger to v6 ([3d9c8a0](https://github.com/brocoders/nestjs-boilerplate/commit/3d9c8a0296babef7601dc5188b71f47d366854e7))
* **deps:** update dependency @nestjs/swagger to v6.1.0 ([2fe8423](https://github.com/brocoders/nestjs-boilerplate/commit/2fe8423727ac3ade41f95a3724954e78fdb2023b))
* **deps:** update dependency @nestjs/swagger to v6.1.2 ([c081b5d](https://github.com/brocoders/nestjs-boilerplate/commit/c081b5d92ad1c7e9cd91b7c38ea08b53d8039291))
* **deps:** update dependency @nestjs/swagger to v6.1.3 ([5885937](https://github.com/brocoders/nestjs-boilerplate/commit/5885937cd787d4cf1f47779702f6d0dfc3953223))
* **deps:** update dependency @nestjs/swagger to v6.1.4 ([6b41f72](https://github.com/brocoders/nestjs-boilerplate/commit/6b41f7231dd29ac0d48eff5d8b1b305c37d6ee7f))
* **deps:** update dependency @nestjs/swagger to v6.2.1 ([9e6a0c4](https://github.com/brocoders/nestjs-boilerplate/commit/9e6a0c46ab2a4f51186dfb2150b6ea32e8ad806e))
* **deps:** update dependency @nestjs/swagger to v6.3.0 ([3473707](https://github.com/brocoders/nestjs-boilerplate/commit/3473707bfc56cf2c71656e56441cf74dc135ac23))
* **deps:** update dependency @nestjs/swagger to v7 ([6d50d94](https://github.com/brocoders/nestjs-boilerplate/commit/6d50d947c1d0f79941047f17411b7b3e292fd29c))
* **deps:** update dependency @nestjs/swagger to v7.0.12 ([964d4ed](https://github.com/brocoders/nestjs-boilerplate/commit/964d4eda9736b9dd1cc29972dcd786a7ab5096c8))
* **deps:** update dependency @nestjs/swagger to v7.0.4 ([9b06ddc](https://github.com/brocoders/nestjs-boilerplate/commit/9b06ddc0a63020bbfee234234ceac26177ddd6b5))
* **deps:** update dependency @nestjs/swagger to v7.0.6 ([b3b91d2](https://github.com/brocoders/nestjs-boilerplate/commit/b3b91d2ff7003e7c251ebdab45ee5992846f2442))
* **deps:** update dependency @nestjs/swagger to v7.1.0 ([965b7b2](https://github.com/brocoders/nestjs-boilerplate/commit/965b7b2b5ed495c489b229c5cf529bfa00600a77))
* **deps:** update dependency @nestjs/swagger to v7.1.1 ([fe22ed5](https://github.com/brocoders/nestjs-boilerplate/commit/fe22ed53bc0e60cd0f4570bd32bd4ebef13c0d8d))
* **deps:** update dependency @nestjs/swagger to v7.1.10 ([7433ca0](https://github.com/brocoders/nestjs-boilerplate/commit/7433ca0b60189f6f04088673bca1b39f76924de9))
* **deps:** update dependency @nestjs/swagger to v7.1.11 ([e71ea55](https://github.com/brocoders/nestjs-boilerplate/commit/e71ea55bd760db7ff4e49cd40b4e12bf7b0ccbf2))
* **deps:** update dependency @nestjs/swagger to v7.1.12 ([086237e](https://github.com/brocoders/nestjs-boilerplate/commit/086237ea6659e8188139709165bae38550272732))
* **deps:** update dependency @nestjs/swagger to v7.1.13 ([c14029c](https://github.com/brocoders/nestjs-boilerplate/commit/c14029c67d6a7d13e18f70f1a0872e8983771575))
* **deps:** update dependency @nestjs/swagger to v7.1.14 ([69c810f](https://github.com/brocoders/nestjs-boilerplate/commit/69c810feaabf35dd070ba739b7a72c6eb2f834ff))
* **deps:** update dependency @nestjs/swagger to v7.1.15 ([6d30436](https://github.com/brocoders/nestjs-boilerplate/commit/6d304364c01eba19a0309d0fb7fa720b93d8be54))
* **deps:** update dependency @nestjs/swagger to v7.1.16 ([66c9ac7](https://github.com/brocoders/nestjs-boilerplate/commit/66c9ac745d6cdf30ffb286401e85980f0d1ecc1d))
* **deps:** update dependency @nestjs/swagger to v7.1.17 ([b18021f](https://github.com/brocoders/nestjs-boilerplate/commit/b18021f76b0b3116d6ac5a8184f5eacf8baa2881))
* **deps:** update dependency @nestjs/swagger to v7.1.2 ([7b741f4](https://github.com/brocoders/nestjs-boilerplate/commit/7b741f41e62bfb287c92df0516a85be30849b38f))
* **deps:** update dependency @nestjs/swagger to v7.1.4 ([d7fdf6d](https://github.com/brocoders/nestjs-boilerplate/commit/d7fdf6dbbc257f563dc4c46b1881fed76691c70c))
* **deps:** update dependency @nestjs/swagger to v7.1.6 ([49b2a37](https://github.com/brocoders/nestjs-boilerplate/commit/49b2a374b585eab9d3e2719c44bd8956668c0234))
* **deps:** update dependency @nestjs/swagger to v7.1.7 ([cbb2c72](https://github.com/brocoders/nestjs-boilerplate/commit/cbb2c7271721748ab22e70c0d4301b84aa4d3015))
* **deps:** update dependency @nestjs/swagger to v7.1.8 ([973cb74](https://github.com/brocoders/nestjs-boilerplate/commit/973cb749798b82069519ca42e174ee70cefa90b7))
* **deps:** update dependency @nestjs/swagger to v7.2.0 ([7dbad57](https://github.com/brocoders/nestjs-boilerplate/commit/7dbad57b2c22d8852b29d5abcff3eb5d8e6fe2d5))
* **deps:** update dependency @nestjs/swagger to v7.3.0 ([f6d8d1e](https://github.com/brocoders/nestjs-boilerplate/commit/f6d8d1e8e6370b3b4b4529164711cbc28fb4db1d))
* **deps:** update dependency @nestjs/typeorm to v10 ([00cb348](https://github.com/brocoders/nestjs-boilerplate/commit/00cb348e1e5c5ab39cf4284a9d87f7574d61e896))
* **deps:** update dependency @nestjs/typeorm to v10.0.1 ([95e1091](https://github.com/brocoders/nestjs-boilerplate/commit/95e10911e1d113ab4dc016d8c98b9e0fe6ed72f0))
* **deps:** update dependency @nestjs/typeorm to v10.0.2 ([12e2329](https://github.com/brocoders/nestjs-boilerplate/commit/12e2329f608a92ae691131850c6ff6794e7741a6))
* **deps:** update dependency @nestjs/typeorm to v8 ([e00070a](https://github.com/brocoders/nestjs-boilerplate/commit/e00070a09d6c7ed0f59c89f92f33bf2d0ef68edb))
* **deps:** update dependency @nestjs/typeorm to v8.0.1 ([4c0a580](https://github.com/brocoders/nestjs-boilerplate/commit/4c0a58009e0df5bda2bd508c4fd5d734144e1442))
* **deps:** update dependency @nestjs/typeorm to v8.0.2 ([fa71397](https://github.com/brocoders/nestjs-boilerplate/commit/fa713976134f6216aacffd7bf242dda4d13d2dd5))
* **deps:** update dependency @nestjs/typeorm to v8.0.3 ([3f3c437](https://github.com/brocoders/nestjs-boilerplate/commit/3f3c437140faf832e253e1826f4514b28a6185f4))
* **deps:** update dependency @nestjs/typeorm to v9.0.1 ([a43f741](https://github.com/brocoders/nestjs-boilerplate/commit/a43f741300c6bee9fd802e0de01beeff02a7ba08))
* **deps:** update dependency @types/multer-s3 to v3.0.1 ([8f89f49](https://github.com/brocoders/nestjs-boilerplate/commit/8f89f496220b26e370954e4ab181c921538ed011))
* **deps:** update dependency @types/multer-s3 to v3.0.2 ([98c2b76](https://github.com/brocoders/nestjs-boilerplate/commit/98c2b76e41c64ca2287f3d98961c72a1721db76d))
* **deps:** update dependency @types/multer-s3 to v3.0.3 ([49e3a33](https://github.com/brocoders/nestjs-boilerplate/commit/49e3a335eadfd7a183d158ab202d7339214b1f5b))
* **deps:** update dependency apple-signin-auth to v1.7.4 ([641e009](https://github.com/brocoders/nestjs-boilerplate/commit/641e00985941c44cbd5b0d49796534bc93a5b9a4))
* **deps:** update dependency apple-signin-auth to v1.7.6 ([590f45c](https://github.com/brocoders/nestjs-boilerplate/commit/590f45c58f413e35bc4128a12ab702ff8a92ec2d))
* **deps:** update dependency class-validator to v0.13.2 ([087280b](https://github.com/brocoders/nestjs-boilerplate/commit/087280b21a1a52a9571ab962cb4f3b5f18a63339))
* **deps:** update dependency class-validator to v0.14.0 ([0f18353](https://github.com/brocoders/nestjs-boilerplate/commit/0f183530a490d048411d2de845d65e2b98d8f1e4))
* **deps:** update dependency class-validator to v0.14.1 ([e07ec45](https://github.com/brocoders/nestjs-boilerplate/commit/e07ec450840d49df0fef0805f4fc1e4450f91761))
* **deps:** update dependency dotenv to v16.4.0 ([a27af0b](https://github.com/brocoders/nestjs-boilerplate/commit/a27af0b7095096347a7010d86e4874810cea7e41))
* **deps:** update dependency dotenv to v16.4.1 ([215fb8c](https://github.com/brocoders/nestjs-boilerplate/commit/215fb8c92c969c49743304edecbd8fe0ee5a1612))
* **deps:** update dependency dotenv to v16.4.4 ([6903c1a](https://github.com/brocoders/nestjs-boilerplate/commit/6903c1a68151655d42e9b505fd02165370400fe3))
* **deps:** update dependency dotenv to v16.4.5 ([8326022](https://github.com/brocoders/nestjs-boilerplate/commit/8326022bc7a039d702c3d6f1c3aa55d5b6995aae))
* **deps:** update dependency google-auth-library to v7.10.0 ([b1cfdd6](https://github.com/brocoders/nestjs-boilerplate/commit/b1cfdd62054a194ceaa18e02f5247ec6a50c0afc))
* **deps:** update dependency google-auth-library to v7.10.1 ([98e49da](https://github.com/brocoders/nestjs-boilerplate/commit/98e49da9f231e396cc0cf0aeccc4f48e56a5a95c))
* **deps:** update dependency google-auth-library to v7.10.2 ([e067d90](https://github.com/brocoders/nestjs-boilerplate/commit/e067d90991b0e712939ed23b28968ea075f27aec))
* **deps:** update dependency google-auth-library to v7.10.3 ([b5e1b54](https://github.com/brocoders/nestjs-boilerplate/commit/b5e1b54a05ee714f6f0d6be0bde87403b8e7cabf))
* **deps:** update dependency google-auth-library to v7.10.4 ([8ea2e76](https://github.com/brocoders/nestjs-boilerplate/commit/8ea2e761d48faa17e3624b27a1ff8677419b67c0))
* **deps:** update dependency google-auth-library to v7.11.0 ([0af09f2](https://github.com/brocoders/nestjs-boilerplate/commit/0af09f2030f7a141e00ec551f8ada9df63b86182))
* **deps:** update dependency google-auth-library to v7.12.0 ([b2d3962](https://github.com/brocoders/nestjs-boilerplate/commit/b2d3962426bc7ee24c8bf46b3ac393bb61a54580))
* **deps:** update dependency google-auth-library to v7.2.0 ([876a4bf](https://github.com/brocoders/nestjs-boilerplate/commit/876a4bf7c0f281a1e353adfc2a051b46ba5dfd4e))
* **deps:** update dependency google-auth-library to v7.3.0 ([3f6b0db](https://github.com/brocoders/nestjs-boilerplate/commit/3f6b0dbea08a2549b3ca2f08ef52c3b8f872d3b2))
* **deps:** update dependency google-auth-library to v7.4.1 ([81b9f4f](https://github.com/brocoders/nestjs-boilerplate/commit/81b9f4f4a2cd75561773df93713c948fc0846b44))
* **deps:** update dependency google-auth-library to v7.5.0 ([32e6636](https://github.com/brocoders/nestjs-boilerplate/commit/32e6636b8aeec9f949ba95bc389efad4a03b490a))
* **deps:** update dependency google-auth-library to v7.6.1 ([32d0eb1](https://github.com/brocoders/nestjs-boilerplate/commit/32d0eb13e3c65ed1cc4b728415aece9411ba3f6a))
* **deps:** update dependency google-auth-library to v7.6.2 ([3fd879d](https://github.com/brocoders/nestjs-boilerplate/commit/3fd879d56ecf5339a880cbafe7989451bf60b0ad))
* **deps:** update dependency google-auth-library to v7.8.0 ([8994479](https://github.com/brocoders/nestjs-boilerplate/commit/8994479c8f92a3ffd9e5c2c7e6b1fd4e9c6cae5d))
* **deps:** update dependency google-auth-library to v7.9.1 ([88bfbb2](https://github.com/brocoders/nestjs-boilerplate/commit/88bfbb28985164ee759dbc9b9b795629c91cebc6))
* **deps:** update dependency google-auth-library to v7.9.2 ([32170b1](https://github.com/brocoders/nestjs-boilerplate/commit/32170b1a9adc86785e208e248a74528795270a62))
* **deps:** update dependency google-auth-library to v8 ([492d4ae](https://github.com/brocoders/nestjs-boilerplate/commit/492d4ae1e8d397e4a74795f6ebd0f9653c063326))
* **deps:** update dependency google-auth-library to v8.1.1 ([eb79e58](https://github.com/brocoders/nestjs-boilerplate/commit/eb79e58079d87d5e99409650f9d3ca5665f71487))
* **deps:** update dependency google-auth-library to v8.4.0 ([93ac4ce](https://github.com/brocoders/nestjs-boilerplate/commit/93ac4cef0443c1889c5f3cedd8da51fd70622ec0))
* **deps:** update dependency google-auth-library to v8.5.2 ([ec5d3fa](https://github.com/brocoders/nestjs-boilerplate/commit/ec5d3fa9f2c230c989755ea36337b2fdd879028d))
* **deps:** update dependency google-auth-library to v8.6.0 ([fa3d653](https://github.com/brocoders/nestjs-boilerplate/commit/fa3d653f26d397837a314a66107aeedc8a9fa97e))
* **deps:** update dependency google-auth-library to v8.7.0 ([212a6c2](https://github.com/brocoders/nestjs-boilerplate/commit/212a6c211b34f0cb9c0d422e3dc44e0a63bcc643))
* **deps:** update dependency google-auth-library to v8.8.0 ([8fc1a25](https://github.com/brocoders/nestjs-boilerplate/commit/8fc1a25a995351d7ed75a7f51fa3eb9de14c3648))
* **deps:** update dependency google-auth-library to v8.9.0 ([b6c5b84](https://github.com/brocoders/nestjs-boilerplate/commit/b6c5b8456bea668606dc1117287a84cade465c5b))
* **deps:** update dependency google-auth-library to v9 ([f6aeb4e](https://github.com/brocoders/nestjs-boilerplate/commit/f6aeb4e346eb10049103360fc1b5282690173b6c))
* **deps:** update dependency google-auth-library to v9.1.0 ([681bb29](https://github.com/brocoders/nestjs-boilerplate/commit/681bb2940872dddf7d8bdedf2f5c1a651fcefae2))
* **deps:** update dependency google-auth-library to v9.2.0 ([ae5b58a](https://github.com/brocoders/nestjs-boilerplate/commit/ae5b58abbd52cf089f8479a668f1199c87beab94))
* **deps:** update dependency google-auth-library to v9.4.1 ([7b1f178](https://github.com/brocoders/nestjs-boilerplate/commit/7b1f17885eff8940c4d1c39ace0fc6a1cd46940d))
* **deps:** update dependency google-auth-library to v9.4.2 ([c0335a0](https://github.com/brocoders/nestjs-boilerplate/commit/c0335a0cf20ba1271f7bb1051ddb8961700f0587))
* **deps:** update dependency google-auth-library to v9.6.2 ([8ba7031](https://github.com/brocoders/nestjs-boilerplate/commit/8ba70317d043b90674f369d8d386b9ea07339cf3))
* **deps:** update dependency google-auth-library to v9.6.3 ([ea7e03d](https://github.com/brocoders/nestjs-boilerplate/commit/ea7e03d8f84565c30febe6bb8555cbe9ef9041dd))
* **deps:** update dependency handlebars to v4.7.8 ([767f62d](https://github.com/brocoders/nestjs-boilerplate/commit/767f62d38f0059f9a8c4fe8b282e82c588759f1c))
* **deps:** update dependency mongoose to v8.0.3 ([e34f79d](https://github.com/brocoders/nestjs-boilerplate/commit/e34f79d1c71957f98684c620cc8e78be678443c3))
* **deps:** update dependency mongoose to v8.0.4 ([02c557d](https://github.com/brocoders/nestjs-boilerplate/commit/02c557d9ad841c8e6c2150ffa960dd01c4b1f0de))
* **deps:** update dependency mongoose to v8.1.0 ([36b8d3d](https://github.com/brocoders/nestjs-boilerplate/commit/36b8d3d51f6b44e912cf8facdcd8ad04a16ab25a))
* **deps:** update dependency mongoose to v8.1.1 ([b4baeac](https://github.com/brocoders/nestjs-boilerplate/commit/b4baeac5b69f7bb75826fc3d87cdc697cb7951dd))
* **deps:** update dependency mongoose to v8.1.2 ([e5780f1](https://github.com/brocoders/nestjs-boilerplate/commit/e5780f1046a3cf91adcb399af19b79fad634add1))
* **deps:** update dependency mongoose to v8.1.3 ([831d432](https://github.com/brocoders/nestjs-boilerplate/commit/831d4328b1f442e914513e11b458b9e407605086))
* **deps:** update dependency mongoose to v8.2.0 ([8f56cd8](https://github.com/brocoders/nestjs-boilerplate/commit/8f56cd8975118418b00d37f8f132fbf7cd39a4d8))
* **deps:** update dependency multer to v1.4.3 ([a96ec15](https://github.com/brocoders/nestjs-boilerplate/commit/a96ec15ca8ef3857d99c845db7cd2a7d55fbef7c))
* **deps:** update dependency multer to v1.4.4 ([0f10b2d](https://github.com/brocoders/nestjs-boilerplate/commit/0f10b2d7ab77f30bb3e94c1587c2bada47645052))
* **deps:** update dependency multer-s3 to v2.10.0 ([00895cc](https://github.com/brocoders/nestjs-boilerplate/commit/00895ccd8edde0e17371a804865b9185133be495))
* **deps:** update dependency multer-s3 to v2.9.1 ([8b9d2c3](https://github.com/brocoders/nestjs-boilerplate/commit/8b9d2c36d1d213477f004132db5d980184cbb8ee))
* **deps:** update dependency nestjs-i18n to v10.3.0 ([b935b46](https://github.com/brocoders/nestjs-boilerplate/commit/b935b467a84fce3491049d026dafd16a2ed00c85))
* **deps:** update dependency nestjs-i18n to v10.3.1 ([9697f5e](https://github.com/brocoders/nestjs-boilerplate/commit/9697f5e966cdd6a99c19cc3c1cff3a5e6443b35c))
* **deps:** update dependency nestjs-i18n to v10.3.2 ([12f8404](https://github.com/brocoders/nestjs-boilerplate/commit/12f8404de5a03f0c561a221505aa6ff3501f8dde))
* **deps:** update dependency nestjs-i18n to v10.3.4 ([66ed494](https://github.com/brocoders/nestjs-boilerplate/commit/66ed4946871dc4b8ccc20cefbd78a15d1f0a1fd1))
* **deps:** update dependency nestjs-i18n to v10.3.5 ([2d90600](https://github.com/brocoders/nestjs-boilerplate/commit/2d90600eec17ebf8d5fd9a62f6c37521d6b6f4fb))
* **deps:** update dependency nestjs-i18n to v10.3.6 ([b25961e](https://github.com/brocoders/nestjs-boilerplate/commit/b25961e852e3ebd7575af48a028a0328315ab266))
* **deps:** update dependency nestjs-i18n to v10.3.7 ([a6f650d](https://github.com/brocoders/nestjs-boilerplate/commit/a6f650d90124cda69011340dae4ec46c8fdbdb50))
* **deps:** update dependency nestjs-i18n to v10.4.0 ([b8b583e](https://github.com/brocoders/nestjs-boilerplate/commit/b8b583e07c1b685f29aeaf2aec202f6926dcf61d))
* **deps:** update dependency nestjs-i18n to v10.4.5 ([cbb4d1f](https://github.com/brocoders/nestjs-boilerplate/commit/cbb4d1f697072005f4d04c25ea0d50d705237865))
* **deps:** update dependency nestjs-i18n to v8.1.2 ([d691f8c](https://github.com/brocoders/nestjs-boilerplate/commit/d691f8c2b07c3d912dfb6c4ce56a036d84dd8e87))
* **deps:** update dependency nestjs-i18n to v8.1.3 ([f403271](https://github.com/brocoders/nestjs-boilerplate/commit/f403271f4ddfcca666314fbe748786319ca7ee10))
* **deps:** update dependency nestjs-i18n to v8.1.4 ([e1b1469](https://github.com/brocoders/nestjs-boilerplate/commit/e1b1469577bf1c762404e28181bff1b9f2c286f5))
* **deps:** update dependency nestjs-i18n to v8.1.5 ([0e33c9e](https://github.com/brocoders/nestjs-boilerplate/commit/0e33c9e4cac22b7ef80e3352be227884ad34801c))
* **deps:** update dependency nestjs-i18n to v8.1.6 ([ed7cdae](https://github.com/brocoders/nestjs-boilerplate/commit/ed7cdae483621328b76af7ef7e4db7293b8d30c2))
* **deps:** update dependency nestjs-i18n to v8.1.9 ([2019d29](https://github.com/brocoders/nestjs-boilerplate/commit/2019d29f24515805beca4579f33ff56102e90293))
* **deps:** update dependency nestjs-i18n to v8.2.1 ([a724d04](https://github.com/brocoders/nestjs-boilerplate/commit/a724d04f7f35e7af6ebfc607fa387b49357dd959))
* **deps:** update dependency nestjs-i18n to v8.2.2 ([2bda887](https://github.com/brocoders/nestjs-boilerplate/commit/2bda887b2bd9fffa51de7ff04d28c200f37d201e))
* **deps:** update dependency nestjs-i18n to v9.1.10 ([3d26e7f](https://github.com/brocoders/nestjs-boilerplate/commit/3d26e7f268dadae560472e523766e545803d813d))
* **deps:** update dependency nestjs-i18n to v9.1.6 ([47a5798](https://github.com/brocoders/nestjs-boilerplate/commit/47a57981d750279e64d8e91187c9ecf6c36c7858))
* **deps:** update dependency nestjs-i18n to v9.1.7 ([195f298](https://github.com/brocoders/nestjs-boilerplate/commit/195f2981bb599e4546d52e9ad4ea783314a7299e))
* **deps:** update dependency nestjs-i18n to v9.1.8 ([5cc3838](https://github.com/brocoders/nestjs-boilerplate/commit/5cc383830917ae4893e330a75b6aae3a7b16220b))
* **deps:** update dependency nestjs-i18n to v9.2.0 ([4e7d3af](https://github.com/brocoders/nestjs-boilerplate/commit/4e7d3af048f22706296e75f9d206cf315e0e84af))
* **deps:** update dependency nestjs-i18n to v9.2.1 ([6dfc9cc](https://github.com/brocoders/nestjs-boilerplate/commit/6dfc9cc74632e42fa4f47b96622eb75cf8ff2aae))
* **deps:** update dependency nestjs-i18n to v9.2.2 ([ccd74f9](https://github.com/brocoders/nestjs-boilerplate/commit/ccd74f9084da9d9339d7a44be517c498aeced16e))
* **deps:** update dependency nestjs-i18n to v9.2.3 ([530783a](https://github.com/brocoders/nestjs-boilerplate/commit/530783af18b1835fadb21099f31a14ef6785fc71))
* **deps:** update dependency nodemailer to v6.6.2 ([17390e1](https://github.com/brocoders/nestjs-boilerplate/commit/17390e17503f36536b49088103681593e8e4305d))
* **deps:** update dependency nodemailer to v6.6.3 ([c2ba11e](https://github.com/brocoders/nestjs-boilerplate/commit/c2ba11e051b54333669cb00b49465407a92bad7a))
* **deps:** update dependency nodemailer to v6.6.5 ([69236df](https://github.com/brocoders/nestjs-boilerplate/commit/69236df314550b83ad1f04dee6ea6c27a38b4820))
* **deps:** update dependency nodemailer to v6.7.0 ([10c7577](https://github.com/brocoders/nestjs-boilerplate/commit/10c757754e65fd3954efd7b0e65b42652b6b8b26))
* **deps:** update dependency nodemailer to v6.7.1 ([00beb9e](https://github.com/brocoders/nestjs-boilerplate/commit/00beb9e6cb2a1794422ae210ab5facb3bf9ecf31))
* **deps:** update dependency nodemailer to v6.7.2 ([22585a5](https://github.com/brocoders/nestjs-boilerplate/commit/22585a5e295bf35b3b5064f829114a744f0f7048))
* **deps:** update dependency nodemailer to v6.7.4 ([47eb62b](https://github.com/brocoders/nestjs-boilerplate/commit/47eb62be95c4931351c153b935f6d0b7a8135921))
* **deps:** update dependency nodemailer to v6.7.5 ([38895d5](https://github.com/brocoders/nestjs-boilerplate/commit/38895d52d06c06381a9cb8a46f9075038decdb99))
* **deps:** update dependency nodemailer to v6.7.6 ([06897c5](https://github.com/brocoders/nestjs-boilerplate/commit/06897c50947cdc59d8017b6fbfec6dbf225c0200))
* **deps:** update dependency nodemailer to v6.7.7 ([9aad4c5](https://github.com/brocoders/nestjs-boilerplate/commit/9aad4c515a97afed4415ecebb48c9f5abf5fc324))
* **deps:** update dependency nodemailer to v6.7.8 ([a2ce0c8](https://github.com/brocoders/nestjs-boilerplate/commit/a2ce0c85c7b48969e70dde5dcad38a40ef63e840))
* **deps:** update dependency nodemailer to v6.8.0 ([ecd521d](https://github.com/brocoders/nestjs-boilerplate/commit/ecd521d804a93aacb8d3b6a94a535be748a95514))
* **deps:** update dependency nodemailer to v6.9.0 ([555c673](https://github.com/brocoders/nestjs-boilerplate/commit/555c673de07a0c562a0936b6287fffb2665ddaa8))
* **deps:** update dependency nodemailer to v6.9.1 ([300cc30](https://github.com/brocoders/nestjs-boilerplate/commit/300cc3069b3c52b58ac0e1dbdca645087a76361d))
* **deps:** update dependency nodemailer to v6.9.10 ([a192af8](https://github.com/brocoders/nestjs-boilerplate/commit/a192af8776cd9b60787d2d88e50880f08c365420))
* **deps:** update dependency nodemailer to v6.9.2 ([d4cb6eb](https://github.com/brocoders/nestjs-boilerplate/commit/d4cb6eb69c71d239421c89cdc951197792b23ff0))
* **deps:** update dependency nodemailer to v6.9.3 ([03279f7](https://github.com/brocoders/nestjs-boilerplate/commit/03279f7d1e3ce38ffcf999c1d34be29548c27b33))
* **deps:** update dependency nodemailer to v6.9.4 ([91bf30f](https://github.com/brocoders/nestjs-boilerplate/commit/91bf30f2b36042ea65543b255da193ff7e5fb18d))
* **deps:** update dependency nodemailer to v6.9.5 ([9682d2c](https://github.com/brocoders/nestjs-boilerplate/commit/9682d2c4e05a0bb69b7881d1635f8d11412d517c))
* **deps:** update dependency nodemailer to v6.9.6 ([c0af790](https://github.com/brocoders/nestjs-boilerplate/commit/c0af790c68a0faa5fdc947aa58bfdc6e25fb3a2f))
* **deps:** update dependency nodemailer to v6.9.7 ([ce46c16](https://github.com/brocoders/nestjs-boilerplate/commit/ce46c1633ec7e469ee430cdc6011c97008e6185d))
* **deps:** update dependency nodemailer to v6.9.8 ([3d2e089](https://github.com/brocoders/nestjs-boilerplate/commit/3d2e08941a16085a6cf4470920bef3dea866d863))
* **deps:** update dependency nodemailer to v6.9.9 [security] ([36f6128](https://github.com/brocoders/nestjs-boilerplate/commit/36f6128e20c894a1fec8fb4ac4a7c05c2630e48c))
* **deps:** update dependency passport to v0.5.0 ([694ff52](https://github.com/brocoders/nestjs-boilerplate/commit/694ff52413159e3f223fc7665e0934652e4266d3))
* **deps:** update dependency passport to v0.5.2 ([8ce9af4](https://github.com/brocoders/nestjs-boilerplate/commit/8ce9af46b4b6937b477a5f5721e446aaefa374ef))
* **deps:** update dependency passport to v0.7.0 ([5384b6a](https://github.com/brocoders/nestjs-boilerplate/commit/5384b6a74feaf4e2869cef3f4c5f4a4818aef32e))
* **deps:** update dependency passport-jwt to v4.0.1 ([7b8fb15](https://github.com/brocoders/nestjs-boilerplate/commit/7b8fb156e258b1cb337eccb53e459b58407c1f32))
* **deps:** update dependency pg to v8.10.0 ([2ac05cb](https://github.com/brocoders/nestjs-boilerplate/commit/2ac05cb50d57b4fb0974359ba4e74379b825b27a))
* **deps:** update dependency pg to v8.11.0 ([8a5304d](https://github.com/brocoders/nestjs-boilerplate/commit/8a5304dee0f4cb90294e73abdccff2ef13c81909))
* **deps:** update dependency pg to v8.11.1 ([0600fba](https://github.com/brocoders/nestjs-boilerplate/commit/0600fba4f41bf7e227f90b19520c556fb66bf85f))
* **deps:** update dependency pg to v8.11.2 ([33c617a](https://github.com/brocoders/nestjs-boilerplate/commit/33c617a96258956459f6b7715d86ad6d9de4e577))
* **deps:** update dependency pg to v8.11.3 ([185c03f](https://github.com/brocoders/nestjs-boilerplate/commit/185c03f39c91cdf499f2200af99c52bb39f39394))
* **deps:** update dependency pg to v8.7.1 ([ab4ef07](https://github.com/brocoders/nestjs-boilerplate/commit/ab4ef07364b0a1322057301ccddfb014021fdc5a))
* **deps:** update dependency pg to v8.7.3 ([108c714](https://github.com/brocoders/nestjs-boilerplate/commit/108c714108960e786accf115307b7a079b2bf55b))
* **deps:** update dependency pg to v8.8.0 ([491304c](https://github.com/brocoders/nestjs-boilerplate/commit/491304c6ed0b19ef6337a43410649f0a621d211b))
* **deps:** update dependency pg to v8.9.0 ([81ccb1a](https://github.com/brocoders/nestjs-boilerplate/commit/81ccb1a2d4c3680855068c04f82676a7940f4d5e))
* **deps:** update dependency rimraf to v4 ([03ff73d](https://github.com/brocoders/nestjs-boilerplate/commit/03ff73da8088ec2965f57efda128d8ce6f773409))
* **deps:** update dependency rimraf to v4.1.1 ([1577ffb](https://github.com/brocoders/nestjs-boilerplate/commit/1577ffbc9aa994388a09e69be17948b0c1b7e0ea))
* **deps:** update dependency rimraf to v4.1.2 ([b111ef3](https://github.com/brocoders/nestjs-boilerplate/commit/b111ef32d3ac18445cc0adfcca5be70a52a1ffb8))
* **deps:** update dependency rimraf to v4.3.0 ([615c7f4](https://github.com/brocoders/nestjs-boilerplate/commit/615c7f49ccd510be3ca24a20ff39907c7d4566ba))
* **deps:** update dependency rimraf to v4.3.1 ([a20c093](https://github.com/brocoders/nestjs-boilerplate/commit/a20c0935fda3274d09782141f264f1adeea5db95))
* **deps:** update dependency rimraf to v4.4.0 ([227f9d9](https://github.com/brocoders/nestjs-boilerplate/commit/227f9d9065d79afc1437e59394ad4d7e4a0eca06))
* **deps:** update dependency rimraf to v4.4.1 ([a460e22](https://github.com/brocoders/nestjs-boilerplate/commit/a460e22cf9683d6c3057c3b8acec04b9a3820082))
* **deps:** update dependency rimraf to v5 ([66c5df6](https://github.com/brocoders/nestjs-boilerplate/commit/66c5df68efb57b81b882d0134146ba41bea432bb))
* **deps:** update dependency rimraf to v5.0.1 ([8376216](https://github.com/brocoders/nestjs-boilerplate/commit/8376216f87d3126edb2347357cbea13808446597))
* **deps:** update dependency rimraf to v5.0.2 ([3d5d9f4](https://github.com/brocoders/nestjs-boilerplate/commit/3d5d9f434eba0a8020f7b897d1a1f4c8f781bd93))
* **deps:** update dependency rimraf to v5.0.5 ([9635790](https://github.com/brocoders/nestjs-boilerplate/commit/963579072bdce2cb7a43f62e4ee53b4add86f653))
* **deps:** update dependency rxjs to v7 ([66df83d](https://github.com/brocoders/nestjs-boilerplate/commit/66df83dcc02d61ddfbe70f015de13a2d4e8feee1))
* **deps:** update dependency rxjs to v7.2.0 ([08b372f](https://github.com/brocoders/nestjs-boilerplate/commit/08b372f14b73cd4325a0d0ff9c8c67256cf5b164))
* **deps:** update dependency rxjs to v7.3.0 ([79fe840](https://github.com/brocoders/nestjs-boilerplate/commit/79fe840b57ad2e6403ce5cf68397afde672a48e9))
* **deps:** update dependency rxjs to v7.3.1 ([234a6ce](https://github.com/brocoders/nestjs-boilerplate/commit/234a6ce04dbf4fb427c0d637a1b19d3191202955))
* **deps:** update dependency rxjs to v7.4.0 ([6df13f1](https://github.com/brocoders/nestjs-boilerplate/commit/6df13f1b0814b16ee8a3005bc186ada28d0f4840))
* **deps:** update dependency rxjs to v7.5.1 ([79a5dd8](https://github.com/brocoders/nestjs-boilerplate/commit/79a5dd812eedf6febb0ed5923b77a815329596d0))
* **deps:** update dependency rxjs to v7.5.2 ([44b3477](https://github.com/brocoders/nestjs-boilerplate/commit/44b34773e350fd2cb896a2a0f5b650c5005acb2d))
* **deps:** update dependency rxjs to v7.5.3 ([551daa2](https://github.com/brocoders/nestjs-boilerplate/commit/551daa27a5e192510a0d237fce6155433d51ff84))
* **deps:** update dependency rxjs to v7.5.4 ([b8dc049](https://github.com/brocoders/nestjs-boilerplate/commit/b8dc049b99598075332dff477a6cbd06bc495ef7))
* **deps:** update dependency rxjs to v7.5.6 ([b7b12e3](https://github.com/brocoders/nestjs-boilerplate/commit/b7b12e305d23afb9c5e28bfa557edce5b91fc20f))
* **deps:** update dependency rxjs to v7.5.7 ([cbe4aed](https://github.com/brocoders/nestjs-boilerplate/commit/cbe4aedcae2e9a64f83d5ea75b07ecba2f4fd608))
* **deps:** update dependency rxjs to v7.6.0 ([44995a4](https://github.com/brocoders/nestjs-boilerplate/commit/44995a4e3d6d9c57ee6de78850a14f3e86b5ccfa))
* **deps:** update dependency rxjs to v7.8.0 ([404dc26](https://github.com/brocoders/nestjs-boilerplate/commit/404dc269002a741d483d392a34dadbfa616fca75))
* **deps:** update dependency rxjs to v7.8.1 ([8f39c86](https://github.com/brocoders/nestjs-boilerplate/commit/8f39c8666f5df8b649a1b7962d7f20a0a8d173d8))
* **deps:** update dependency swagger-ui-express to v4.2.0 ([9fb0492](https://github.com/brocoders/nestjs-boilerplate/commit/9fb04929f874b7cdf16c4c7a93ec34437980b2b9))
* **deps:** update dependency swagger-ui-express to v4.3.0 ([aa8753f](https://github.com/brocoders/nestjs-boilerplate/commit/aa8753f07c7cfbb470aada7080253005a2fbd676))
* **deps:** update dependency swagger-ui-express to v4.5.0 ([c17cccd](https://github.com/brocoders/nestjs-boilerplate/commit/c17cccde886c6aa8ebc7d434932def262ab1cdc5))
* **deps:** update dependency swagger-ui-express to v4.6.0 ([40340b7](https://github.com/brocoders/nestjs-boilerplate/commit/40340b7c743480b16c18d4ca9d612ecb41ebc486))
* **deps:** update dependency swagger-ui-express to v4.6.1 ([95b99fa](https://github.com/brocoders/nestjs-boilerplate/commit/95b99fa5f80cc0e56da0d271a125e67268f06bdd))
* **deps:** update dependency swagger-ui-express to v4.6.2 ([e463642](https://github.com/brocoders/nestjs-boilerplate/commit/e463642617967b2e626e223972d8b500e8f153d3))
* **deps:** update dependency swagger-ui-express to v4.6.3 ([385eceb](https://github.com/brocoders/nestjs-boilerplate/commit/385ecebbee81e4a15f4f638616864001e00778c7))
* **deps:** update dependency swagger-ui-express to v5 ([a4e35a6](https://github.com/brocoders/nestjs-boilerplate/commit/a4e35a67e8e03a055314c2326307f421e9501aa2))
* **deps:** update dependency typeorm to v0.2.36 ([482a081](https://github.com/brocoders/nestjs-boilerplate/commit/482a081b525b6e1858832189c3f09850e90ff083))
* **deps:** update dependency typeorm to v0.2.37 ([23f4fc3](https://github.com/brocoders/nestjs-boilerplate/commit/23f4fc3206d43c37a0d63038ad6ab4ef8e1d207c))
* **deps:** update dependency typeorm to v0.2.38 ([c280fd7](https://github.com/brocoders/nestjs-boilerplate/commit/c280fd758e0503b8df51f1991363b45c5905f91d))
* **deps:** update dependency typeorm to v0.2.39 ([4ad3643](https://github.com/brocoders/nestjs-boilerplate/commit/4ad36434351ae090642e123f9b98d8840ce4f17f))
* **deps:** update dependency typeorm to v0.2.40 ([18629f2](https://github.com/brocoders/nestjs-boilerplate/commit/18629f210e35706bc6f460ca56b639cebe60f8f2))
* **deps:** update dependency typeorm to v0.2.41 ([69f6131](https://github.com/brocoders/nestjs-boilerplate/commit/69f6131ee23edd8d6b3552f1ae433ce44570da93))
* **deps:** update dependency typeorm to v0.3.10 ([1266ae9](https://github.com/brocoders/nestjs-boilerplate/commit/1266ae95563af6f816655e66951f77abe90a5bd2))
* **deps:** update dependency typeorm to v0.3.11 ([d1dd140](https://github.com/brocoders/nestjs-boilerplate/commit/d1dd1408bd847f141a171d5344ad19570680f3b7))
* **deps:** update dependency typeorm to v0.3.12 ([e61a5b1](https://github.com/brocoders/nestjs-boilerplate/commit/e61a5b1882a7de318df2407c1e2ca32a64a1136c))
* **deps:** update dependency typeorm to v0.3.13 ([113f59a](https://github.com/brocoders/nestjs-boilerplate/commit/113f59aac6f7d4efb470fedc8401b216073e6737))
* **deps:** update dependency typeorm to v0.3.14 ([229ca19](https://github.com/brocoders/nestjs-boilerplate/commit/229ca19b1d494206ed0ae4ef280559e6871a6069))
* **deps:** update dependency typeorm to v0.3.15 ([c52a02a](https://github.com/brocoders/nestjs-boilerplate/commit/c52a02ab29e4929f769a3f10774205fd022720c2))
* **deps:** update dependency typeorm to v0.3.16 ([aaa3c3f](https://github.com/brocoders/nestjs-boilerplate/commit/aaa3c3f37cf53f85eaaad44cc6002bcbad38e351))
* **deps:** update dependency typeorm to v0.3.17 ([471b61f](https://github.com/brocoders/nestjs-boilerplate/commit/471b61f7f4099dd94af44a290b3d9ebb09da5d6b))
* **deps:** update dependency typeorm to v0.3.19 ([7bac23c](https://github.com/brocoders/nestjs-boilerplate/commit/7bac23c4c67c287ef506367764728b89921ba3bb))
* **deps:** update dependency typeorm to v0.3.9 ([84283a0](https://github.com/brocoders/nestjs-boilerplate/commit/84283a0d709de962ee59bd571ac69d6557157f5b))
* **deps:** update nest monorepo ([44cbd8e](https://github.com/brocoders/nestjs-boilerplate/commit/44cbd8e7f2f10515597fd088000c32a2d74a2b21))
* **deps:** update nest monorepo ([8adaedb](https://github.com/brocoders/nestjs-boilerplate/commit/8adaedbd8d57e8afff446d6d5df0ab050d336142))
* **deps:** update nest monorepo ([ef70faa](https://github.com/brocoders/nestjs-boilerplate/commit/ef70faabca3efce8e01f378c465b1fdc0691ed2c))
* **deps:** update nest monorepo ([4913164](https://github.com/brocoders/nestjs-boilerplate/commit/4913164273921eab68d2a7754e0a46f8ed50d6d8))
* **deps:** update nest monorepo ([5de0e87](https://github.com/brocoders/nestjs-boilerplate/commit/5de0e876d681a746d2670f83703b6db13c9bf0d8))
* **deps:** update nest monorepo to v10 ([e8da94c](https://github.com/brocoders/nestjs-boilerplate/commit/e8da94c6edceb1155a233608349adbc259e17bf0))
* **deps:** update nest monorepo to v10.0.5 ([70fde88](https://github.com/brocoders/nestjs-boilerplate/commit/70fde889ead224e617ec8d225c999e5771a951ac))
* **deps:** update nest monorepo to v10.1.0 ([b33345f](https://github.com/brocoders/nestjs-boilerplate/commit/b33345f26ddb16cda32fb554ca2214e24398b568))
* **deps:** update nest monorepo to v10.1.1 ([a636bb7](https://github.com/brocoders/nestjs-boilerplate/commit/a636bb75e43f095e11983796f737786ef841b3dd))
* **deps:** update nest monorepo to v10.1.2 ([c7cfa91](https://github.com/brocoders/nestjs-boilerplate/commit/c7cfa914cfc8ac9542c8572ab2c3de1df2fc0180))
* **deps:** update nest monorepo to v10.1.3 ([5ed56aa](https://github.com/brocoders/nestjs-boilerplate/commit/5ed56aafad81065942f34bf8e35fe1688e905c6a))
* **deps:** update nest monorepo to v10.2.0 ([4cd8f15](https://github.com/brocoders/nestjs-boilerplate/commit/4cd8f157fcf036b4311dae636ebb628c4f5ae340))
* **deps:** update nest monorepo to v10.2.10 ([b93c9f9](https://github.com/brocoders/nestjs-boilerplate/commit/b93c9f9215a4c85689d190b09b5a09f3c26f59b0))
* **deps:** update nest monorepo to v10.2.4 ([e9e8d1a](https://github.com/brocoders/nestjs-boilerplate/commit/e9e8d1a9bd7f45fa4f63f370949023c8ba109e58))
* **deps:** update nest monorepo to v10.2.6 ([a283e98](https://github.com/brocoders/nestjs-boilerplate/commit/a283e9814e45a49cab7b125a340502d620ac78d3))
* **deps:** update nest monorepo to v10.2.7 ([affc863](https://github.com/brocoders/nestjs-boilerplate/commit/affc8632d28ae1e0069e2de12e6664b6477637da))
* **deps:** update nest monorepo to v10.2.8 ([d74dd84](https://github.com/brocoders/nestjs-boilerplate/commit/d74dd84a401499fbad9b971fd32e435cc96b7368))
* **deps:** update nest monorepo to v10.3.0 ([19683a4](https://github.com/brocoders/nestjs-boilerplate/commit/19683a4be347bfa65633b62a4542ca6610fe76cc))
* **deps:** update nest monorepo to v10.3.1 ([e688b2e](https://github.com/brocoders/nestjs-boilerplate/commit/e688b2ea9ea77e0598295841703e677b8434d1c8))
* **deps:** update nest monorepo to v10.3.3 ([e75ada7](https://github.com/brocoders/nestjs-boilerplate/commit/e75ada70277d8221c6813d356aaca09da6f44e14))
* **deps:** update nest monorepo to v7.6.18 ([83a8d0a](https://github.com/brocoders/nestjs-boilerplate/commit/83a8d0a937c00185c9a788f981a14d27792cdfb0))
* **deps:** update nest monorepo to v8 ([aa7dbed](https://github.com/brocoders/nestjs-boilerplate/commit/aa7dbedebb51a1e1cc229b453e9a0c37db947a3c))
* **deps:** update nest monorepo to v8.0.1 ([f787ca6](https://github.com/brocoders/nestjs-boilerplate/commit/f787ca60bdc758a11dab3fa85886e4e36b8d97f8))
* **deps:** update nest monorepo to v8.0.10 ([af2625a](https://github.com/brocoders/nestjs-boilerplate/commit/af2625a993644cc99af40ba17ef8aad715a8c340))
* **deps:** update nest monorepo to v8.0.11 ([f4efa13](https://github.com/brocoders/nestjs-boilerplate/commit/f4efa1369892bf72c646bee5c2d3e5cd5501bd26))
* **deps:** update nest monorepo to v8.0.2 ([bcda7e5](https://github.com/brocoders/nestjs-boilerplate/commit/bcda7e586f8a1759f6b0c2a052cabd805c5ee340))
* **deps:** update nest monorepo to v8.0.4 ([7d8dba2](https://github.com/brocoders/nestjs-boilerplate/commit/7d8dba21a2a0f0fdc688b667405f1bed23047cb6))
* **deps:** update nest monorepo to v8.0.6 ([1e075c9](https://github.com/brocoders/nestjs-boilerplate/commit/1e075c9593205e6e3be22c3b318d86787b501b28))
* **deps:** update nest monorepo to v8.0.7 ([3312f2d](https://github.com/brocoders/nestjs-boilerplate/commit/3312f2dfba0257587b838f72781faab3df68aff9))
* **deps:** update nest monorepo to v8.0.8 ([c81a10b](https://github.com/brocoders/nestjs-boilerplate/commit/c81a10b07592632242a5d4983c680b062fe2c71f))
* **deps:** update nest monorepo to v8.0.9 ([7b373e3](https://github.com/brocoders/nestjs-boilerplate/commit/7b373e3383f3254a19a14e61f965f1aa3bf8808a))
* **deps:** update nest monorepo to v8.1.1 ([1313bcf](https://github.com/brocoders/nestjs-boilerplate/commit/1313bcf06c590e3fc827c1b72acab8b1889b4621))
* **deps:** update nest monorepo to v8.1.2 ([b4a885d](https://github.com/brocoders/nestjs-boilerplate/commit/b4a885d27bd6c23eb0f381767a3f74ee3e5d7ee9))
* **deps:** update nest monorepo to v8.2.0 ([226ed7e](https://github.com/brocoders/nestjs-boilerplate/commit/226ed7ed88a5042e5555c30fad61444b5e74ba4d))
* **deps:** update nest monorepo to v8.2.1 ([fb7ccd1](https://github.com/brocoders/nestjs-boilerplate/commit/fb7ccd1822ae341899421908ded7ee7ef6ea2d5c))
* **deps:** update nest monorepo to v8.2.3 ([44a317c](https://github.com/brocoders/nestjs-boilerplate/commit/44a317ceaadc1e2e171b0b05d3a64e2616ffabe2))
* **deps:** update nest monorepo to v8.2.4 ([b1a001b](https://github.com/brocoders/nestjs-boilerplate/commit/b1a001b69cd323d76b134bb4e99746eff4ccb7e5))
* **deps:** update nest monorepo to v8.2.6 ([da39aa3](https://github.com/brocoders/nestjs-boilerplate/commit/da39aa3a994be86eb215f38fd2f20720136478bd))
* **deps:** update nest monorepo to v8.3.0 ([054a9b4](https://github.com/brocoders/nestjs-boilerplate/commit/054a9b4c8770ec77664eeb4e605fb0e806ec279a))
* **deps:** update nest monorepo to v9.0.11 ([e18e8fa](https://github.com/brocoders/nestjs-boilerplate/commit/e18e8fa7ae25a9d6d35c0b1c9fef7690363057cb))
* **deps:** update nest monorepo to v9.0.9 ([6cc958d](https://github.com/brocoders/nestjs-boilerplate/commit/6cc958dacc3ed35aa120d5d98b8b090d3dfba61c))
* **deps:** update nest monorepo to v9.1.2 ([d0a9d99](https://github.com/brocoders/nestjs-boilerplate/commit/d0a9d9941b75e2de117af31a83168d7ac3683fd7))
* **deps:** update nest monorepo to v9.1.4 ([e6f32dd](https://github.com/brocoders/nestjs-boilerplate/commit/e6f32dd351e764a2d51856454f6e689f59128a02))
* **deps:** update nest monorepo to v9.1.5 ([5d017ba](https://github.com/brocoders/nestjs-boilerplate/commit/5d017ba2d66ba691af3b0df11d175849cba68229))
* **deps:** update nest monorepo to v9.1.6 ([3bc56aa](https://github.com/brocoders/nestjs-boilerplate/commit/3bc56aae9c99470c5687681101969de5dad70cb4))
* **deps:** update nest monorepo to v9.2.1 ([8254de7](https://github.com/brocoders/nestjs-boilerplate/commit/8254de74d4892c493da76369c63d21d666b9940f))
* **deps:** update nest monorepo to v9.3.10 ([4109cd2](https://github.com/brocoders/nestjs-boilerplate/commit/4109cd24f6ab3efe3ce62099c3f1a893cdbfc000))
* **deps:** update nest monorepo to v9.3.11 ([d81dfbc](https://github.com/brocoders/nestjs-boilerplate/commit/d81dfbce4352c1a61e1ae098cdf116a9a2a3df76))
* **deps:** update nest monorepo to v9.3.12 ([d341e2c](https://github.com/brocoders/nestjs-boilerplate/commit/d341e2c32a915edc01f643afd05812027fc8b1b0))
* **deps:** update nest monorepo to v9.3.9 ([7c66721](https://github.com/brocoders/nestjs-boilerplate/commit/7c667217da900b1cbb33218de93f8c70b65c9fc9))
* **deps:** update nest monorepo to v9.4.0 ([d7a799d](https://github.com/brocoders/nestjs-boilerplate/commit/d7a799d559b68c9ccecfa513dad4549d0f2ea565))
* **deps:** update nest monorepo to v9.4.1 ([1da7bd4](https://github.com/brocoders/nestjs-boilerplate/commit/1da7bd4b734eac2009ce1f996ba8fcbebf1e0812))
* **deps:** update nest monorepo to v9.4.2 ([4a8bd56](https://github.com/brocoders/nestjs-boilerplate/commit/4a8bd563fb12c45a82211491fca546faad68e58b))
* **deps:** update nest monorepo to v9.4.3 ([bfeb525](https://github.com/brocoders/nestjs-boilerplate/commit/bfeb525a05f38d9ce10c827fd9dc07663a779f9c))
* **docker-postgres:** add config db volumes to docker CI file ([0fa6bdc](https://github.com/brocoders/nestjs-boilerplate/commit/0fa6bdc2e68454fa0aef260d9941b968a7d43890))
* **docker-postgres:** configure the db volumes ([5e16486](https://github.com/brocoders/nestjs-boilerplate/commit/5e1648688572b6d651d155c98567dd8f1bec4c65))
* **docker:** remove .env from .dockerignore ([eca25cf](https://github.com/brocoders/nestjs-boilerplate/commit/eca25cf4abcb137f770834d9f08c8fa94c00d63c))
* **docker:** running in Windows ([672ae95](https://github.com/brocoders/nestjs-boilerplate/commit/672ae9585ccddefe5140bc28fab7b35f1a8acb81))
* **docs:** change link to docs ([8068449](https://github.com/brocoders/nestjs-boilerplate/commit/8068449f421c6c076ff7f72a2fcf1cb8ee529f05))
* **e2e:** run test on local machine ([47b4e79](https://github.com/brocoders/nestjs-boilerplate/commit/47b4e79f8035308bec3a613d66aa4fb6d440bf07))
* email links ([e3ae365](https://github.com/brocoders/nestjs-boilerplate/commit/e3ae36563e6122793d91e64f4ba387df9996023d))
* **error:** change messages ([f8e5e99](https://github.com/brocoders/nestjs-boilerplate/commit/f8e5e99c56b2f1aefac8e0eb03002e885fa015a4))
* **eslint:** do not apply --fix automatically ([ad08bff](https://github.com/brocoders/nestjs-boilerplate/commit/ad08bffb170d9d4b5f39e1ab4acddf5cd7b750af))
* **eslint:** errors ([4b9f841](https://github.com/brocoders/nestjs-boilerplate/commit/4b9f841d3d70a8965420055d27d333d21c38da9e))
* **eslist:** package.json ([7d01345](https://github.com/brocoders/nestjs-boilerplate/commit/7d013459863983234a90e60c699a733e3fbaed0c))
* file upload ([062758c](https://github.com/brocoders/nestjs-boilerplate/commit/062758ca5dc4e5dd4c730ed26b44862621209b49))
* **file:** remove avatar ([c825524](https://github.com/brocoders/nestjs-boilerplate/commit/c8255248e07cb66406d954cf40ca860aa7768b56))
* **files:** :bug: remove case sensitive filename ([3865f35](https://github.com/brocoders/nestjs-boilerplate/commit/3865f35954758bbd3f9a13f0a4354a0414660565))
* **files:** added prefix v1 for local file path ([c29c44a](https://github.com/brocoders/nestjs-boilerplate/commit/c29c44af4deb83f13d4d8a1c1f707ff23dcab9c5))
* **i18n:** header resolver [#750](https://github.com/brocoders/nestjs-boilerplate/issues/750) ([a8f6ca2](https://github.com/brocoders/nestjs-boilerplate/commit/a8f6ca28267e35d170da6e11d150529bad4604dc))
* **login:** login with extra space in email ([58ba399](https://github.com/brocoders/nestjs-boilerplate/commit/58ba3995bdd601f29fd9dc0c832fb9458417fb47))
* npm version ([b3dbf23](https://github.com/brocoders/nestjs-boilerplate/commit/b3dbf23a5bef9556f1a94ae0d2e0bd67eb5b7095))
* prettier ([c520300](https://github.com/brocoders/nestjs-boilerplate/commit/c520300bcdcfb2fce715795216604a3cc2949699))
* **readme:** command for testing ([c888ff3](https://github.com/brocoders/nestjs-boilerplate/commit/c888ff3078f9f0b484bf990a2bfc7e17559745b1))
* **readme:** typo ([6bb9e2f](https://github.com/brocoders/nestjs-boilerplate/commit/6bb9e2f9e7f934dfa921bd96e9affda287806aa2))
* sh file in docker ([1bf7b33](https://github.com/brocoders/nestjs-boilerplate/commit/1bf7b338dc5a53c404e117fa1fc61a0bdb2c95a1))
* social auth data ([22bf773](https://github.com/brocoders/nestjs-boilerplate/commit/22bf7737fe67807b00d7bb69ace3c99e4f323641))
* social auth logic ([790f8d0](https://github.com/brocoders/nestjs-boilerplate/commit/790f8d05b63836d50fe95483229cdbe87ce602b1))
* **social-login:** remove redundant check ([f12ac82](https://github.com/brocoders/nestjs-boilerplate/commit/f12ac82f6053a1f1104a59315dcc8caa8d126921))
* **typescript:** Column type ([39af8ea](https://github.com/brocoders/nestjs-boilerplate/commit/39af8eadc43d616fdec6876da5f00de595b5d8ec))
* **typescript:** enable strictNullChecks ([c4a8451](https://github.com/brocoders/nestjs-boilerplate/commit/c4a845143a8c46c0a29f12548df80058e1a12151))
* **user:** added checking old password ([e09d28d](https://github.com/brocoders/nestjs-boilerplate/commit/e09d28dfddde82de89025edf649bdc3537701af4))
* **user:** prevent null password ([db8bdd5](https://github.com/brocoders/nestjs-boilerplate/commit/db8bdd54d6ad9200583f5dbb08132bd7e64ea17a))

================
File: backend/CODE_OF_CONDUCT.md
================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
- Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or
  advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email
  address, without their explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
<vl.shchepotin@gmail.com>.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
<https://www.contributor-covenant.org/faq>. Translations are available at
<https://www.contributor-covenant.org/translations>.

================
File: backend/commitlint.config.js
================
module.exports = {
  extends: ['@commitlint/config-conventional'],
};

================
File: backend/docker-compose.document.ci.yaml
================
services:
  mongo:
    image: mongo:8.0.3
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    expose:
      - 27017

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    expose:
      - 1080
      - 1025

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   expose:
  #     - 6379

  api:
    build:
      context: .
      dockerfile: document.e2e.Dockerfile
    env_file:
      - env-example-document

================
File: backend/docker-compose.document.test.yaml
================
services:
  mongo:
    image: mongo:8.0.3
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    expose:
      - 27017

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    expose:
      - 1080
      - 1025

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   expose:
  #     - 6379

  api:
    build:
      context: .
      dockerfile: document.test.Dockerfile
    env_file:
      - env-example-document
    volumes:
      - ./src:/usr/src/app/src
      - ./test:/usr/src/app/test

================
File: backend/docker-compose.document.yaml
================
services:
  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    ports:
      - ${MAIL_CLIENT_PORT}:1080
      - ${MAIL_PORT}:1025

  mongo:
    image: mongo:8.0.3
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - boilerplate-mongo-db:/data/db
    ports:
      - ${DATABASE_PORT}:27017

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${DATABASE_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${DATABASE_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@mongo:${DATABASE_PORT}/

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - 6379:6379

  api:
    build:
      context: .
      dockerfile: document.Dockerfile
    ports:
      - ${APP_PORT}:${APP_PORT}

volumes:
  boilerplate-mongo-db:

================
File: backend/docker-compose.relational.ci.yaml
================
services:
  postgres:
    image: postgres:17.0-alpine
    expose:
      - 5432
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    expose:
      - 1080
      - 1025

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   expose:
  #     - 6379

  api:
    build:
      context: .
      dockerfile: relational.e2e.Dockerfile
    env_file:
      - env-example-relational

================
File: backend/docker-compose.relational.test.yaml
================
services:
  postgres:
    image: postgres:17.0-alpine
    expose:
      - 5432
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    expose:
      - 1080
      - 1025

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   expose:
  #     - 6379

  api:
    build:
      context: .
      dockerfile: relational.test.Dockerfile
    env_file:
      - env-example-relational
    volumes:
      - ./src:/usr/src/app/src
      - ./test:/usr/src/app/test

================
File: backend/docker-compose.yaml
================
services:
  postgres:
    image: postgres:17.0-alpine
    ports:
      - ${DATABASE_PORT}:5432
    volumes:
      - boilerplate-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    ports:
      - ${MAIL_CLIENT_PORT}:1080
      - ${MAIL_PORT}:1025

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  # Uncomment to use redis
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - 6379:6379

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${APP_PORT}:${APP_PORT}

volumes:
  boilerplate-db:

================
File: backend/Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app
RUN cp -a /tmp/app/node_modules /usr/src/app
COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.relational.dev.sh /opt/startup.relational.dev.sh
RUN chmod +x /opt/startup.relational.dev.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.relational.dev.sh

WORKDIR /usr/src/app
RUN if [ ! -f .env ]; then cp env-example-relational .env; fi
RUN npm run build

CMD ["/opt/startup.relational.dev.sh"]

================
File: backend/document.Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app
RUN cp -a /tmp/app/node_modules /usr/src/app
COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.document.dev.sh /opt/startup.document.dev.sh
RUN chmod +x /opt/startup.document.dev.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.document.dev.sh

WORKDIR /usr/src/app
RUN if [ ! -f .env ]; then cp env-example-document .env; fi
RUN npm run build

CMD ["/opt/startup.document.dev.sh"]

================
File: backend/document.e2e.Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app
RUN cp -a /tmp/app/node_modules /usr/src/app
COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.document.ci.sh /opt/startup.document.ci.sh
RUN chmod +x /opt/startup.document.ci.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.document.ci.sh

WORKDIR /usr/src/app
RUN echo "" > .env
RUN npm run build

CMD ["/opt/startup.document.ci.sh"]

================
File: backend/document.test.Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app

COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.document.test.sh /opt/startup.document.test.sh
RUN chmod +x /opt/startup.document.test.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.document.test.sh

WORKDIR /usr/src/app

RUN echo "" > .env

CMD ["/opt/startup.document.test.sh"]

================
File: backend/env-example-document
================
NODE_ENV=development
APP_PORT=3000
APP_NAME="NestJS API"
API_PREFIX=api
APP_FALLBACK_LANGUAGE=en
APP_HEADER_LANGUAGE=x-custom-lang
FRONTEND_DOMAIN=http://localhost:3000
BACKEND_DOMAIN=http://localhost:3000

DATABASE_TYPE=mongodb
DATABASE_PORT=27017
DATABASE_USERNAME=root
DATABASE_PASSWORD=secret
DATABASE_NAME=api
DATABASE_URL=mongodb://mongo:27017

# Support "local", "s3", "s3-presigned"
FILE_DRIVER=local
ACCESS_KEY_ID=
SECRET_ACCESS_KEY=
AWS_S3_REGION=
AWS_DEFAULT_S3_BUCKET=

MAIL_HOST=maildev
MAIL_PORT=1025
MAIL_USER=
MAIL_PASSWORD=
MAIL_IGNORE_TLS=true
MAIL_SECURE=false
MAIL_REQUIRE_TLS=false
MAIL_DEFAULT_EMAIL=noreply@example.com
MAIL_DEFAULT_NAME=Api
MAIL_CLIENT_PORT=1080

AUTH_JWT_SECRET=secret
AUTH_JWT_TOKEN_EXPIRES_IN=15m
AUTH_REFRESH_SECRET=secret_for_refresh
AUTH_REFRESH_TOKEN_EXPIRES_IN=3650d
AUTH_FORGOT_SECRET=secret_for_forgot
AUTH_FORGOT_TOKEN_EXPIRES_IN=30m
AUTH_CONFIRM_EMAIL_SECRET=secret_for_confirm_email
AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=1d

FACEBOOK_APP_ID=
FACEBOOK_APP_SECRET=

GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

APPLE_APP_AUDIENCE=[]

TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=

WORKER_HOST=redis://redis:6379/1

================
File: backend/env-example-relational
================
NODE_ENV=development
APP_PORT=3000
APP_NAME="NestJS API"
API_PREFIX=api
APP_FALLBACK_LANGUAGE=en
APP_HEADER_LANGUAGE=x-custom-lang
FRONTEND_DOMAIN=http://localhost:3000
BACKEND_DOMAIN=http://localhost:3000

DATABASE_TYPE=postgres
DATABASE_HOST=postgres
DATABASE_PORT=5432
DATABASE_USERNAME=root
DATABASE_PASSWORD=secret
DATABASE_NAME=api
DATABASE_SYNCHRONIZE=false
DATABASE_MAX_CONNECTIONS=100
DATABASE_SSL_ENABLED=false
DATABASE_REJECT_UNAUTHORIZED=false
DATABASE_CA=
DATABASE_KEY=
DATABASE_CERT=
DATABASE_URL=

# Support "local", "s3", "s3-presigned"
FILE_DRIVER=local
ACCESS_KEY_ID=
SECRET_ACCESS_KEY=
AWS_S3_REGION=
AWS_DEFAULT_S3_BUCKET=

MAIL_HOST=maildev
MAIL_PORT=1025
MAIL_USER=
MAIL_PASSWORD=
MAIL_IGNORE_TLS=true
MAIL_SECURE=false
MAIL_REQUIRE_TLS=false
MAIL_DEFAULT_EMAIL=noreply@example.com
MAIL_DEFAULT_NAME=Api
MAIL_CLIENT_PORT=1080

AUTH_JWT_SECRET=secret
AUTH_JWT_TOKEN_EXPIRES_IN=15m
AUTH_REFRESH_SECRET=secret_for_refresh
AUTH_REFRESH_TOKEN_EXPIRES_IN=3650d
AUTH_FORGOT_SECRET=secret_for_forgot
AUTH_FORGOT_TOKEN_EXPIRES_IN=30m
AUTH_CONFIRM_EMAIL_SECRET=secret_for_confirm_email
AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=1d

FACEBOOK_APP_ID=
FACEBOOK_APP_SECRET=

GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

APPLE_APP_AUDIENCE=[]

TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=

WORKER_HOST=redis://redis:6379/1

================
File: backend/eslint.config.mjs
================
import tsEslintPlugin from '@typescript-eslint/eslint-plugin';
import globals from 'globals';
import tsParser from '@typescript-eslint/parser';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import js from '@eslint/js';
import { FlatCompat } from '@eslint/eslintrc';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all,
});

export default [
  ...compat.extends(
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ),
  {
    plugins: {
      '@typescript-eslint': tsEslintPlugin,
    },
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      parser: tsParser,
      ecmaVersion: 5,
      sourceType: 'module',
      parserOptions: {
        project: 'tsconfig.json',
        tsconfigRootDir: __dirname,
      },
    },
    rules: {
      '@typescript-eslint/interface-name-prefix': 'off',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': ['error'],
      'require-await': 'off',
      '@typescript-eslint/require-await': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      'no-restricted-syntax': [
        'error',
        {
          selector:
            'CallExpression[callee.object.name=configService][callee.property.name=/^(get|getOrThrow)$/]:not(:has([arguments.1] Property[key.name=infer][value.value=true])), CallExpression[callee.object.property.name=configService][callee.property.name=/^(get|getOrThrow)$/]:not(:has([arguments.1] Property[key.name=infer][value.value=true]))',
          message:
            'Add "{ infer: true }" to configService.get() for correct typechecking. Example: configService.get("database.port", { infer: true })',
        },
        {
          selector:
            'CallExpression[callee.name=it][arguments.0.value!=/^should/]',
          message: '"it" should start with "should"',
        },
      ],
    },
  },
];

================
File: backend/LICENSE
================
MIT License

Copyright (c) 2023 Brocoders

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: backend/maildev.Dockerfile
================
FROM node:22.11.0-alpine

RUN npm i -g maildev@2.0.5

CMD maildev

================
File: backend/nest-cli.json
================
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "assets": [{ "include": "i18n/**/*", "watchAssets": true }]
  }
}

================
File: backend/package.json
================
{
  "name": "nestjs-boilerplate",
  "version": "1.2.0",
  "description": "",
  "author": "",
  "private": true,
  "license": "MIT",
  "scripts": {
    "typeorm": "env-cmd ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js",
    "migration:generate": "npm run typeorm -- --dataSource=src/database/data-source.ts migration:generate",
    "postmigration:generate": "npm run lint -- --fix",
    "migration:create": "npm run typeorm -- migration:create",
    "migration:run": "npm run typeorm -- --dataSource=src/database/data-source.ts migration:run",
    "migration:revert": "npm run typeorm -- --dataSource=src/database/data-source.ts migration:revert",
    "schema:drop": "npm run typeorm -- --dataSource=src/database/data-source.ts schema:drop",
    "seed:create:relational": "hygen seeds create-relational",
    "seed:create:document": "hygen seeds create-document",
    "generate:resource:relational": "hygen generate relational-resource",
    "postgenerate:resource:relational": "npm run lint -- --fix",
    "generate:resource:document": "hygen generate document-resource",
    "postgenerate:resource:document": "npm run lint -- --fix",
    "generate:resource:all-db": "hygen generate all-db-resource",
    "postgenerate:resource:all-db": "npm run lint -- --fix",
    "add:property:to-all-db": "hygen property add-to-all-db",
    "postadd:property:to-all-db": "npm run lint -- --fix",
    "add:property:to-document": "hygen property add-to-document",
    "postadd:property:to-document": "npm run lint -- --fix",
    "add:property:to-relational": "hygen property add-to-relational",
    "postadd:property:to-relational": "npm run lint -- --fix",
    "app:config": "ts-node -r tsconfig-paths/register ./.install-scripts/index.ts && npm install && npm run lint -- --fix",
    "seed:run:relational": "ts-node -r tsconfig-paths/register ./src/database/seeds/relational/run-seed.ts",
    "seed:run:document": "ts-node -r tsconfig-paths/register ./src/database/seeds/document/run-seed.ts",
    "prebuild": "rimraf dist",
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:swc": "nest start -b swc -w",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "env-cmd jest --config ./test/jest-e2e.json",
    "test:e2e:document:docker": "docker compose -f docker-compose.document.test.yaml --env-file env-example-document -p tests up -d --build && docker compose -f docker-compose.document.test.yaml -p tests exec api /opt/wait-for-it.sh -t 0 localhost:3000 -- npm run test:e2e -- --watchAll --runInBand && docker compose -f docker-compose.document.test.yaml -p tests down && docker compose -p tests rm -svf",
    "test:e2e:relational:docker": "docker compose -f docker-compose.relational.test.yaml --env-file env-example-relational -p tests up -d --build && docker compose -f docker-compose.relational.test.yaml -p tests exec api /opt/wait-for-it.sh -t 0 localhost:3000 -- npm run test:e2e -- --watchAll --runInBand && docker compose -f docker-compose.relational.test.yaml -p tests down && docker compose -p tests rm -svf",
    "prepare": "is-ci || husky",
    "release": "release-it"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "3.670.0",
    "@aws-sdk/s3-request-presigner": "3.670.0",
    "@nestjs/common": "10.4.6",
    "@nestjs/config": "3.3.0",
    "@nestjs/core": "10.4.6",
    "@nestjs/jwt": "10.2.0",
    "@nestjs/mongoose": "10.1.0",
    "@nestjs/passport": "10.0.3",
    "@nestjs/platform-express": "10.4.6",
    "@nestjs/swagger": "8.0.1",
    "@nestjs/typeorm": "10.0.2",
    "@types/multer-s3": "3.0.3",
    "@types/prompts": "2.4.9",
    "apple-signin-auth": "1.7.7",
    "bcryptjs": "2.4.3",
    "class-transformer": "0.5.1",
    "class-validator": "0.14.1",
    "dotenv": "16.4.5",
    "fb": "2.0.0",
    "google-auth-library": "9.14.2",
    "handlebars": "4.7.8",
    "mongoose": "8.8.0",
    "mongoose-autopopulate": "^1.1.0",
    "ms": "2.1.3",
    "multer": "1.4.5-lts.1",
    "multer-s3": "3.0.1",
    "nestjs-i18n": "10.4.9",
    "nodemailer": "6.9.16",
    "passport": "0.7.0",
    "passport-anonymous": "1.0.1",
    "passport-jwt": "4.0.1",
    "pg": "8.13.1",
    "reflect-metadata": "0.2.2",
    "rimraf": "6.0.1",
    "rxjs": "7.8.1",
    "source-map-support": "0.5.21",
    "swagger-ui-express": "5.0.1",
    "twitter": "1.7.1",
    "typeorm": "0.3.20"
  },
  "devDependencies": {
    "@commitlint/cli": "19.5.0",
    "@commitlint/config-conventional": "19.5.0",
    "@eslint/eslintrc": "^3.1.0",
    "@eslint/js": "^9.9.0",
    "@nestjs/cli": "10.4.5",
    "@nestjs/schematics": "10.2.3",
    "@nestjs/testing": "10.4.6",
    "@release-it/conventional-changelog": "9.0.0",
    "@swc/cli": "0.4.0",
    "@swc/core": "1.7.40",
    "@types/bcryptjs": "2.4.6",
    "@types/express": "5.0.0",
    "@types/facebook-js-sdk": "3.3.12",
    "@types/jest": "29.5.14",
    "@types/ms": "0.7.34",
    "@types/multer": "1.4.12",
    "@types/node": "22.8.7",
    "@types/passport-anonymous": "1.0.5",
    "@types/passport-jwt": "4.0.1",
    "@types/supertest": "6.0.2",
    "@types/twitter": "1.7.4",
    "@typescript-eslint/eslint-plugin": "8.11.0",
    "@typescript-eslint/parser": "8.11.0",
    "env-cmd": "10.1.0",
    "eslint": "9.14.0",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-prettier": "5.2.1",
    "globals": "^15.9.0",
    "husky": "9.1.6",
    "hygen": "6.2.11",
    "is-ci": "3.0.1",
    "jest": "29.7.0",
    "prettier": "3.3.3",
    "prompts": "2.4.2",
    "release-it": "17.10.0",
    "supertest": "7.0.0",
    "ts-jest": "29.2.5",
    "ts-loader": "9.5.1",
    "ts-node": "10.9.2",
    "tsconfig-paths": "4.2.0",
    "tslib": "2.8.0",
    "typescript": "5.6.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "release-it": {
    "git": {
      "commitMessage": "chore: release v${version}"
    },
    "github": {
      "release": true
    },
    "npm": {
      "publish": false
    },
    "plugins": {
      "@release-it/conventional-changelog": {
        "infile": "CHANGELOG.md",
        "preset": {
          "name": "conventionalcommits",
          "types": [
            {
              "type": "chore(deps)",
              "section": "Dependency Upgrades"
            },
            {
              "type": "fix(deps)",
              "section": "Dependency Upgrades"
            },
            {
              "type": "feat",
              "section": "Features"
            },
            {
              "type": "fix",
              "section": "Bug Fixes"
            },
            {
              "type": "perf",
              "section": "Performance Improvements"
            },
            {
              "type": "revert",
              "section": "Reverts"
            },
            {
              "type": "docs",
              "section": "Documentation"
            },
            {
              "type": "refactor",
              "section": "Code Refactoring"
            },
            {
              "type": "test",
              "section": "Tests"
            },
            {
              "type": "ci",
              "section": "Continuous Integration"
            }
          ]
        }
      }
    }
  }
}

================
File: backend/Procfile
================
web: npm run start:prod
release: echo '' > .env && npm run migration:run && npm run seed:run:relational

================
File: backend/README.md
================
# NestJS REST API boilerplate 🇺🇦

[![image](https://github.com/brocoders/nestjs-boilerplate/assets/72293912/197da43e-02f4-4895-8d3e-b7a42a591c26)](https://github.com/new?template_name=nestjs-boilerplate&template_owner=brocoders)

![github action status](https://github.com/brocoders/nestjs-boilerplate/actions/workflows/docker-e2e.yml/badge.svg)
[![renovate](https://img.shields.io/badge/renovate-enabled-%231A1F6C?logo=renovatebot)](https://app.renovatebot.com/dashboard)
[![Static Badge](https://img.shields.io/badge/supported_by-brocoders-d91965?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMTMwIiBoZWlnaHQ9IjE4NyIgdmlld0JveD0iMCAwIDEzMCAxODciIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI%2BCjxnIGNsaXAtcGF0aD0idXJsKCNjbGlwMF83NzExXzQ4OTEpIj4KPHBhdGggZD0iTTc1Ljk5NjcgNDUuNzUwNkM2NS4xMDg5IDQ2Ljg2MSA1Ny45MjMgNTguNDA5NyA2Mi4yNzgxIDY4Ljg0OEwxMDguNDQyIDE4N0w3My42MDEzIDE1NS4wMTlIMzQuODQwOUMyMC42ODY4IDE1NS4wMTkgOS4zNjM0OSAxNDMuNDcgOS4zNjM0OSAxMjkuMDM0Vjk0LjYxMDVDOS4zNjM0OSA5Mi4xNjc1IDguNDkyNDYgODkuNzI0NSA2Ljc1MDQyIDg3Ljk0NzdMMCA4MS4wNjNMNi43NTA0MiA3NC4xNzgxQzguNDkyNDYgNzIuNDAxNCA5LjM2MzQ5IDY5Ljk1ODQgOS4zNjM0OSA2Ny41MTU0VjMxLjA5MjZDOS4zNjM0OSAxMy43Njk2IDIzLjA4MjEgMCAzOS44NDkyIDBINTguMTQwN0w3NS45OTY3IDQ1Ljc1MDZaIiBmaWxsPSJ3aGl0ZSIvPgo8cGF0aCBkPSJNMTI1LjY0NiAxMTIuMzc4Vjk0LjgzMjdDMTI1LjY0NiA5My43MjIyIDEyNi4wODEgOTIuNjExOCAxMjYuOTUyIDkxLjcyMzRMMTMwLjAwMSA4OC4zOTIxTDEyNi45NTIgODUuMDYwN0MxMjYuMDgxIDg0LjE3MjQgMTI1LjY0NiA4My4wNjE5IDEyNS42NDYgODEuOTUxNFY2OS43MzY1QzEyNS42NDYgNTYuNDExMSAxMTQuOTc2IDQ1Ljc1MDcgMTAyLjEyOCA0NS43NTA3SDc1Ljk5NzNMMTA1LjYxMiAxMzAuODExQzEwNS42MTIgMTMwLjgxMSAxMTAuNjIgMTMwLjgxMSAxMTAuODM4IDEzMC44MTFDMTE5LjExMyAxMjkuMDM1IDEyNS42NDYgMTIxLjQ4NCAxMjUuNjQ2IDExMi4zNzhaIiBmaWxsPSJ3aGl0ZSIvPgo8L2c%2BCjxkZWZzPgo8Y2xpcFBhdGggaWQ9ImNsaXAwXzc3MTFfNDg5MSI%2BCjxyZWN0IHdpZHRoPSIxMzAiIGhlaWdodD0iMTg3IiBmaWxsPSJ3aGl0ZSIvPgo8L2NsaXBQYXRoPgo8L2RlZnM%2BCjwvc3ZnPgo%3D&logoColor=d91965)](https://brocoders.com/)
[![Discord Badge](https://img.shields.io/badge/discord-NodeJS_boilerplate-d91965?style=flat&labelColor=5866f2&logo=discord&logoColor=white&link=https://discord.com/channels/520622812742811698/1197293125434093701)](https://discord.com/channels/520622812742811698/1197293125434093701)

<br />
<p align="center"><a href="https://discord.com/channels/520622812742811698/1197293125434093701"><img src="https://github.com/brocoders/nestjs-boilerplate/assets/72293912/c9d5fbf0-b56d-46b5-bb30-f96f44764bae" width="300"/></a></p>
<br />

## Description <!-- omit in toc -->

NestJS REST API boilerplate for a typical project

[Full documentation here](/docs/readme.md)

Demo: <https://nestjs-boilerplate-test.herokuapp.com/docs>

A fully compatible frontend boilerplate: <https://github.com/brocoders/extensive-react-boilerplate>

Belongs to the [bc boilerplates](https://bcboilerplates.com/) ecosystem

<https://github.com/user-attachments/assets/a66f114a-c714-4036-8eeb-20cbf04ae985>

## Table of Contents <!-- omit in toc -->

- [Features](#features)
- [Contributors](#contributors)
- [Support](#support)

## Features

- [x] Database. Support [TypeORM](https://www.npmjs.com/package/typeorm) and [Mongoose](https://www.npmjs.com/package/mongoose).
- [x] Seeding.
- [x] Config Service ([@nestjs/config](https://www.npmjs.com/package/@nestjs/config)).
- [x] Mailing ([nodemailer](https://www.npmjs.com/package/nodemailer)).
- [x] Sign in and sign up via email.
- [x] Social sign in (Apple, Facebook, Google, Twitter).
- [x] Admin and User roles.
- [x] Internationalization/Translations (I18N) ([nestjs-i18n](https://www.npmjs.com/package/nestjs-i18n)).
- [x] File uploads. Support local and Amazon S3 drivers.
- [x] Swagger.
- [x] E2E and units tests.
- [x] Docker.
- [x] CI (Github Actions).

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Shchepotin"><img src="https://avatars.githubusercontent.com/u/6001723?v=4?s=100" width="100px;" alt="Vladyslav Shchepotin"/><br /><sub><b>Vladyslav Shchepotin</b></sub></a><br /><a href="#maintenance-Shchepotin" title="Maintenance">🚧</a> <a href="#doc-Shchepotin" title="Documentation">📖</a> <a href="#code-Shchepotin" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/SergeiLomako"><img src="https://avatars.githubusercontent.com/u/31205374?v=4?s=100" width="100px;" alt="SergeiLomako"/><br /><sub><b>SergeiLomako</b></sub></a><br /><a href="#code-SergeiLomako" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ElenVlass"><img src="https://avatars.githubusercontent.com/u/72293912?v=4?s=100" width="100px;" alt="Elena Vlasenko"/><br /><sub><b>Elena Vlasenko</b></sub></a><br /><a href="#doc-ElenVlass" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://brocoders.com"><img src="https://avatars.githubusercontent.com/u/226194?v=4?s=100" width="100px;" alt="Rodion"/><br /><sub><b>Rodion</b></sub></a><br /><a href="#business-sars" title="Business development">💼</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Support

If you seek consulting, support, or wish to collaborate, please contact us via [boilerplates@brocoders.com](mailto:boilerplates@brocoders.com). For any inquiries regarding boilerplates, feel free to ask on [GitHub Discussions](https://github.com/brocoders/nestjs-boilerplate/discussions) or [Discord](https://discord.com/channels/520622812742811698/1197293125434093701).

================
File: backend/relational.e2e.Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app
RUN cp -a /tmp/app/node_modules /usr/src/app
COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.relational.ci.sh /opt/startup.relational.ci.sh
RUN chmod +x /opt/startup.relational.ci.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.relational.ci.sh

WORKDIR /usr/src/app
RUN echo "" > .env
RUN npm run build

CMD ["/opt/startup.relational.ci.sh"]

================
File: backend/relational.test.Dockerfile
================
FROM node:22.11.0-alpine

RUN apk add --no-cache bash
RUN npm i -g @nestjs/cli typescript ts-node

COPY package*.json /tmp/app/
RUN cd /tmp/app && npm install

COPY . /usr/src/app

COPY ./wait-for-it.sh /opt/wait-for-it.sh
RUN chmod +x /opt/wait-for-it.sh
COPY ./startup.relational.test.sh /opt/startup.relational.test.sh
RUN chmod +x /opt/startup.relational.test.sh
RUN sed -i 's/\r//g' /opt/wait-for-it.sh
RUN sed -i 's/\r//g' /opt/startup.relational.test.sh

WORKDIR /usr/src/app

RUN echo "" > .env

CMD ["/opt/startup.relational.test.sh"]

================
File: backend/renovate.json
================
{
  "extends": [
    "config:base"
  ]
}

================
File: backend/startup.document.ci.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh mongo:27017
npm run seed:run:document
npm run start:prod > prod.log 2>&1 &
/opt/wait-for-it.sh maildev:1080
/opt/wait-for-it.sh localhost:3000
npm run lint
npm run test:e2e -- --runInBand

================
File: backend/startup.document.dev.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh mongo:27017
cat .env
npm run seed:run:document
npm run start:prod

================
File: backend/startup.document.test.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh mongo:27017
/opt/wait-for-it.sh maildev:1080
npm install
npm run seed:run:document
npm run start:dev

================
File: backend/startup.relational.ci.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh postgres:5432
npm run migration:run
npm run seed:run:relational
npm run start:prod > prod.log 2>&1 &
/opt/wait-for-it.sh maildev:1080
/opt/wait-for-it.sh localhost:3000
npm run lint
npm run test:e2e -- --runInBand

================
File: backend/startup.relational.dev.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh postgres:5432
npm run migration:run
npm run seed:run:relational
npm run start:prod

================
File: backend/startup.relational.test.sh
================
#!/usr/bin/env bash
set -e

/opt/wait-for-it.sh postgres:5432
/opt/wait-for-it.sh maildev:1080
npm install
npm run migration:run
npm run seed:run:relational
npm run start:dev

================
File: backend/tsconfig.build.json
================
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}

================
File: backend/tsconfig.json
================
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false,
    "esModuleInterop": true
  }
}

================
File: backend/wait-for-it.sh
================
#!/usr/bin/env bash
# Use this script to test if a given TCP host/port are available

WAITFORIT_cmdname=${0##*/}

echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }

usage()
{
    cat << USAGE >&2
Usage:
    $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]
    -h HOST | --host=HOST       Host or IP under test
    -p PORT | --port=PORT       TCP port under test
                                Alternatively, you specify the host and port as host:port
    -s | --strict               Only execute subcommand if the test succeeds
    -q | --quiet                Don't output any status messages
    -t TIMEOUT | --timeout=TIMEOUT
                                Timeout in seconds, zero for no timeout
    -- COMMAND ARGS             Execute command with args after the test finishes
USAGE
    exit 1
}

wait_for()
{
    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
        echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
    else
        echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"
    fi
    WAITFORIT_start_ts=$(date +%s)
    while :
    do
        if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then
            nc -z $WAITFORIT_HOST $WAITFORIT_PORT
            WAITFORIT_result=$?
        else
            (echo -n > /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) >/dev/null 2>&1
            WAITFORIT_result=$?
        fi
        if [[ $WAITFORIT_result -eq 0 ]]; then
            WAITFORIT_end_ts=$(date +%s)
            echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"
            break
        fi
        sleep 1
    done
    return $WAITFORIT_result
}

wait_for_wrapper()
{
    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
    if [[ $WAITFORIT_QUIET -eq 1 ]]; then
        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
    else
        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
    fi
    WAITFORIT_PID=$!
    trap "kill -INT -$WAITFORIT_PID" INT
    wait $WAITFORIT_PID
    WAITFORIT_RESULT=$?
    if [[ $WAITFORIT_RESULT -ne 0 ]]; then
        echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
    fi
    return $WAITFORIT_RESULT
}

# process arguments
while [[ $# -gt 0 ]]
do
    case "$1" in
        *:* )
        WAITFORIT_hostport=(${1//:/ })
        WAITFORIT_HOST=${WAITFORIT_hostport[0]}
        WAITFORIT_PORT=${WAITFORIT_hostport[1]}
        shift 1
        ;;
        --child)
        WAITFORIT_CHILD=1
        shift 1
        ;;
        -q | --quiet)
        WAITFORIT_QUIET=1
        shift 1
        ;;
        -s | --strict)
        WAITFORIT_STRICT=1
        shift 1
        ;;
        -h)
        WAITFORIT_HOST="$2"
        if [[ $WAITFORIT_HOST == "" ]]; then break; fi
        shift 2
        ;;
        --host=*)
        WAITFORIT_HOST="${1#*=}"
        shift 1
        ;;
        -p)
        WAITFORIT_PORT="$2"
        if [[ $WAITFORIT_PORT == "" ]]; then break; fi
        shift 2
        ;;
        --port=*)
        WAITFORIT_PORT="${1#*=}"
        shift 1
        ;;
        -t)
        WAITFORIT_TIMEOUT="$2"
        if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi
        shift 2
        ;;
        --timeout=*)
        WAITFORIT_TIMEOUT="${1#*=}"
        shift 1
        ;;
        --)
        shift
        WAITFORIT_CLI=("$@")
        break
        ;;
        --help)
        usage
        ;;
        *)
        echoerr "Unknown argument: $1"
        usage
        ;;
    esac
done

if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then
    echoerr "Error: you need to provide a host and port to test."
    usage
fi

WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15}
WAITFORIT_STRICT=${WAITFORIT_STRICT:-0}
WAITFORIT_CHILD=${WAITFORIT_CHILD:-0}
WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}

# Check to see if timeout is from busybox?
WAITFORIT_TIMEOUT_PATH=$(type -p timeout)
WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2>/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)

WAITFORIT_BUSYTIMEFLAG=""
if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then
    WAITFORIT_ISBUSY=1
    # Check if busybox timeout uses -t flag
    # (recent Alpine versions don't support -t anymore)
    if timeout &>/dev/stdout | grep -q -e '-t '; then
        WAITFORIT_BUSYTIMEFLAG="-t"
    fi
else
    WAITFORIT_ISBUSY=0
fi

if [[ $WAITFORIT_CHILD -gt 0 ]]; then
    wait_for
    WAITFORIT_RESULT=$?
    exit $WAITFORIT_RESULT
else
    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
        wait_for_wrapper
        WAITFORIT_RESULT=$?
    else
        wait_for
        WAITFORIT_RESULT=$?
    fi
fi

if [[ $WAITFORIT_CLI != "" ]]; then
    if [[ $WAITFORIT_RESULT -ne 0 && $WAITFORIT_STRICT -eq 1 ]]; then
        echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"
        exit $WAITFORIT_RESULT
    fi
    exec "${WAITFORIT_CLI[@]}"
else
    exit $WAITFORIT_RESULT
fi

================
File: frontend/.github/workflows/checkly.yml
================
name: Checkly

on: [deployment_status]

env:
  CHECKLY_API_KEY: ${{ secrets.CHECKLY_API_KEY }}
  CHECKLY_ACCOUNT_ID: ${{ secrets.CHECKLY_ACCOUNT_ID }}
  CHECKLY_TEST_ENVIRONMENT: ${{ github.event.deployment_status.environment }}

jobs:
  test-e2e:
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Only run when the deployment was successful
    if: github.event.deployment_status.state == 'success'

    name: Test E2E on Checkly
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          ref: '${{ github.event.deployment_status.deployment.ref }}'
          fetch-depth: 0

      - name: Set branch name # workaround to detect branch name in "deployment_status" actions
        run: echo "CHECKLY_TEST_REPO_BRANCH=$(git show -s --pretty=%D HEAD | tr -s ',' '\n' | sed 's/^ //' | grep -e 'origin/' | head -1 | sed 's/\origin\///g')" >> $GITHUB_ENV

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Restore or cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run checks # run the checks passing in the ENVIRONMENT_URL and recording a test session.
        id: run-checks
        run: npx checkly test --reporter=github --record
        env:
          VERCEL_BYPASS_TOKEN: ${{ secrets.VERCEL_BYPASS_TOKEN }}
          ENVIRONMENT_URL: ${{ github.event.deployment_status.environment_url }}

      - name: Create summary # export the markdown report to the job summary.
        id: create-summary
        run: cat checkly-github-report.md > $GITHUB_STEP_SUMMARY

      - name: Deploy checks # if the test run was successful and we are on Production, deploy the checks
        id: deploy-checks
        if: steps.run-checks.outcome == 'success' && github.event.deployment_status.environment == 'Production'
        run: npx checkly deploy --force

================
File: frontend/.github/workflows/CI.yml
================
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        node-version: [20.x, 22.6] # Need to use 22.6 due to Next.js build errors: https://github.com/vercel/next.js/issues/69263
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    name: Build with ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci
      - run: npm run build

  test:
    strategy:
      matrix:
        node-version: [20.x]

    name: Run all tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Retrieve Git history, needed to verify commits
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci

      - name: Build Next.js for E2E tests
        run: npm run build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - if: github.event_name == 'pull_request'
        name: Validate all commits from PR
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Linter
        run: npm run lint

      - name: Type checking
        run: npm run check-types

      - name: Run unit tests
        run: npm run test -- --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Install Playwright (used for Storybook and E2E tests)
        run: npx playwright install --with-deps

      - name: Run storybook tests
        run: npm run test-storybook:ci

      - name: Run E2E tests
        run: npx percy exec -- npm run test:e2e
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  synchronize-with-crowdin:
    name: GitHub PR synchronize with Crowdin
    runs-on: ubuntu-latest

    needs: [build, test]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }} # Crowdin Actions needs to push commits to the PR branch, checkout HEAD commit instead of merge commit
          fetch-depth: 0

      - name: crowdin action
        uses: crowdin/github-action@v2
        with:
          upload_sources: true
          upload_translations: true
          download_translations: true
          create_pull_request: false
          localization_branch_name: ${{ github.head_ref || github.ref_name }} # explanation here: https://stackoverflow.com/a/71158878
          commit_message: 'chore: new Crowdin translations by GitHub Action'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

================
File: frontend/.github/workflows/crowdin.yml
================
name: Crowdin Action

on:
  push:
    branches: [main] # Run on push to the main branch
  schedule:
    - cron: '0 5 * * *' # Run every day at 5am
  workflow_dispatch: # Run manually

jobs:
  synchronize-with-crowdin:
    name: Synchronize with Crowdin
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: crowdin action
        uses: crowdin/github-action@v2
        with:
          upload_sources: true
          upload_translations: true
          download_translations: true
          localization_branch_name: l10n_crowdin_translations
          create_pull_request: true
          pull_request_title: New Crowdin Translations
          pull_request_body: 'New Crowdin translations by [Crowdin GH Action](https://github.com/crowdin/github-action)'
          pull_request_base_branch_name: main
          commit_message: 'chore: new Crowdin translations by GitHub Action'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

================
File: frontend/.github/workflows/release.yml
================
name: Release

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed
    branches:
      - main

jobs:
  release:
    strategy:
      matrix:
        node-version: [20.x]

    name: Create a new release
    runs-on: ubuntu-latest

    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: HUSKY=0 npm ci

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

================
File: frontend/.github/workflows/update-deps.yml
================
name: Update dependencies

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  update:
    strategy:
      matrix:
        node-version: [20.x]

    name: Update all dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci

      - run: npx npm-check-updates -u # Update dependencies
      - run: rm -Rf node_modules package-lock.json
      - run: npm install
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: 'build: update dependencies to the latest version'
          title: Update dependencies to the latest version

================
File: frontend/.github/FUNDING.yml
================
github: ixartz
custom:
  - 'https://nextjs-boilerplate.com/pro-saas-starter-kit'
  - 'https://nextlessjs.com'

================
File: frontend/.husky/commit-msg
================
#!/bin/sh
cd "$(dirname "$0")/.." && npx --no -- commitlint --edit $1

================
File: frontend/.husky/pre-commit
================
#!/bin/sh
# Disable concurent to run `check-types` after ESLint in lint-staged
cd "$(dirname "$0")/.." && npx --no lint-staged --concurrent false

================
File: frontend/.storybook/main.ts
================
import type { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-onboarding',
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
  framework: {
    name: '@storybook/nextjs',
    options: {},
  },
  staticDirs: ['../public'],
  core: {
    disableTelemetry: true,
  },
};

export default config;

================
File: frontend/.storybook/preview.ts
================
import '../src/styles/global.css';

import type { Preview } from '@storybook/react';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
    nextjs: {
      appDirectory: true,
    },
  },
};

export default preview;

================
File: frontend/.vscode/extensions.json
================
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "mikestead.dotenv",
    "csstools.postcss",
    "bradlc.vscode-tailwindcss",
    "vitest.explorer",
    "humao.rest-client",
    "yoavbls.pretty-ts-errors",
    "ms-playwright.playwright",
    "github.vscode-github-actions",
    "lokalise.i18n-ally"
  ]
}

================
File: frontend/.vscode/i18n-ally-custom-framework.yml
================
# eslint-disable yaml/quotes
languageIds:
  - javascript
  - typescript
  - javascriptreact
  - typescriptreact

usageMatchRegex:
  - "[^\\w\\d]t\\(['\"`]({key})['\"`]"

scopeRangeRegex: "(?:useTranslations\\(|getTranslations\\(|namespace:)\\s*['\"`](.*?)['\"`]"

monopoly: true

================
File: frontend/.vscode/launch.json
================
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev",
      "serverReadyAction": {
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}

================
File: frontend/.vscode/settings.json
================
{
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "search.exclude": {
    "package-lock.json": true
  },

  // TypeScript
  "typescript.tsdk": "node_modules/typescript/lib", // Use the workspace version of TypeScript
  "typescript.enablePromptUseWorkspaceTsdk": true, // For security reasons it's require that users opt into using the workspace version of typescript
  "typescript.preferences.autoImportFileExcludePatterns": [
    // useRouter should be imported from `next/navigation` instead of `next/router`
    "next/router.d.ts",
    "next/dist/client/router.d.ts",
    // give priority for Link to next/link instead of lucide-react
    "lucide-react"
  ],
  "typescript.preferences.preferTypeOnlyAutoImports": true, // Prefer type-only imports

  // Vitest
  "testing.openTesting": "neverOpen", // Don't open the testing view automatically when running tests

  // I18n
  "i18n-ally.localesPaths": ["src/locales"],
  "i18n-ally.keystyle": "nested",

  // Disable the default formatter, use ESLint instead
  "prettier.enable": false,
  "editor.formatOnSave": false,

  // Auto fix with ESLint on save
  "editor.codeActionsOnSave": [
    "source.addMissingImports",
    "source.fixAll.eslint"
  ],

  // Enable eslint for all supported languages
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "vue",
    "html",
    "markdown",
    "json",
    "jsonc",
    "yaml",
    "toml",
    "xml",
    "gql",
    "graphql",
    "astro",
    "css",
    "less",
    "scss",
    "pcss",
    "postcss",
    "github-actions-workflow"
  ]
}

================
File: frontend/.vscode/tasks.json
================
{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Project wide type checking with TypeScript",
      "type": "npm",
      "script": "check-types",
      "problemMatcher": ["$tsc"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "clear": true,
        "reveal": "never"
      }
    }
  ]
}

================
File: frontend/migrations/meta/_journal.json
================
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1725916508373,
      "tag": "0000_init-db",
      "breakpoints": true
    }
  ]
}

================
File: frontend/migrations/meta/0000_snapshot.json
================
{
  "id": "fd746382-d1ee-40c4-a173-db4142ca9fef",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.counter": {
      "name": "counter",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "count": {
          "name": "count",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "default": 0
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}

================
File: frontend/migrations/0000_init-db.sql
================
CREATE TABLE IF NOT EXISTS "counter" (
	"id" serial PRIMARY KEY NOT NULL,
	"count" integer DEFAULT 0,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL
);

================
File: frontend/public/assets/images/codecov-dark.svg
================
<svg width="160" height="44" viewBox="0 0 160 44" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2_23)">
<g clip-path="url(#clip1_2_23)">
<path d="M137.239 41.0207L132.798 35.2884H131.692V42.9725H132.814V37.0839L137.38 42.9725H138.361V35.2884H137.239V41.0207Z" fill="#1F1633"/>
<path d="M126.058 39.5951H130.037V38.5967H126.056V36.284H130.546V35.2854H124.912V42.9725H130.603V41.9741H126.056L126.058 39.5951Z" fill="#1F1633"/>
<path d="M121.378 38.6208C119.829 38.2478 119.396 37.9531 119.396 37.2374C119.396 36.5937 119.964 36.1577 120.812 36.1577C121.585 36.1802 122.33 36.4489 122.939 36.9245L123.541 36.0734C122.77 35.4691 121.813 35.1503 120.833 35.1711C119.312 35.1711 118.25 36.0734 118.25 37.3576C118.25 38.741 119.152 39.2192 120.795 39.6192C122.257 39.9561 122.704 40.2688 122.704 40.9696C122.704 41.6703 122.103 42.1034 121.173 42.1034C120.248 42.0992 119.358 41.7496 118.678 41.1229L118.001 41.932C118.873 42.6812 119.985 43.0921 121.135 43.0899C122.783 43.0899 123.842 42.2027 123.842 40.8313C123.833 39.6704 123.147 39.0478 121.378 38.6208Z" fill="#1F1633"/>
<path d="M158.707 35.2884L156.394 38.8974L154.097 35.2884H152.755L155.789 39.935V42.9756H156.945V39.8989L160 35.2884H158.707Z" fill="#1F1633"/>
<path d="M139.268 36.3291H141.786V42.9756H142.941V36.3291H145.458V35.2884H139.272L139.268 36.3291Z" fill="#1F1633"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M150.8 39.9742C151.962 39.6523 152.605 38.8403 152.605 37.6794C152.605 36.2028 151.524 35.2734 149.783 35.2734H146.366V42.9695H147.51V40.2087H149.45L151.399 42.9756H152.734L150.629 40.0223L150.8 39.9742ZM147.507 39.2223V36.305H149.663C150.788 36.305 151.431 36.8373 151.431 37.7606C151.431 38.6839 150.743 39.2223 149.675 39.2223H147.507Z" fill="#1F1633"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.252 42.9497C101.171 42.9497 101.109 42.9279 101.066 42.8839C101.022 42.8328 101 42.7707 101 42.6977V35.5401C101 35.4597 101.022 35.3976 101.066 35.3538C101.109 35.3027 101.171 35.2771 101.252 35.2771H104.259C104.808 35.2771 105.253 35.3683 105.597 35.5511C105.948 35.7264 106.204 35.9676 106.365 36.2745C106.533 36.5814 106.618 36.9249 106.618 37.3049C106.618 37.6044 106.566 37.8639 106.464 38.083C106.369 38.295 106.249 38.4704 106.102 38.6092C105.956 38.7408 105.814 38.8431 105.674 38.9161C105.96 39.0549 106.212 39.2815 106.431 39.5956C106.657 39.9098 106.771 40.2898 106.771 40.7356C106.771 41.1375 106.68 41.5066 106.497 41.8426C106.315 42.1789 106.04 42.4491 105.674 42.6538C105.315 42.8511 104.87 42.9497 104.336 42.9497H101.252ZM102.076 42.0619H104.193C104.668 42.0619 105.034 41.934 105.29 41.6782C105.546 41.4225 105.674 41.1083 105.674 40.7356C105.674 40.3483 105.546 40.0305 105.29 39.7819C105.034 39.5263 104.668 39.3984 104.193 39.3984H102.076V42.0619ZM102.076 38.5215H104.094C104.562 38.5215 104.917 38.4155 105.158 38.2036C105.4 37.9844 105.521 37.6885 105.521 37.3158C105.521 36.9431 105.4 36.6582 105.158 36.4608C104.917 36.2636 104.562 36.1649 104.094 36.1649H102.076V38.5215Z" fill="#1F1633"/>
<path d="M110.221 42.8839C110.273 42.9279 110.335 42.9497 110.408 42.9497H110.979C111.06 42.9497 111.122 42.9279 111.165 42.8839C111.217 42.8328 111.242 42.7707 111.242 42.6977V40.1109L113.876 35.6387C113.89 35.6169 113.901 35.595 113.907 35.573C113.915 35.5511 113.919 35.5255 113.919 35.4962C113.919 35.4378 113.897 35.3867 113.853 35.3428C113.81 35.299 113.755 35.2771 113.689 35.2771H113.13C113.064 35.2771 113.004 35.2953 112.953 35.3318C112.909 35.3611 112.87 35.405 112.833 35.4634L110.693 39.0147L108.553 35.4634C108.532 35.405 108.495 35.3611 108.444 35.3318C108.392 35.2953 108.334 35.2771 108.269 35.2771H107.698C107.64 35.2771 107.588 35.299 107.545 35.3428C107.5 35.3867 107.479 35.4378 107.479 35.4962C107.479 35.5255 107.483 35.5511 107.489 35.573C107.493 35.5838 107.497 35.5946 107.5 35.6053C107.504 35.6165 107.508 35.6276 107.512 35.6387L110.155 40.1109V42.6977C110.155 42.7707 110.178 42.8328 110.221 42.8839Z" fill="#1F1633"/>
<path d="M51.0821 8.70567C53.3791 8.70567 55.2164 9.46902 56.7476 11.0467L56.8497 11.1484L58.8913 9.16369L58.8403 9.0619C57.0026 7.02624 54.1956 5.90663 50.9803 5.90663C44.6515 5.90663 40.0068 10.2833 40.0068 16.3393C40.0068 22.3954 44.6004 26.7721 50.9292 26.7721C54.1445 26.7721 56.9519 25.6525 58.8403 23.5659L58.8913 23.4641L56.8497 21.4794L56.7476 21.5812C55.2164 23.1588 53.328 23.973 51.0821 23.973C46.4888 23.973 43.1714 20.7669 43.1714 16.3393C43.1714 11.9118 46.5399 8.70567 51.0821 8.70567ZM67.6189 24.1257C64.6076 24.1257 62.5149 21.9374 62.5149 18.8839C62.5149 15.7795 64.6076 13.6421 67.6189 13.6421C70.6302 13.6421 72.7226 15.7795 72.7226 18.8839C72.7226 21.9883 70.6302 24.1257 67.6189 24.1257ZM67.6189 10.9958C62.8721 10.9958 59.4525 14.3037 59.4525 18.8839C59.4525 23.4641 62.8721 26.7721 67.6189 26.7721C72.3654 26.7721 75.785 23.4641 75.785 18.8839C75.785 14.3037 72.3144 10.9958 67.6189 10.9958ZM84.9722 24.1257C81.9609 24.1257 79.8171 21.9374 79.8171 18.833C79.8171 15.7287 81.9098 13.5403 84.9722 13.5403C87.9833 13.5403 90.0759 15.7287 90.0759 18.833C90.0759 21.9374 87.9833 24.1257 84.9722 24.1257ZM90.0759 13.1332C88.8001 11.6573 86.9625 10.894 84.7679 10.894C80.0722 10.894 76.8058 14.151 76.8058 18.833C76.8058 23.515 80.0722 26.7721 84.7679 26.7721C87.0135 26.7721 88.953 25.9069 90.1781 24.3802V26.5685H93.0873V4.88882H90.0249L90.0759 13.1332ZM102.887 13.5403C105.388 13.5403 107.276 15.2197 107.633 17.6625H98.1913C98.4974 15.2197 100.335 13.5403 102.887 13.5403ZM102.887 10.9958C98.3952 10.9958 95.1799 14.3037 95.1799 18.8839C95.1799 23.515 98.5485 26.7721 103.448 26.7721C106 26.7721 108.093 25.9069 109.522 24.2784L109.573 24.2275L107.889 22.2936L107.786 22.3954C106.715 23.5659 105.286 24.1766 103.499 24.1766C100.641 24.1766 98.5485 22.5481 98.1402 19.9526H110.39V19.8509C110.441 19.5964 110.441 19.2401 110.441 18.9857C110.492 14.2528 107.327 10.9958 102.887 10.9958ZM124.425 21.9883C123.506 23.3623 122.077 24.1257 120.291 24.1257C117.178 24.1257 115.085 21.9883 115.085 18.8839C115.085 15.7795 117.229 13.6421 120.291 13.6421C122.077 13.6421 123.506 14.3546 124.425 15.7795L124.476 15.8813L126.824 14.4055L126.773 14.3037C125.548 12.2172 123.2 10.9958 120.342 10.9958C115.544 10.9958 112.023 14.3037 112.023 18.8839C112.023 23.4641 115.544 26.7721 120.342 26.7721C123.2 26.7721 125.548 25.5507 126.773 23.4132L126.824 23.3114L124.476 21.8865L124.425 21.9883ZM136.011 24.1257C133 24.1257 130.907 21.9374 130.907 18.8839C130.907 15.7795 133 13.6421 136.011 13.6421C139.022 13.6421 141.115 15.7795 141.115 18.8839C141.115 21.9883 139.022 24.1257 136.011 24.1257ZM136.011 10.9958C131.264 10.9958 127.845 14.3037 127.845 18.8839C127.845 23.4641 131.264 26.7721 136.011 26.7721C140.758 26.7721 144.177 23.4641 144.177 18.8839C144.177 14.3037 140.707 10.9958 136.011 10.9958ZM157.039 10.9958L151.833 22.9043L146.729 10.9958H143.616L150.302 26.2123L150.353 26.2631H153.313L159.999 10.9958H157.039ZM16.2354 0.910034C7.28788 0.910034 0 8.1049 0 16.8826V16.9546L2.74197 18.5374H2.81413C4.5459 17.3863 6.63848 16.9546 8.73103 17.3143C10.1742 17.6021 11.5451 18.2496 12.6275 19.2569L13.1326 19.6886L13.4213 19.113C13.7099 18.5374 13.9985 18.0338 14.2871 17.5302C14.4314 17.3143 14.5758 17.1704 14.7201 16.9546L15.0087 16.5948L14.6479 16.307C13.1326 15.0839 11.3287 14.2205 9.38043 13.8608C7.50436 13.501 5.62825 13.573 3.8965 14.1486C5.19533 8.46464 10.2463 4.4355 16.2354 4.4355C19.6268 4.4355 22.8017 5.73059 25.1829 8.1049C26.9147 9.75972 28.0692 11.8462 28.5743 14.1486C27.4919 13.7888 26.3374 13.6449 25.1829 13.6449H24.9664C24.5335 13.6449 24.1005 13.7169 23.5954 13.7169H23.5233C23.379 13.7169 23.1625 13.7888 23.0182 13.7888C22.7295 13.8608 22.513 13.8608 22.2244 13.9327L22.008 14.0047C21.7915 14.0766 21.575 14.1486 21.3585 14.2205H21.2864C20.7813 14.3644 20.3483 14.5803 19.8433 14.7961C19.6268 14.8681 19.4103 15.012 19.1938 15.1559H19.1217C18.0393 15.8034 17.0291 16.5948 16.2354 17.6021L16.1632 17.746C15.9468 18.0338 15.8024 18.2496 15.6581 18.3935C15.5138 18.5374 15.4416 18.7533 15.2973 18.9691L15.2252 19.113C15.0809 19.3289 15.0087 19.5447 14.9366 19.6886V19.7606C14.7201 20.1922 14.5036 20.6959 14.3593 21.1995V21.2715C13.9985 22.4227 13.782 23.6458 13.782 24.9408V25.0848C13.782 25.2286 13.782 25.4445 13.782 25.5884C13.782 25.6603 13.782 25.7323 13.782 25.8042C13.782 25.8762 13.782 26.0201 13.782 26.092V26.164V26.3079C13.782 26.4518 13.8542 26.6676 13.8542 26.8115C14.215 28.5383 15.0087 30.193 16.2354 31.7041L16.3075 31.776L16.3797 31.7041C16.8848 31.1286 18.0393 29.3297 18.1836 28.2505C17.6064 27.1713 17.3177 25.9481 17.3177 24.797C17.3177 20.7678 20.4927 17.3863 24.6056 17.1704H24.8942C26.5539 17.0985 28.2135 17.6021 29.5845 18.5374H29.6566L32.3986 16.9546V16.8826C32.3986 12.6377 30.7391 8.60852 27.6362 5.58671C24.6056 2.56486 20.5648 0.910034 16.2354 0.910034Z" fill="#F01F7A"/>
</g>
</g>
<defs>
<clipPath id="clip0_2_23">
<rect width="160" height="44" fill="white"/>
</clipPath>
<clipPath id="clip1_2_23">
<rect width="160" height="44" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: frontend/public/assets/images/codecov-white.svg
================
<svg width="160" height="44" viewBox="0 0 160 44" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_943_358)">
<mask id="mask0_943_358" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="160" height="44">
<path d="M160 0H0V44H160V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_943_358)">
<mask id="mask1_943_358" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="160" height="44">
<path d="M160 0H0V44H160V0Z" fill="white"/>
</mask>
<g mask="url(#mask1_943_358)">
<path d="M137.239 41.0209L132.798 35.2886H131.692V42.9727H132.814V37.0841L137.38 42.9727H138.361V35.2886H137.239V41.0209Z" fill="white"/>
<path d="M126.058 39.5953H130.037V38.5969H126.056V36.2842H130.546V35.2856H124.912V42.9727H130.603V41.9743H126.056L126.058 39.5953Z" fill="white"/>
<path d="M121.378 38.6211C119.829 38.2481 119.396 37.9534 119.396 37.2377C119.396 36.594 119.964 36.158 120.812 36.158C121.585 36.1805 122.33 36.4492 122.939 36.9248L123.541 36.0737C122.77 35.4694 121.813 35.1506 120.833 35.1714C119.312 35.1714 118.25 36.0737 118.25 37.3579C118.25 38.7413 119.152 39.2195 120.795 39.6195C122.257 39.9564 122.704 40.2691 122.704 40.9699C122.704 41.6706 122.103 42.1037 121.173 42.1037C120.248 42.0995 119.358 41.7499 118.678 41.1232L118.001 41.9323C118.873 42.6815 119.985 43.0924 121.135 43.0902C122.783 43.0902 123.842 42.203 123.842 40.8316C123.833 39.6707 123.147 39.0481 121.378 38.6211Z" fill="white"/>
<path d="M158.707 35.2886L156.394 38.8976L154.097 35.2886H152.755L155.789 39.9352V42.9758H156.945V39.8991L160 35.2886H158.707Z" fill="white"/>
<path d="M139.268 36.3293H141.786V42.9758H142.941V36.3293H145.458V35.2886H139.272L139.268 36.3293Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M150.8 39.9742C151.962 39.6523 152.605 38.8403 152.605 37.6794C152.605 36.2028 151.524 35.2734 149.783 35.2734H146.366V42.9695H147.51V40.2087H149.45L151.399 42.9756H152.734L150.629 40.0223L150.8 39.9742ZM147.507 39.2223V36.305H149.663C150.788 36.305 151.431 36.8373 151.431 37.7606C151.431 38.6839 150.743 39.2223 149.675 39.2223H147.507Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.252 42.9499C101.171 42.9499 101.109 42.9281 101.066 42.8841C101.022 42.833 101 42.7709 101 42.6979V35.5403C101 35.4599 101.022 35.3978 101.066 35.354C101.109 35.3029 101.171 35.2773 101.252 35.2773H104.259C104.808 35.2773 105.253 35.3685 105.597 35.5513C105.948 35.7266 106.204 35.9678 106.365 36.2747C106.533 36.5816 106.618 36.9251 106.618 37.3051C106.618 37.6046 106.566 37.8641 106.464 38.0832C106.369 38.2952 106.249 38.4706 106.102 38.6094C105.956 38.741 105.814 38.8433 105.674 38.9163C105.96 39.0551 106.212 39.2817 106.431 39.5958C106.657 39.91 106.771 40.29 106.771 40.7358C106.771 41.1377 106.68 41.5068 106.497 41.8428C106.315 42.1791 106.04 42.4493 105.674 42.654C105.315 42.8513 104.87 42.9499 104.336 42.9499H101.252ZM102.076 42.0621H104.193C104.668 42.0621 105.034 41.9342 105.29 41.6784C105.546 41.4227 105.674 41.1085 105.674 40.7358C105.674 40.3485 105.546 40.0307 105.29 39.7821C105.034 39.5265 104.668 39.3986 104.193 39.3986H102.076V42.0621ZM102.076 38.5217H104.094C104.562 38.5217 104.917 38.4157 105.158 38.2038C105.4 37.9846 105.521 37.6887 105.521 37.316C105.521 36.9433 105.4 36.6584 105.158 36.461C104.917 36.2638 104.562 36.1651 104.094 36.1651H102.076V38.5217Z" fill="white"/>
<path d="M110.221 42.8841C110.273 42.9281 110.335 42.9499 110.408 42.9499H110.979C111.06 42.9499 111.122 42.9281 111.165 42.8841C111.217 42.833 111.242 42.7709 111.242 42.6979V40.1111L113.876 35.6389C113.89 35.6171 113.901 35.5952 113.907 35.5732C113.915 35.5513 113.919 35.5257 113.919 35.4964C113.919 35.438 113.897 35.3869 113.853 35.343C113.81 35.2992 113.755 35.2773 113.689 35.2773H113.13C113.064 35.2773 113.004 35.2955 112.953 35.332C112.909 35.3613 112.87 35.4052 112.833 35.4636L110.693 39.0149L108.553 35.4636C108.532 35.4052 108.495 35.3613 108.444 35.332C108.392 35.2955 108.334 35.2773 108.269 35.2773H107.698C107.64 35.2773 107.588 35.2992 107.545 35.343C107.5 35.3869 107.479 35.438 107.479 35.4964C107.479 35.5257 107.483 35.5513 107.489 35.5732C107.493 35.584 107.497 35.5948 107.5 35.6055C107.504 35.6167 107.508 35.6278 107.512 35.6389L110.155 40.1111V42.6979C110.155 42.7709 110.178 42.833 110.221 42.8841Z" fill="white"/>
<path d="M51.0821 8.70579C53.3791 8.70579 55.2164 9.46914 56.7476 11.0468L56.8497 11.1485L58.8913 9.16381L58.8403 9.06202C57.0026 7.02636 54.1956 5.90675 50.9803 5.90675C44.6515 5.90675 40.0068 10.2834 40.0068 16.3394C40.0068 22.3955 44.6004 26.7722 50.9292 26.7722C54.1445 26.7722 56.9519 25.6526 58.8403 23.566L58.8913 23.4642L56.8497 21.4795L56.7476 21.5813C55.2164 23.1589 53.328 23.9731 51.0821 23.9731C46.4888 23.9731 43.1714 20.767 43.1714 16.3394C43.1714 11.9119 46.5399 8.70579 51.0821 8.70579ZM67.6189 24.1258C64.6076 24.1258 62.5149 21.9375 62.5149 18.884C62.5149 15.7796 64.6076 13.6422 67.6189 13.6422C70.6302 13.6422 72.7226 15.7796 72.7226 18.884C72.7226 21.9884 70.6302 24.1258 67.6189 24.1258ZM67.6189 10.9959C62.8721 10.9959 59.4525 14.3038 59.4525 18.884C59.4525 23.4642 62.8721 26.7722 67.6189 26.7722C72.3654 26.7722 75.785 23.4642 75.785 18.884C75.785 14.3038 72.3144 10.9959 67.6189 10.9959ZM84.9722 24.1258C81.9609 24.1258 79.8171 21.9375 79.8171 18.8331C79.8171 15.7288 81.9098 13.5404 84.9722 13.5404C87.9833 13.5404 90.0759 15.7288 90.0759 18.8331C90.0759 21.9375 87.9833 24.1258 84.9722 24.1258ZM90.0759 13.1333C88.8001 11.6574 86.9625 10.8941 84.7679 10.8941C80.0722 10.8941 76.8058 14.1511 76.8058 18.8331C76.8058 23.5151 80.0722 26.7722 84.7679 26.7722C87.0135 26.7722 88.953 25.907 90.1781 24.3803V26.5686H93.0873V4.88894H90.0249L90.0759 13.1333ZM102.887 13.5404C105.388 13.5404 107.276 15.2198 107.633 17.6626H98.1913C98.4974 15.2198 100.335 13.5404 102.887 13.5404ZM102.887 10.9959C98.3952 10.9959 95.1799 14.3038 95.1799 18.884C95.1799 23.5151 98.5485 26.7722 103.448 26.7722C106 26.7722 108.093 25.907 109.522 24.2785L109.573 24.2276L107.889 22.2937L107.786 22.3955C106.715 23.566 105.286 24.1767 103.499 24.1767C100.641 24.1767 98.5485 22.5482 98.1402 19.9527H110.39V19.851C110.441 19.5965 110.441 19.2402 110.441 18.9858C110.492 14.2529 107.327 10.9959 102.887 10.9959ZM124.425 21.9884C123.506 23.3624 122.077 24.1258 120.291 24.1258C117.178 24.1258 115.085 21.9884 115.085 18.884C115.085 15.7796 117.229 13.6422 120.291 13.6422C122.077 13.6422 123.506 14.3547 124.425 15.7796L124.476 15.8814L126.824 14.4056L126.773 14.3038C125.548 12.2173 123.2 10.9959 120.342 10.9959C115.544 10.9959 112.023 14.3038 112.023 18.884C112.023 23.4642 115.544 26.7722 120.342 26.7722C123.2 26.7722 125.548 25.5508 126.773 23.4133L126.824 23.3115L124.476 21.8866L124.425 21.9884ZM136.011 24.1258C133 24.1258 130.907 21.9375 130.907 18.884C130.907 15.7796 133 13.6422 136.011 13.6422C139.022 13.6422 141.115 15.7796 141.115 18.884C141.115 21.9884 139.022 24.1258 136.011 24.1258ZM136.011 10.9959C131.264 10.9959 127.845 14.3038 127.845 18.884C127.845 23.4642 131.264 26.7722 136.011 26.7722C140.758 26.7722 144.177 23.4642 144.177 18.884C144.177 14.3038 140.707 10.9959 136.011 10.9959ZM157.039 10.9959L151.833 22.9044L146.729 10.9959H143.616L150.302 26.2124L150.353 26.2632H153.313L159.999 10.9959H157.039ZM16.2354 0.910156C7.28788 0.910156 0 8.10502 0 16.8827V16.9547L2.74197 18.5375H2.81413C4.5459 17.3864 6.63848 16.9547 8.73103 17.3144C10.1742 17.6022 11.5451 18.2497 12.6275 19.257L13.1326 19.6887L13.4213 19.1131C13.7099 18.5375 13.9985 18.0339 14.2871 17.5303C14.4314 17.3144 14.5758 17.1705 14.7201 16.9547L15.0087 16.5949L14.6479 16.3071C13.1326 15.084 11.3287 14.2206 9.38043 13.8609C7.50436 13.5011 5.62825 13.5731 3.8965 14.1487C5.19533 8.46476 10.2463 4.43562 16.2354 4.43562C19.6268 4.43562 22.8017 5.73071 25.1829 8.10502C26.9147 9.75984 28.0692 11.8463 28.5743 14.1487C27.4919 13.7889 26.3374 13.645 25.1829 13.645H24.9664C24.5335 13.645 24.1005 13.717 23.5954 13.717H23.5233C23.379 13.717 23.1625 13.7889 23.0182 13.7889C22.7295 13.8609 22.513 13.8609 22.2244 13.9328L22.008 14.0048C21.7915 14.0767 21.575 14.1487 21.3585 14.2206H21.2864C20.7813 14.3645 20.3483 14.5804 19.8433 14.7962C19.6268 14.8682 19.4103 15.0121 19.1938 15.156H19.1217C18.0393 15.8035 17.0291 16.5949 16.2354 17.6022L16.1632 17.7461C15.9468 18.0339 15.8024 18.2497 15.6581 18.3936C15.5138 18.5375 15.4416 18.7534 15.2973 18.9692L15.2252 19.1131C15.0809 19.329 15.0087 19.5448 14.9366 19.6887V19.7607C14.7201 20.1923 14.5036 20.696 14.3593 21.1996V21.2716C13.9985 22.4228 13.782 23.6459 13.782 24.9409V25.0849C13.782 25.2287 13.782 25.4446 13.782 25.5885C13.782 25.6604 13.782 25.7324 13.782 25.8043C13.782 25.8763 13.782 26.0202 13.782 26.0921V26.1641V26.308C13.782 26.4519 13.8542 26.6677 13.8542 26.8116C14.215 28.5384 15.0087 30.1931 16.2354 31.7042L16.3075 31.7761L16.3797 31.7042C16.8848 31.1287 18.0393 29.3298 18.1836 28.2506C17.6064 27.1714 17.3177 25.9482 17.3177 24.7971C17.3177 20.7679 20.4927 17.3864 24.6056 17.1705H24.8942C26.5539 17.0986 28.2135 17.6022 29.5845 18.5375H29.6566L32.3986 16.9547V16.8827C32.3986 12.6378 30.7391 8.60864 27.6362 5.58683C24.6056 2.56498 20.5648 0.910156 16.2354 0.910156Z" fill="white"/>
</g>
</g>
</g>
<defs>
<clipPath id="clip0_943_358">
<rect width="160" height="44" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: frontend/src/app/[locale]/(auth)/(center)/sign-in/[[...sign-in]]/page.tsx
================
import { SignIn } from '@clerk/nextjs';
import { getTranslations } from 'next-intl/server';

import { getI18nPath } from '@/utils/Helpers';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'SignIn',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const SignInPage = (props: { params: { locale: string } }) => (
  <SignIn path={getI18nPath('/sign-in', props.params.locale)} />
);

export default SignInPage;

================
File: frontend/src/app/[locale]/(auth)/(center)/sign-up/[[...sign-up]]/page.tsx
================
import { SignUp } from '@clerk/nextjs';
import { getTranslations } from 'next-intl/server';

import { getI18nPath } from '@/utils/Helpers';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'SignUp',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const SignUpPage = (props: { params: { locale: string } }) => (
  <SignUp path={getI18nPath('/sign-up', props.params.locale)} />
);

export default SignUpPage;

================
File: frontend/src/app/[locale]/(auth)/(center)/layout.tsx
================
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';

export default function CenteredLayout(props: { children: React.ReactNode }) {
  const { userId } = auth();

  if (userId) {
    redirect('/dashboard');
  }

  return (
    <div className="flex min-h-screen items-center justify-center">
      {props.children}
    </div>
  );
}

================
File: frontend/src/app/[locale]/(auth)/dashboard/user-profile/[[...user-profile]]/page.tsx
================
import { UserProfile } from '@clerk/nextjs';
import { getTranslations } from 'next-intl/server';

import { getI18nPath } from '@/utils/Helpers';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'UserProfile',
  });

  return {
    title: t('meta_title'),
  };
}

const UserProfilePage = (props: { params: { locale: string } }) => (
  <div className="my-6 -ml-16">
    <UserProfile
      path={getI18nPath('/dashboard/user-profile', props.params.locale)}
    />
  </div>
);

export default UserProfilePage;

================
File: frontend/src/app/[locale]/(auth)/dashboard/layout.tsx
================
import { SignOutButton } from '@clerk/nextjs';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

import { LocaleSwitcher } from '@/components/LocaleSwitcher';
import { BaseTemplate } from '@/templates/BaseTemplate';

export default function DashboardLayout(props: { children: React.ReactNode }) {
  const t = useTranslations('DashboardLayout');

  return (
    <BaseTemplate
      leftNav={(
        <>
          <li>
            <Link
              href="/dashboard/"
              className="border-none text-gray-700 hover:text-gray-900"
            >
              {t('dashboard_link')}
            </Link>
          </li>
          <li>
            <Link
              href="/dashboard/user-profile/"
              className="border-none text-gray-700 hover:text-gray-900"
            >
              {t('user_profile_link')}
            </Link>
          </li>
        </>
      )}
      rightNav={(
        <>
          <li>
            <SignOutButton>
              <button className="border-none text-gray-700 hover:text-gray-900" type="button">
                {t('sign_out')}
              </button>
            </SignOutButton>
          </li>

          <li>
            <LocaleSwitcher />
          </li>
        </>
      )}
    >
      {props.children}
    </BaseTemplate>
  );
}

export const dynamic = 'force-dynamic';

================
File: frontend/src/app/[locale]/(auth)/dashboard/page.tsx
================
import { getTranslations } from 'next-intl/server';

import { Hello } from '@/components/Hello';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'Dashboard',
  });

  return {
    title: t('meta_title'),
  };
}

const Dashboard = () => (
  <div className="[&_p]:my-6">
    <Hello />
  </div>
);

export default Dashboard;

================
File: frontend/src/app/[locale]/(auth)/layout.tsx
================
import { enUS, frFR } from '@clerk/localizations';
import { ClerkProvider } from '@clerk/nextjs';

import { AppConfig } from '@/utils/AppConfig';

export default function AuthLayout(props: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  let clerkLocale = enUS;
  let signInUrl = '/sign-in';
  let signUpUrl = '/sign-up';
  let dashboardUrl = '/dashboard';
  let afterSignOutUrl = '/';

  if (props.params.locale === 'fr') {
    clerkLocale = frFR;
  }

  if (props.params.locale !== AppConfig.defaultLocale) {
    signInUrl = `/${props.params.locale}${signInUrl}`;
    signUpUrl = `/${props.params.locale}${signUpUrl}`;
    dashboardUrl = `/${props.params.locale}${dashboardUrl}`;
    afterSignOutUrl = `/${props.params.locale}${afterSignOutUrl}`;
  }

  return (
    <ClerkProvider
      localization={clerkLocale}
      signInUrl={signInUrl}
      signUpUrl={signUpUrl}
      signInFallbackRedirectUrl={dashboardUrl}
      signUpFallbackRedirectUrl={dashboardUrl}
      afterSignOutUrl={afterSignOutUrl}
    >
      {props.children}
    </ClerkProvider>
  );
}

================
File: frontend/src/app/[locale]/(unauth)/about/page.tsx
================
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { getTranslations, unstable_setRequestLocale } from 'next-intl/server';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'About',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const About = (props: { params: { locale: string } }) => {
  unstable_setRequestLocale(props.params.locale);
  const t = useTranslations('About');

  return (
    <>
      <p>{t('about_paragraph')}</p>

      <div className="mt-2 text-center text-sm">
        {`${t('translation_powered_by')} `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://l.crowdin.com/next-js"
        >
          Crowdin
        </a>
      </div>

      <a href="https://l.crowdin.com/next-js">
        <Image
          className="mx-auto mt-2"
          src="/assets/images/crowdin-dark.png"
          alt="Crowdin Translation Management System"
          width={130}
          height={112}
        />
      </a>
    </>
  );
};

export default About;

================
File: frontend/src/app/[locale]/(unauth)/api/counter/route.ts
================
import { sql } from 'drizzle-orm';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';

import { db } from '@/libs/DB';
import { logger } from '@/libs/Logger';
import { counterSchema } from '@/models/Schema';
import {
  CounterValidation,
} from '@/validations/CounterValidation';

export const PUT = async (request: Request) => {
  const json = await request.json();
  const parse = CounterValidation.safeParse(json);

  if (!parse.success) {
    return NextResponse.json(parse.error.format(), { status: 422 });
  }

  // `x-e2e-random-id` is used for end-to-end testing to make isolated requests
  // The default value is 0 when there is no `x-e2e-random-id` header
  const id = Number(headers().get('x-e2e-random-id')) ?? 0;

  const count = await db
    .insert(counterSchema)
    .values({ id, count: parse.data.increment })
    .onConflictDoUpdate({
      target: counterSchema.id,
      set: { count: sql`${counterSchema.count} + ${parse.data.increment}` },
    }).returning();

  logger.info('Counter has been incremented');

  return NextResponse.json({
    count: count[0]?.count,
  });
};

================
File: frontend/src/app/[locale]/(unauth)/counter/page.tsx
================
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { getTranslations } from 'next-intl/server';
import { Suspense } from 'react';

import { CounterForm } from '@/components/CounterForm';
import { CurrentCount } from '@/components/CurrentCount';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'Counter',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const Counter = () => {
  const t = useTranslations('Counter');

  return (
    <>
      <CounterForm />

      <div className="mt-3">
        <Suspense fallback={<p>{t('loading_counter')}</p>}>
          <CurrentCount />
        </Suspense>
      </div>

      <div className="mt-5 text-center text-sm">
        {`${t('error_reporting_powered_by')} `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
        >
          Sentry
        </a>
      </div>

      <a
        href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
      >
        <Image
          className="mx-auto mt-2"
          src="/assets/images/sentry-dark.png"
          alt="Sentry"
          width={130}
          height={112}
        />
      </a>
    </>
  );
};

export const dynamic = 'force-dynamic';

export default Counter;

================
File: frontend/src/app/[locale]/(unauth)/portfolio/[slug]/page.tsx
================
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { getTranslations, unstable_setRequestLocale } from 'next-intl/server';

import { AppConfig } from '@/utils/AppConfig';

type IPortfolioDetailProps = {
  params: { slug: string; locale: string };
};

export function generateStaticParams() {
  return AppConfig.locales
    .map(locale =>
      Array.from(Array(6).keys()).map(elt => ({
        slug: `${elt}`,
        locale,
      })),
    )
    .flat(1);
}

export async function generateMetadata(props: IPortfolioDetailProps) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'PortfolioSlug',
  });

  return {
    title: t('meta_title', { slug: props.params.slug }),
    description: t('meta_description', { slug: props.params.slug }),
  };
}

const PortfolioDetail = (props: IPortfolioDetailProps) => {
  unstable_setRequestLocale(props.params.locale);
  const t = useTranslations('PortfolioSlug');

  return (
    <>
      <h1 className="capitalize">{t('header', { slug: props.params.slug })}</h1>
      <p>{t('content')}</p>

      <div className="mt-5 text-center text-sm">
        {`${t('log_management_powered_by')} `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate"
        >
          Better Stack
        </a>
      </div>

      <a
        href="https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate"
      >
        <Image
          className="mx-auto mt-2"
          src="/assets/images/better-stack-dark.png"
          alt="Better Stack"
          width={130}
          height={112}
        />
      </a>
    </>
  );
};

export const dynamicParams = false;

export default PortfolioDetail;

================
File: frontend/src/app/[locale]/(unauth)/portfolio/page.tsx
================
import Image from 'next/image';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { getTranslations, unstable_setRequestLocale } from 'next-intl/server';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'Portfolio',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const Portfolio = (props: { params: { locale: string } }) => {
  unstable_setRequestLocale(props.params.locale);
  const t = useTranslations('Portfolio');

  return (
    <>
      <p>{t('presentation')}</p>

      <div className="grid grid-cols-1 justify-items-start gap-3 md:grid-cols-2 xl:grid-cols-3">
        {Array.from(Array(6).keys()).map(elt => (
          <Link
            className="hover:text-blue-700"
            key={elt}
            href={`/portfolio/${elt}`}
          >
            {t('portfolio_name', { name: elt })}
          </Link>
        ))}
      </div>

      <div className="mt-5 text-center text-sm">
        {`${t('error_reporting_powered_by')} `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
        >
          Sentry
        </a>
        {` - ${t('coverage_powered_by')} `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://about.codecov.io/codecov-free-trial/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
        >
          Codecov
        </a>
      </div>

      <a
        href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
      >
        <Image
          className="mx-auto mt-2"
          src="/assets/images/sentry-dark.png"
          alt="Sentry"
          width={130}
          height={112}
        />
      </a>
    </>
  );
};

export default Portfolio;

================
File: frontend/src/app/[locale]/(unauth)/layout.tsx
================
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { unstable_setRequestLocale } from 'next-intl/server';

import { DemoBanner } from '@/components/DemoBanner';
import { LocaleSwitcher } from '@/components/LocaleSwitcher';
import { BaseTemplate } from '@/templates/BaseTemplate';

export default function Layout(props: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  unstable_setRequestLocale(props.params.locale);
  const t = useTranslations('RootLayout');

  return (
    <>
      <DemoBanner />
      <BaseTemplate
        leftNav={(
          <>
            <li>
              <Link
                href="/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('home_link')}
              </Link>
            </li>
            <li>
              <Link
                href="/about/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('about_link')}
              </Link>
            </li>
            <li>
              <Link
                href="/counter/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('counter_link')}
              </Link>
            </li>
            <li>
              <Link
                href="/portfolio/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('portfolio_link')}
              </Link>
            </li>
            <li>
              <a
                className="border-none text-gray-700 hover:text-gray-900"
                href="https://github.com/ixartz/Next-js-Boilerplate"
              >
                GitHub
              </a>
            </li>
          </>
        )}
        rightNav={(
          <>
            <li>
              <Link
                href="/sign-in/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('sign_in_link')}
              </Link>
            </li>

            <li>
              <Link
                href="/sign-up/"
                className="border-none text-gray-700 hover:text-gray-900"
              >
                {t('sign_up_link')}
              </Link>
            </li>

            <li>
              <LocaleSwitcher />
            </li>
          </>
        )}
      >
        <div className="py-5 text-xl [&_p]:my-6">{props.children}</div>
      </BaseTemplate>
    </>
  );
}

================
File: frontend/src/app/[locale]/(unauth)/page.tsx
================
import { useTranslations } from 'next-intl';
import { getTranslations, unstable_setRequestLocale } from 'next-intl/server';

import { Sponsors } from '@/components/Sponsors';

export async function generateMetadata(props: { params: { locale: string } }) {
  const t = await getTranslations({
    locale: props.params.locale,
    namespace: 'Index',
  });

  return {
    title: t('meta_title'),
    description: t('meta_description'),
  };
}

const Index = (props: { params: { locale: string } }) => {
  unstable_setRequestLocale(props.params.locale);
  const t = useTranslations('Index');

  return (
    <>
      <p>
        {`Follow `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://twitter.com/ixartz"
          target="_blank"
          rel="noreferrer noopener"
        >
          @Ixartz on Twitter
        </a>
        {` for updates and more information about the boilerplate.`}
      </p>
      <h2 className="mt-5 text-2xl font-bold">
        Boilerplate Code for Your Next.js Project with Tailwind CSS
      </h2>
      <p className="text-base">
        Next.js Boilerplate is a developer-friendly starter code for Next.js projects, built with Tailwind CSS and TypeScript.
        {' '}
        <span role="img" aria-label="zap">
          ⚡️
        </span>
        {' '}
        Designed with developer experience in mind, it includes:
      </p>
      <ul className="mt-3 text-base">
        <li>🚀 Next.js with App Router support</li>
        <li>🔥 TypeScript for type checking</li>
        <li>💎 Tailwind CSS integration</li>
        <li>
          🔒 Authentication with
          {' '}
          <a
            className="font-bold text-blue-700 hover:border-b-2 hover:border-blue-700"
            href="https://clerk.com?utm_source=github&amp;utm_medium=sponsorship&amp;utm_campaign=nextjs-boilerplate"
          >
            Clerk
          </a>
          {' '}
          (includes passwordless, social, and multi-factor auth)
        </li>
        <li>📦 ORM with DrizzleORM (PostgreSQL, SQLite, MySQL support)</li>
        <li>
          🌐 Multi-language support (i18n) with next-intl and
          {' '}
          <a
            className="font-bold text-blue-700 hover:border-b-2 hover:border-blue-700"
            href="https://l.crowdin.com/next-js"
          >
            Crowdin
          </a>
        </li>
        <li>🔴 Form handling (React Hook Form) and validation (Zod)</li>
        <li>📏 Linting and formatting (ESLint, Prettier)</li>
        <li>🦊 Git hooks and commit linting (Husky, Commitlint)</li>
        <li>🦺 Testing suite (Vitest, React Testing Library, Playwright)</li>
        <li>🎉 Storybook for UI development</li>
        <li>
          🚨 Error monitoring (
          <a
            className="font-bold text-blue-700 hover:border-b-2 hover:border-blue-700"
            href="https://sentry.io/for/nextjs/?utm_source=github&amp;utm_medium=paid-community&amp;utm_campaign=general-fy25q1-nextjs&amp;utm_content=github-banner-nextjsboilerplate-logo"
          >
            Sentry
          </a>
          ) and logging (Pino.js)
        </li>
        <li>🖥️ Monitoring as Code (Checkly)</li>
        <li>🤖 SEO optimization (metadata, JSON-LD, Open Graph tags)</li>
        <li>⚙️ Development tools (VSCode config, bundler analyzer, changelog generation)</li>
      </ul>
      <p className="text-base">
        Our sponsors&apos; exceptional support has made this project possible.
        Their services integrate seamlessly with the boilerplate, and we
        recommend trying them out.
      </p>
      <h2 className="mt-5 text-2xl font-bold">{t('sponsors_title')}</h2>
      <Sponsors />
    </>
  );
};

export default Index;

================
File: frontend/src/app/[locale]/layout.tsx
================
import '@/styles/global.css';

import type { Metadata } from 'next';
import { NextIntlClientProvider, useMessages } from 'next-intl';
import { unstable_setRequestLocale } from 'next-intl/server';

import { DemoBadge } from '@/components/DemoBadge';
import { AppConfig } from '@/utils/AppConfig';

export const metadata: Metadata = {
  icons: [
    {
      rel: 'apple-touch-icon',
      url: '/apple-touch-icon.png',
    },
    {
      rel: 'icon',
      type: 'image/png',
      sizes: '32x32',
      url: '/favicon-32x32.png',
    },
    {
      rel: 'icon',
      type: 'image/png',
      sizes: '16x16',
      url: '/favicon-16x16.png',
    },
    {
      rel: 'icon',
      url: '/favicon.ico',
    },
  ],
};

export function generateStaticParams() {
  return AppConfig.locales.map(locale => ({ locale }));
}

export default function RootLayout(props: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  unstable_setRequestLocale(props.params.locale);

  // Using internationalization in Client Components
  const messages = useMessages();

  // The `suppressHydrationWarning` attribute in <body> is used to prevent hydration errors caused by Sentry Overlay,
  // which dynamically adds a `style` attribute to the body tag.

  return (
    <html lang={props.params.locale}>
      <body suppressHydrationWarning>
        <NextIntlClientProvider
          locale={props.params.locale}
          messages={messages}
        >
          {props.children}

          <DemoBadge />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

================
File: frontend/src/app/global-error.tsx
================
'use client';

import * as Sentry from '@sentry/nextjs';
import NextError from 'next/error';
import { useEffect } from 'react';

export default function GlobalError(props: {
  error: Error & { digest?: string };
  params: { locale: string };
}) {
  useEffect(() => {
    Sentry.captureException(props.error);
  }, [props.error]);

  return (
    <html lang={props.params.locale}>
      <body>
        {/* `NextError` is the default Next.js error page component. Its type
        definition requires a `statusCode` prop. However, since the App Router
        does not expose status codes for errors, we simply pass 0 to render a
        generic error message. */}
        <NextError statusCode={0} />
      </body>
    </html>
  );
}

================
File: frontend/src/app/robots.ts
================
import type { MetadataRoute } from 'next';

import { getBaseUrl } from '@/utils/Helpers';

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
    },
    sitemap: `${getBaseUrl()}/sitemap.xml`,
  };
}

================
File: frontend/src/app/sitemap.ts
================
import type { MetadataRoute } from 'next';

import { getBaseUrl } from '@/utils/Helpers';

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: `${getBaseUrl()}/`,
      lastModified: new Date(),
      changeFrequency: 'daily',
      priority: 0.7,
    },
    // Add more URLs here
  ];
}

================
File: frontend/src/components/CounterForm.tsx
================
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { useForm } from 'react-hook-form';
import type { z } from 'zod';

import { CounterValidation } from '@/validations/CounterValidation';

export const CounterForm = () => {
  const t = useTranslations('CounterForm');
  const form = useForm<z.infer<typeof CounterValidation>>({
    resolver: zodResolver(CounterValidation),
    defaultValues: {
      increment: 0,
    },
  });
  const router = useRouter();

  const handleIncrement = form.handleSubmit(async (data) => {
    await fetch(`/api/counter`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    form.reset();
    router.refresh();
  });

  return (
    <form onSubmit={handleIncrement}>
      <p>{t('presentation')}</p>
      <div>
        <label className="text-sm font-bold text-gray-700" htmlFor="increment">
          {t('label_increment')}
          <input
            id="increment"
            type="number"
            className="ml-2 w-32 appearance-none rounded border px-2 py-1 text-sm leading-tight text-gray-700 focus:outline-none focus:ring focus:ring-blue-300/50"
            {...form.register('increment')}
          />
        </label>

        {form.formState.errors.increment?.message && (
          <div className="my-2 text-xs italic text-red-500">{form.formState.errors.increment?.message}</div>
        )}
      </div>

      <div className="mt-2">
        <button
          className="rounded bg-blue-500 px-5 py-1 font-bold text-white hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300/50 disabled:pointer-events-none disabled:opacity-50"
          type="submit"
          disabled={form.formState.isSubmitting}
        >
          {t('button_increment')}
        </button>
      </div>
    </form>
  );
};

================
File: frontend/src/components/CurrentCount.tsx
================
import { eq } from 'drizzle-orm';
import { headers } from 'next/headers';
import { getTranslations } from 'next-intl/server';

import { db } from '@/libs/DB';
import { logger } from '@/libs/Logger';
import { counterSchema } from '@/models/Schema';

export const CurrentCount = async () => {
  const t = await getTranslations('CurrentCount');

  // `x-e2e-random-id` is used for end-to-end testing to make isolated requests
  // The default value is 0 when there is no `x-e2e-random-id` header
  const id = Number(headers().get('x-e2e-random-id')) ?? 0;
  const result = await db.query.counterSchema.findMany({
    where: eq(counterSchema.id, id),
  });
  const count = result[0]?.count ?? 0;

  logger.info('Counter fetched successfully');

  return (
    <div>
      {t('count', { count })}
    </div>
  );
};

================
File: frontend/src/components/DemoBadge.tsx
================
export const DemoBadge = () => (
  <div className="fixed bottom-0 right-20 z-10">
    <a
      href="https://github.com/ixartz/Next-js-Boilerplate"
    >
      <div className="rounded-md bg-gray-900 px-3 py-2 font-semibold text-gray-100">
        <span className="text-gray-500">Demo of</span>
        {` Next.js Boilerplate`}
      </div>
    </a>
  </div>
);

================
File: frontend/src/components/DemoBanner.tsx
================
import Link from 'next/link';

export const DemoBanner = () => (
  <div className="sticky top-0 z-50 bg-gray-900 p-4 text-center text-lg font-semibold text-gray-100 [&_a:hover]:text-indigo-500 [&_a]:text-fuchsia-500">
    Live Demo of Next.js Boilerplate -
    {' '}
    <Link href="/sign-up">Explore the Authentication</Link>
  </div>
);

================
File: frontend/src/components/Hello.tsx
================
import { currentUser } from '@clerk/nextjs/server';
import { getTranslations } from 'next-intl/server';

export const Hello = async () => {
  const t = await getTranslations('Dashboard');
  const user = await currentUser();

  return (
    <>
      <p>
        {`👋 `}
        {t('hello_message', { email: user?.emailAddresses[0]?.emailAddress })}
      </p>
      <p>
        {`Looking for a SaaS Boilerplate? `}
        <a
          className="text-blue-700 hover:border-b-2 hover:border-blue-700"
          href="https://nextjs-boilerplate.com/pro-saas-starter-kit"
        >
          Next.js Boilerplate SaaS
        </a>
        {` can help you build one.`}
      </p>
    </>
  );
};

================
File: frontend/src/components/LocaleSwitcher.tsx
================
'use client';

import { useLocale } from 'next-intl';
import type { ChangeEventHandler } from 'react';

import { usePathname, useRouter } from '@/libs/i18nNavigation';
import { AppConfig } from '@/utils/AppConfig';

export const LocaleSwitcher = () => {
  const router = useRouter();
  const pathname = usePathname();
  const locale = useLocale();

  const handleChange: ChangeEventHandler<HTMLSelectElement> = (event) => {
    router.push(pathname, { locale: event.target.value });
    router.refresh();
  };

  return (
    <select
      defaultValue={locale}
      onChange={handleChange}
      className="border border-gray-300 font-medium focus:outline-none focus-visible:ring"
      aria-label="lang-switcher"
    >
      {AppConfig.locales.map(elt => (
        <option key={elt} value={elt}>
          {elt.toUpperCase()}
        </option>
      ))}
    </select>
  );
};

================
File: frontend/src/components/Sponsors.tsx
================
/* eslint-disable react-dom/no-unsafe-target-blank */
import Image from 'next/image';

export const Sponsors = () => (
  <table className="border-collapse">
    <tbody>
      <tr className="h-56">
        <td className="border-2 border-gray-300 p-3">
          <a
            href="https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate"
            target="_blank"
            rel="noopener"
          >
            <Image
              src="/assets/images/clerk-logo-dark.png"
              alt="Clerk – Authentication & User Management for Next.js"
              width={260}
              height={224}
            />
          </a>
        </td>
        <td className="border-2 border-gray-300 p-3">
          <a href="https://l.crowdin.com/next-js" target="_blank" rel="noopener">
            <Image
              src="/assets/images/crowdin-dark.png"
              alt="Crowdin"
              width={260}
              height={224}
            />
          </a>
        </td>
        <td className="border-2 border-gray-300 p-3">
          <a
            href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo"
            target="_blank"
            rel="noopener"
          >
            <Image
              src="/assets/images/sentry-dark.png"
              alt="Sentry"
              width={260}
              height={224}
            />
          </a>
        </td>
      </tr>
      <tr className="h-56">
        <td className="border-2 border-gray-300 p-3">
          <a
            href="https://posthog.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate"
            target="_blank"
            rel="noopener"
          >
            <Image
              src="https://posthog.com/brand/posthog-logo.svg"
              alt="PostHog"
              width={260}
              height={224}
            />
          </a>
        </td>
        <td className="border-2 border-gray-300 p-3">
          <a
            href="https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate"
            target="_blank"
            rel="noopener"
          >
            <Image
              src="/assets/images/better-stack-dark.png"
              alt="Better Stack"
              width={260}
              height={224}
            />
          </a>
        </td>
        <td className="border-2 border-gray-300 p-3">
          <a
            href="https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate"
            target="_blank"
            rel="noopener"
          >
            <Image
              src="/assets/images/checkly-logo-light.png"
              alt="Checkly"
              width={260}
              height={224}
            />
          </a>
        </td>
      </tr>
      <tr className="h-56">
        <td className="border-2 border-gray-300 p-3">
          <a href="https://nextjs-boilerplate.com/pro-saas-starter-kit">
            <Image
              src="/assets/images/nextjs-boilerplate-saas.png"
              alt="Next.js SaaS Boilerplate"
              width={260}
              height={224}
            />
          </a>
        </td>
      </tr>
    </tbody>
  </table>
);

================
File: frontend/src/libs/DB.ts
================
import path from 'node:path';

import { PGlite } from '@electric-sql/pglite';
import { drizzle as drizzlePg } from 'drizzle-orm/node-postgres';
import { migrate as migratePg } from 'drizzle-orm/node-postgres/migrator';
import { drizzle as drizzlePglite, type PgliteDatabase } from 'drizzle-orm/pglite';
import { migrate as migratePglite } from 'drizzle-orm/pglite/migrator';
import { PHASE_PRODUCTION_BUILD } from 'next/dist/shared/lib/constants';
import { Client } from 'pg';

import * as schema from '@/models/Schema';

import { Env } from './Env';

let client;
let drizzle;

if (process.env.NEXT_PHASE !== PHASE_PRODUCTION_BUILD && Env.DATABASE_URL) {
  client = new Client({
    connectionString: Env.DATABASE_URL,
  });
  await client.connect();

  drizzle = drizzlePg(client, { schema });
  await migratePg(drizzle, {
    migrationsFolder: path.join(process.cwd(), 'migrations'),
  });
} else {
  const global = globalThis as unknown as { client: PGlite; drizzle: PgliteDatabase<typeof schema> };

  if (!global.client) {
    global.client = new PGlite();
    await global.client.waitReady;

    global.drizzle = drizzlePglite(global.client, { schema });
  }

  drizzle = global.drizzle;
  await migratePglite(global.drizzle, {
    migrationsFolder: path.join(process.cwd(), 'migrations'),
  });
}

export const db = drizzle;

================
File: frontend/src/libs/Env.ts
================
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';

// Don't add NODE_ENV into T3 Env, it changes the tree-shaking behavior
export const Env = createEnv({
  server: {
    CLERK_SECRET_KEY: z.string().min(1),
    DATABASE_URL: z.string().optional(),
    LOGTAIL_SOURCE_TOKEN: z.string().optional(),
  },
  client: {
    NEXT_PUBLIC_APP_URL: z.string().optional(),
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),
    NEXT_PUBLIC_CLERK_SIGN_IN_URL: z.string().min(1),
  },
  shared: {
    NODE_ENV: z.enum(['test', 'development', 'production']).optional(),
  },
  // You need to destructure all the keys manually
  runtimeEnv: {
    CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,
    DATABASE_URL: process.env.DATABASE_URL,
    LOGTAIL_SOURCE_TOKEN: process.env.LOGTAIL_SOURCE_TOKEN,
    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:
      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
    NEXT_PUBLIC_CLERK_SIGN_IN_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL,
    NODE_ENV: process.env.NODE_ENV,
  },
});

================
File: frontend/src/libs/i18n.ts
================
import { notFound } from 'next/navigation';
import { getRequestConfig } from 'next-intl/server';

import { AppConfig } from '@/utils/AppConfig';

// NextJS Boilerplate uses Crowdin as the localization software.
// As a developer, you only need to take care of the English (or another default language) version.
// Other languages are automatically generated and handled by Crowdin.

// The localisation files are synced with Crowdin using GitHub Actions.
// By default, there are 3 ways to sync the message files:
// 1. Automatically sync on push to the `main` branch
// 2. Run manually the workflow on GitHub Actions
// 3. Every 24 hours at 5am, the workflow will run automatically

// Using internationalization in Server Components
export default getRequestConfig(async ({ locale }) => {
  // Validate that the incoming `locale` parameter is valid
  if (!AppConfig.locales.includes(locale)) {
    notFound();
  }

  return {
    messages: (await import(`../locales/${locale}.json`)).default,
  };
});

================
File: frontend/src/libs/i18nNavigation.ts
================
import { createSharedPathnamesNavigation } from 'next-intl/navigation';

import { AppConfig } from '@/utils/AppConfig';

export const { usePathname, useRouter } = createSharedPathnamesNavigation({
  locales: AppConfig.locales,
  localePrefix: AppConfig.localePrefix,
});

================
File: frontend/src/libs/Logger.ts
================
import logtail from '@logtail/pino';
import pino, { type DestinationStream } from 'pino';
import pretty from 'pino-pretty';

import { Env } from './Env';

let stream: DestinationStream;

if (Env.LOGTAIL_SOURCE_TOKEN) {
  stream = pino.multistream([
    await logtail({
      sourceToken: Env.LOGTAIL_SOURCE_TOKEN,
      options: {
        sendLogsToBetterStack: true,
      },
    }),
    {
      stream: pretty(), // Prints logs to the console
    },
  ]);
} else {
  stream = pretty({
    colorize: true,
  });
}

export const logger = pino({ base: undefined }, stream);

================
File: frontend/src/locales/en.json
================
{
  "RootLayout": {
    "home_link": "Home",
    "about_link": "About",
    "counter_link": "Counter",
    "portfolio_link": "Portfolio",
    "sign_in_link": "Sign in",
    "sign_up_link": "Sign up"
  },
  "BaseTemplate": {
    "description": "Starter code for your Nextjs Boilerplate with Tailwind CSS",
    "made_with": "Made with <author></author>."
  },
  "Index": {
    "meta_title": "Next.js Boilerplate Presentation",
    "meta_description": "Next js Boilerplate is the perfect starter code for your project. Build your React application with the Next.js framework.",
    "sponsors_title": "Sponsors"
  },
  "Counter": {
    "meta_title": "Counter",
    "meta_description": "An example of DB operation",
    "loading_counter": "Loading counter...",
    "error_reporting_powered_by": "Error reporting powered by"
  },
  "CounterForm": {
    "presentation": "The counter is stored in the database and incremented by the value you provide.",
    "label_increment": "Increment by",
    "button_increment": "Increment"
  },
  "CurrentCount": {
    "count": "Count: {count}"
  },
  "About": {
    "meta_title": "About",
    "meta_description": "About page description",
    "about_paragraph": "Welcome to our About page! We are a team of passionate individuals dedicated to creating amazing software.",
    "translation_powered_by": "Translation powered by"
  },
  "Portfolio": {
    "meta_title": "Portfolio",
    "meta_description": "Welcome to my portfolio page!",
    "presentation": "Welcome to my portfolio page! Here you will find a carefully curated collection of my work and accomplishments. Through this portfolio, I'm to showcase my expertise, creativity, and the value I can bring to your projects.",
    "portfolio_name": "Portfolio {name}",
    "error_reporting_powered_by": "Error reporting powered by",
    "coverage_powered_by": "Code coverage powered by"
  },
  "PortfolioSlug": {
    "meta_title": "Portfolio {slug}",
    "meta_description": "Portfolio {slug} description",
    "header": "Portfolio {slug}",
    "content": "Created a set of promotional materials and branding elements for a corporate event. Crafted a visually unified theme, encompassing a logo, posters, banners, and digital assets. Integrated the client's brand identity while infusing it with a contemporary and innovative approach. Garnered favorable responses from event attendees, resulting in a successful event with heightened participant engagement and increased brand visibility.",
    "log_management_powered_by": "Log management powered by"
  },
  "SignIn": {
    "meta_title": "Sign in",
    "meta_description": "Seamlessly sign in to your account with our user-friendly login process."
  },
  "SignUp": {
    "meta_title": "Sign up",
    "meta_description": "Effortlessly create an account through our intuitive sign-up process."
  },
  "Dashboard": {
    "meta_title": "Dashboard",
    "hello_message": "Hello {email}!"
  },
  "UserProfile": {
    "meta_title": "User Profile"
  },
  "DashboardLayout": {
    "dashboard_link": "Dashboard",
    "user_profile_link": "Manage your account",
    "sign_out": "Sign out"
  }
}

================
File: frontend/src/locales/fr.json
================
{
  "RootLayout": {
    "home_link": "Accueil",
    "about_link": "A propos",
    "counter_link": "Compteur",
    "portfolio_link": "Portfolio",
    "sign_in_link": "Se connecter",
    "sign_up_link": "S'inscrire"
  },
  "BaseTemplate": {
    "description": "Code de démarrage pour Next.js avec Tailwind CSS",
    "made_with": "Fait avec <author></author>."
  },
  "Index": {
    "meta_title": "Présentation de Next.js Boilerplate",
    "meta_description": "Next js Boilerplate est le code de démarrage parfait pour votre projet. Construisez votre application React avec le framework Next.js.",
    "sponsors_title": "Partenaires"
  },
  "Counter": {
    "meta_title": "Compteur",
    "meta_description": "Un exemple d'opération DB",
    "loading_counter": "Chargement du compteur...",
    "error_reporting_powered_by": "Rapport d'erreur propulsé par"
  },
  "CounterForm": {
    "presentation": "Le compteur est stocké dans la base de données et incrémenté par la valeur que vous fournissez.",
    "label_increment": "Incrémenter de",
    "button_increment": "Incrémenter"
  },
  "CurrentCount": {
    "count": "Nombre : {count}"
  },
  "About": {
    "meta_title": "A propos",
    "meta_description": "A propos description",
    "about_paragraph": "Bienvenue sur notre page À propos ! Nous sommes une équipe de passionnés et dévoués à la création de logiciels.",
    "translation_powered_by": "Traduction propulsée par"
  },
  "Portfolio": {
    "meta_title": "Portfolio",
    "meta_description": "Bienvenue sur la page de mon portfolio !",
    "presentation": "Bienvenue sur ma page portfolio ! Vous trouverez ici une collection soigneusement organisée de mon travail et de mes réalisations. À travers ce portfolio, je mets en valeur mon expertise, ma créativité et la valeur que je peux apporter à vos projets.",
    "portfolio_name": "Portfolio {name}",
    "error_reporting_powered_by": "Rapport d'erreur propulsé par",
    "coverage_powered_by": "Couverture de code propulsée par"
  },
  "PortfolioSlug": {
    "meta_title": "Portfolio {slug}",
    "meta_description": "Description du Portfolio {slug}",
    "header": "Portfolio {slug}",
    "content": "Créé un ensemble de matériel promotionnel et d'éléments de marquage pour un événement d'entreprise. Conçu un thème visuellement unifié, englobant un logo, des affiches, des bannières et des actifs numériques. Intégrer l'identité de marque du client tout en l'insufflant à une approche contemporaine et innovante. Des réponses favorables de la part des participants ont été obtenues, ce qui a donné lieu à un événement réussi avec un engagement accru des participants et une meilleure visibilité de la marque.",
    "log_management_powered_by": "Gestion des logs propulsée par"
  },
  "SignIn": {
    "meta_title": "Se connecter",
    "meta_description": "Connectez-vous à votre compte avec facilité."
  },
  "SignUp": {
    "meta_title": "S'inscrire",
    "meta_description": "Créez un compte facilement grâce à notre processus d'inscription intuitif."
  },
  "Dashboard": {
    "meta_title": "Tableau de bord",
    "hello_message": "Bonjour {email}!"
  },
  "UserProfile": {
    "meta_title": "Profil de l'utilisateur"
  },
  "DashboardLayout": {
    "dashboard_link": "Tableau de bord",
    "user_profile_link": "Gérer votre compte",
    "sign_out": "Se déconnecter"
  }
}

================
File: frontend/src/models/Schema.ts
================
import { integer, pgTable, serial, timestamp } from 'drizzle-orm/pg-core';

// This file defines the structure of your database tables using the Drizzle ORM.

// To modify the database schema:
// 1. Update this file with your desired changes.
// 2. Generate a new migration by running: `npm run db:generate`

// The generated migration file will reflect your schema changes.
// The migration is automatically applied during the next database interaction,
// so there's no need to run it manually or restart the Next.js server.

export const counterSchema = pgTable('counter', {
  id: serial('id').primaryKey(),
  count: integer('count').default(0),
  updatedAt: timestamp('updated_at', { mode: 'date' })
    .defaultNow()
    .$onUpdate(() => new Date())
    .notNull(),
  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),
});

================
File: frontend/src/styles/global.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: frontend/src/templates/BaseTemplate.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';
import { userEvent, within } from '@storybook/test';
import { NextIntlClientProvider } from 'next-intl';

import messages from '@/locales/en.json';

import { BaseTemplate } from './BaseTemplate';

const meta = {
  title: 'Example/BaseTemplate',
  component: BaseTemplate,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  decorators: [
    Story => (
      <NextIntlClientProvider locale="en" messages={messages}>
        <Story />
      </NextIntlClientProvider>
    ),
  ],
} satisfies Meta<typeof BaseTemplate>;

export default meta;
type Story = StoryObj<typeof meta>;

export const BaseWithReactComponent = {
  args: {
    children: <div>Children node</div>,
    leftNav: (
      <>
        <li>Link 1</li>
        <li>Link 2</li>
      </>
    ),
  },
} satisfies Story;

export const BaseWithString = {
  args: {
    children: 'String',
    leftNav: (
      <>
        <li>Link 1</li>
        <li>Link 2</li>
      </>
    ),
  },
} satisfies Story;

// More on interaction testing: https://storybook.js.org/docs/7.0/react/writing-tests/interaction-testing
export const BaseWithHomeLink: Story = {
  args: {
    children: <div>Children node</div>,
    leftNav: (
      <>
        <li>Link 1</li>
        <li>Link 2</li>
      </>
    ),
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const link = canvas.getByText('Link 1');

    await userEvent.click(link);
  },
} satisfies Story;

================
File: frontend/src/templates/BaseTemplate.test.tsx
================
import { render, screen, within } from '@testing-library/react';
import { NextIntlClientProvider } from 'next-intl';

import messages from '@/locales/en.json';

import { BaseTemplate } from './BaseTemplate';

describe('Base template', () => {
  describe('Render method', () => {
    it('should have 3 menu items', () => {
      render(
        <NextIntlClientProvider locale="en" messages={messages}>
          <BaseTemplate
            leftNav={(
              <>
                <li>link 1</li>
                <li>link 2</li>
                <li>link 3</li>
              </>
            )}
          >
            {null}
          </BaseTemplate>
        </NextIntlClientProvider>,
      );

      const menuItemList = screen.getAllByRole('listitem');

      expect(menuItemList).toHaveLength(3);
    });

    it('should have a link to support creativedesignsguru.com', () => {
      render(
        <NextIntlClientProvider locale="en" messages={messages}>
          <BaseTemplate leftNav={<li>1</li>}>{null}</BaseTemplate>
        </NextIntlClientProvider>,
      );

      const copyrightSection = screen.getByText(/© Copyright/);
      const copyrightLink = within(copyrightSection).getByRole('link');

      /*
       * PLEASE READ THIS SECTION
       * We'll really appreciate if you could have a link to our website
       * The link doesn't need to appear on every pages, one link on one page is enough.
       * Thank you for your support it'll mean a lot for us.
       */
      expect(copyrightLink).toHaveAttribute(
        'href',
        'https://creativedesignsguru.com',
      );
    });
  });
});

================
File: frontend/src/templates/BaseTemplate.tsx
================
import { useTranslations } from 'next-intl';

import { AppConfig } from '@/utils/AppConfig';

export const BaseTemplate = (props: {
  leftNav: React.ReactNode;
  rightNav?: React.ReactNode;
  children: React.ReactNode;
}) => {
  const t = useTranslations('BaseTemplate');

  return (
    <div className="w-full px-1 text-gray-700 antialiased">
      <div className="mx-auto max-w-screen-md">
        <header className="border-b border-gray-300">
          <div className="pb-8 pt-16">
            <h1 className="text-3xl font-bold text-gray-900">
              {AppConfig.name}
            </h1>
            <h2 className="text-xl">{t('description')}</h2>
          </div>

          <div className="flex justify-between">
            <nav>
              <ul className="flex flex-wrap gap-x-5 text-xl">
                {props.leftNav}
              </ul>
            </nav>

            <nav>
              <ul className="flex flex-wrap gap-x-5 text-xl">
                {props.rightNav}
              </ul>
            </nav>
          </div>
        </header>

        <main>{props.children}</main>

        <footer className="border-t border-gray-300 py-8 text-center text-sm">
          {`© Copyright ${new Date().getFullYear()} ${AppConfig.name}. `}
          {t.rich('made_with', {
            author: () => (
              <a
                href="https://creativedesignsguru.com"
                className="text-blue-700 hover:border-b-2 hover:border-blue-700"
              >
                CreativeDesignsGuru
              </a>
            ),
          })}
          {/*
           * PLEASE READ THIS SECTION
           * I'm an indie maker with limited resources and funds, I'll really appreciate if you could have a link to my website.
           * The link doesn't need to appear on every pages, one link on one page is enough.
           * For example, in the `About` page. Thank you for your support, it'll mean a lot to me.
           */}
        </footer>
      </div>
    </div>
  );
};

================
File: frontend/src/types/global.d.ts
================
// Use type safe message keys with `next-intl`
type Messages = typeof import('../locales/en.json');

// eslint-disable-next-line
declare interface IntlMessages extends Messages {}

================
File: frontend/src/utils/AppConfig.ts
================
import type { LocalePrefix } from 'node_modules/next-intl/dist/types/src/routing/types';

const localePrefix: LocalePrefix = 'as-needed';

// FIXME: Update this configuration file based on your project information
export const AppConfig = {
  name: 'Nextjs Starter',
  locales: ['en', 'fr'],
  defaultLocale: 'en',
  localePrefix,
};

================
File: frontend/src/utils/Helpers.test.ts
================
import { AppConfig } from './AppConfig';
import { getI18nPath } from './Helpers';

describe('Helpers', () => {
  describe('getI18nPath function', () => {
    it('should not change the path for default language', () => {
      const url = '/random-url';
      const locale = AppConfig.defaultLocale;

      expect(getI18nPath(url, locale)).toBe(url);
    });

    it('should prepend the locale to the path for non-default language', () => {
      const url = '/random-url';
      const locale = 'fr';

      expect(getI18nPath(url, locale)).toMatch(/^\/fr/);
    });
  });
});

================
File: frontend/src/utils/Helpers.ts
================
import { AppConfig } from './AppConfig';

export const getBaseUrl = () => {
  if (process.env.NEXT_PUBLIC_APP_URL) {
    return process.env.NEXT_PUBLIC_APP_URL;
  }

  if (
    process.env.VERCEL_ENV === 'production'
    && process.env.VERCEL_PROJECT_PRODUCTION_URL
  ) {
    return `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`;
  }

  if (process.env.VERCEL_URL) {
    return `https://${process.env.VERCEL_URL}`;
  }

  return 'http://localhost:3000';
};

export const getI18nPath = (url: string, locale: string) => {
  if (locale === AppConfig.defaultLocale) {
    return url;
  }

  return `/${locale}${url}`;
};

================
File: frontend/src/validations/CounterValidation.ts
================
import { z } from 'zod';

export const CounterValidation = z.object({
  increment: z.coerce.number().min(1).max(3),
});

================
File: frontend/src/instrumentation.ts
================
import * as Sentry from '@sentry/nextjs';

export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    // Node.js Sentry configuration
    Sentry.init({
      // Sentry DSN
      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,

      // Enable Spotlight in development
      spotlight: process.env.NODE_ENV === 'development',

      // Adjust this value in production, or use tracesSampler for greater control
      tracesSampleRate: 1,

      // Setting this option to true will print useful information to the console while you're setting up Sentry.
      debug: false,
    });
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    // Edge Sentry configuration
    Sentry.init({
      // Sentry DSN
      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,

      // Enable Spotlight in development
      spotlight: process.env.NODE_ENV === 'development',

      // Adjust this value in production, or use tracesSampler for greater control
      tracesSampleRate: 1,

      // Setting this option to true will print useful information to the console while you're setting up Sentry.
      debug: false,
    });
  }
}

================
File: frontend/src/middleware.ts
================
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';
import type { NextFetchEvent, NextRequest } from 'next/server';
import createMiddleware from 'next-intl/middleware';

import { AppConfig } from './utils/AppConfig';

const intlMiddleware = createMiddleware({
  locales: AppConfig.locales,
  localePrefix: AppConfig.localePrefix,
  defaultLocale: AppConfig.defaultLocale,
});

const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)',
  '/:locale/dashboard(.*)',
]);

export default function middleware(
  request: NextRequest,
  event: NextFetchEvent,
) {
  // Run Clerk middleware only when it's necessary
  if (
    request.nextUrl.pathname.includes('/sign-in')
    || request.nextUrl.pathname.includes('/sign-up')
    || isProtectedRoute(request)
  ) {
    return clerkMiddleware((auth, req) => {
      if (isProtectedRoute(req)) {
        const locale
          = req.nextUrl.pathname.match(/(\/.*)\/dashboard/)?.at(1) ?? '';

        const signInUrl = new URL(`${locale}/sign-in`, req.url);

        auth().protect({
          // `unauthenticatedUrl` is needed to avoid error: "Unable to find `next-intl` locale because the middleware didn't run on this request"
          unauthenticatedUrl: signInUrl.toString(),
        });
      }

      return intlMiddleware(req);
    })(request, event);
  }

  return intlMiddleware(request);
}

export const config = {
  matcher: ['/((?!.+\\.[\\w]+$|_next|monitoring).*)', '/', '/(api|trpc)(.*)'], // Also exclude tunnelRoute used in Sentry from the matcher
};

================
File: frontend/tests/e2e/Counter.e2e.ts
================
import assert from 'node:assert';

import { faker } from '@faker-js/faker';
import { expect, test } from '@playwright/test';

test.describe('Counter', () => {
  test.describe('Increment operation', () => {
    test('should display error message when incrementing with negative number', async ({
      page,
    }) => {
      await page.goto('/counter');

      const count = page.getByText('Count:');
      const countText = await count.textContent();

      assert(countText !== null, 'Count should not be null');

      await page.getByLabel('Increment by').fill('-1');
      await page.getByRole('button', { name: 'Increment' }).click();

      await expect(page.getByText('Number must be greater than or equal to 1')).toBeVisible();
      await expect(page.getByText('Count:')).toHaveText(countText);
    });

    test('should increment the counter and validate the count', async ({
      page,
    }) => {
      // `x-e2e-random-id` is used for end-to-end testing to make isolated requests
      // The default value is 0 when there is no `x-e2e-random-id` header
      const e2eRandomId = faker.number.int({ max: 1000000 });
      await page.setExtraHTTPHeaders({
        'x-e2e-random-id': e2eRandomId.toString(),
      });
      await page.goto('/counter');

      const count = page.getByText('Count:');
      const countText = await count.textContent();

      assert(countText !== null, 'Count should not be null');

      const countNumber = Number(countText.split(' ')[1]);

      await page.getByLabel('Increment by').fill('2');
      await page.getByRole('button', { name: 'Increment' }).click();

      await expect(page.getByText('Count:')).toHaveText(`Count: ${countNumber + 2}`);

      await page.getByLabel('Increment by').fill('3');
      await page.getByRole('button', { name: 'Increment' }).click();

      await expect(page.getByText('Count:')).toHaveText(`Count: ${countNumber + 5}`);
    });
  });
});

================
File: frontend/tests/e2e/I18n.e2e.ts
================
import { expect, test } from '@playwright/test';

test.describe('I18n', () => {
  test.describe('Language Switching', () => {
    test('should switch language from English to French using dropdown and verify text on the homepage', async ({ page }) => {
      await page.goto('/');

      await expect(
        page.getByRole('heading', { name: 'Boilerplate Code for Your Next.js Project with Tailwind CSS' }),
      ).toBeVisible();

      await page.getByLabel('lang-switcher').selectOption('fr');

      await expect(
        page.getByRole('heading', { name: 'Code de démarrage pour Next.js avec Tailwind CSS' }),
      ).toBeVisible();
    });

    test('should switch language from English to French using URL and verify text on the sign-in page', async ({ page }) => {
      await page.goto('/sign-in');

      await expect(page.getByText('Email address')).toBeVisible();

      await page.goto('/fr/sign-in');

      await expect(page.getByText('Adresse e-mail')).toBeVisible();
    });
  });
});

================
File: frontend/tests/e2e/Sanity.check.e2e.ts
================
import { expect, test } from '@playwright/test';

// Checkly is a tool used to monitor deployed environments, such as production or preview environments.
// It runs end-to-end tests with the `.check.e2e.ts` extension after each deployment to ensure that the environment is up and running.
// With Checkly, you can monitor your production environment and run `*.check.e2e.ts` tests regularly at a frequency of your choice.
// If the tests fail, Checkly will notify you via email, Slack, or other channels of your choice.
// On the other hand, E2E tests ending with `*.e2e.ts` are only run before deployment.
// You can run them locally or on CI to ensure that the application is ready for deployment.

// BaseURL needs to be explicitly defined in the test file.
// Otherwise, Checkly runtime will throw an exception: `CHECKLY_INVALID_URL: Only URL's that start with http(s)`
// You can't use `goto` function directly with a relative path like with other *.e2e.ts tests.
// Check the example at https://feedback.checklyhq.com/changelog/new-changelog-436

test.describe('Sanity', () => {
  test.describe('Static pages', () => {
    test('should display the homepage', async ({ page, baseURL }) => {
      await page.goto(`${baseURL}/`);

      await expect(
        page.getByRole('heading', { name: 'Boilerplate Code for Your Next.js Project with Tailwind CSS' }),
      ).toBeVisible();
    });

    test('should navigate to the about page', async ({ page, baseURL }) => {
      await page.goto(`${baseURL}/`);

      await page.getByRole('link', { name: 'About' }).click();

      await expect(page).toHaveURL(/about$/);

      await expect(
        page.getByText('Welcome to our About page', { exact: false }),
      ).toBeVisible();
    });

    test('should navigate to the portfolio page', async ({ page, baseURL }) => {
      await page.goto(`${baseURL}/`);

      await page.getByRole('link', { name: 'Portfolio' }).click();

      await expect(page).toHaveURL(/portfolio$/);

      await expect(
        page.locator('main').getByRole('link', { name: /^Portfolio/ }),
      ).toHaveCount(6);
    });
  });
});

================
File: frontend/tests/e2e/Visual.e2e.ts
================
import percySnapshot from '@percy/playwright';
import { expect, test } from '@playwright/test';

test.describe('Visual testing', () => {
  test.describe('Static pages', () => {
    test('should take screenshot of the homepage', async ({ page }) => {
      await page.goto('/');

      await expect(
        page.getByRole('heading', { name: 'Boilerplate Code for Your Next.js Project with Tailwind CSS' }),
      ).toBeVisible();

      await percySnapshot(page, 'Homepage');
    });

    test('should take screenshot of the about page', async ({ page }) => {
      await page.goto('/about');

      await expect(
        page.getByRole('link', { name: 'About' }),
      ).toBeVisible();

      await percySnapshot(page, 'About');
    });

    test('should take screenshot of the portfolio page and one details page', async ({ page }) => {
      await page.goto('/portfolio');

      await expect(
        page.getByText('Welcome to my portfolio page!'),
      ).toBeVisible();

      await percySnapshot(page, 'Portfolio');

      await page.getByRole('link', { name: 'Portfolio 2' }).click();

      await expect(
        page.getByText('Created a set of promotional'),
      ).toBeVisible();

      await percySnapshot(page, 'Portfolio details');
    });

    test('should take screenshot of the French homepage', async ({ page }) => {
      await page.goto('/fr');

      await expect(
        page.getByRole('heading', { name: 'Code de démarrage pour Next.js avec Tailwind CSS' }),
      ).toBeVisible();

      await percySnapshot(page, 'Homepage - French');
    });
  });
});

================
File: frontend/tests/integration/Counter.spec.ts
================
import { faker } from '@faker-js/faker';
import { expect, test } from '@playwright/test';

test.describe('Counter', () => {
  test.describe('Basic database operations', () => {
    test('shouldn\'t increment the counter with an invalid input', async ({ page }) => {
      const counter = await page.request.put('/api/counter', {
        data: {
          increment: 'incorrect',
        },
      });

      expect(counter.status()).toBe(422);
    });

    test('shouldn\'t increment the counter with a negative number', async ({ page }) => {
      const counter = await page.request.put('/api/counter', {
        data: {
          increment: -1,
        },
      });

      expect(counter.status()).toBe(422);
    });

    test('shouldn\'t increment the counter with a number greater than 3', async ({ page }) => {
      const counter = await page.request.put('/api/counter', {
        data: {
          increment: 5,
        },
      });

      expect(counter.status()).toBe(422);
    });

    test('should increment the counter and update the counter correctly', async ({ page }) => {
      // `x-e2e-random-id` is used for end-to-end testing to make isolated requests
      // The default value is 0 when there is no `x-e2e-random-id` header
      const e2eRandomId = faker.number.int({ max: 1000000 });

      let counter = await page.request.put('/api/counter', {
        data: {
          increment: 1,
        },
        headers: {
          'x-e2e-random-id': e2eRandomId.toString(),
        },
      });
      let counterJson = await counter.json();

      expect(counter.status()).toBe(200);

      // Save the current count
      const count = counterJson.count;

      counter = await page.request.put('/api/counter', {
        data: {
          increment: 2,
        },
        headers: {
          'x-e2e-random-id': e2eRandomId.toString(),
        },
      });
      counterJson = await counter.json();

      expect(counter.status()).toBe(200);
      expect(counterJson.count).toEqual(count + 2);

      counter = await page.request.put('/api/counter', {
        data: {
          increment: 1,
        },
        headers: {
          'x-e2e-random-id': e2eRandomId.toString(),
        },
      });
      counterJson = await counter.json();

      expect(counter.status()).toBe(200);
      expect(counterJson.count).toEqual(count + 3);
    });
  });
});

================
File: frontend/.env
================
# FIXME: Configure environment variables for your project

# If you need to build a SaaS application with Stripe subscription payment with checkout page, customer portal, webhook, etc.
# You can check out the Next.js Boilerplate SaaS: https://nextjs-boilerplate.com/pro-saas-starter-kit

# Clerk authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cmVsYXhlZC10dXJrZXktNjcuY2xlcmsuYWNjb3VudHMuZGV2JA

NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in

######## [BEGIN] SENSITIVE DATA ######## For security reason, don't update the following variables (secret key) directly in this file.
######## Please create a new file named `.env.local`, all environment files ending with `.local` won't be tracked by Git.
######## After creating the file, you can add the following variables.
# Clerk authentication
CLERK_SECRET_KEY=your_clerk_secret_key
######## [END] SENSITIVE DATA

================
File: frontend/.env.production
================
# FIXME: Configure environment variables for production

# If you need to build a SaaS application with Stripe subscription payment with checkout page, customer portal, webhook, etc.
# You can check out the Next.js Boilerplate SaaS: https://nextjs-boilerplate.com/pro-saas-starter-kit

# Hosting
# Replace by your domain name
# NEXT_PUBLIC_APP_URL=https://example.com

# Sentry DSN
NEXT_PUBLIC_SENTRY_DSN=

######## [BEGIN] SENSITIVE DATA ######## For security reason, don't update the following variables (secret key) directly in this file.
######## Please create a new file named `.env.production.local`, all environment files ending with `.local` won't be tracked by Git.
######## After creating the file, you can add the following variables.
# Database
# Using an incorrect DATABASE_URL value, Next.js build will timeout and you will get the following error: "because it took more than 60 seconds"
# DATABASE_URL=postgresql://postgres@localhost:5432/postgres

# Error monitoring
# SENTRY_AUTH_TOKEN=

# Logging ingestion
# LOGTAIL_SOURCE_TOKEN=
######## [END] SENSITIVE DATA

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# Database
*.db

# testing
/coverage

# storybook
storybook-static
*storybook.log

# playwright
/test-results/
/playwright-report/
/playwright/.cache/

# next.js
/.next
/out

# cache
.swc/

# production
/build

# misc
.DS_Store
*.pem
Thumbs.db

# debug
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# local folder
local

# vercel
.vercel

================
File: frontend/CHANGELOG.md
================
## [3.58.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.58.1...v3.58.2) (2024-10-17)


### Bug Fixes

* remove hydration error generated by Sentry Spotlight.js ([8b14146](https://github.com/ixartz/Next-js-Boilerplate/commit/8b14146bf6fe0eb288c2bcb8b701ca38b5dcec24))

## [3.58.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.58.0...v3.58.1) (2024-10-01)


### Bug Fixes

* simply the counter Route handler by removing try-catch block and improve readability in form ([f777914](https://github.com/ixartz/Next-js-Boilerplate/commit/f7779146e954a86c311577c24e2e80a846c36d46))
* use faker instead of Math.random, simply playwright config ([52c5d3f](https://github.com/ixartz/Next-js-Boilerplate/commit/52c5d3f3447ea26b730a284d2770bbf065caa058))

# [3.58.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.57.0...v3.58.0) (2024-09-15)


### Features

* add drizzle into the singleton only in dev to persist db connection ([aefe3d8](https://github.com/ixartz/Next-js-Boilerplate/commit/aefe3d838ede52a606869631257aa21a3e88a299))

# [3.57.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.56.2...v3.57.0) (2024-09-14)


### Features

* disable submit button when submitting form ([0247937](https://github.com/ixartz/Next-js-Boilerplate/commit/02479379326ff3b5b16f016de3241efcc5a49fd5))

## [3.56.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.56.1...v3.56.2) (2024-09-12)


### Bug Fixes

* rewrite index page of the boilerplate ([9456ede](https://github.com/ixartz/Next-js-Boilerplate/commit/9456ede93122e2230f6cd17114ac9893578e242d))

## [3.56.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.56.0...v3.56.1) (2024-09-11)


### Bug Fixes

* enable coverage for unit testing ([eb4534c](https://github.com/ixartz/Next-js-Boilerplate/commit/eb4534c1a30dd90943a35c1583ff9c0c60c9520d))
* update crowdin image, load the image locally ([5b404b1](https://github.com/ixartz/Next-js-Boilerplate/commit/5b404b1a1b451b6ea839f4a72e002efb8a8b0cf8))
* use default reporter for vitest ([67e766a](https://github.com/ixartz/Next-js-Boilerplate/commit/67e766a346a6f4eb06b146b6102b3751fc3e22ad))

# [3.56.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.55.3...v3.56.0) (2024-09-09)


### Bug Fixes

* add missing file ([54c343b](https://github.com/ixartz/Next-js-Boilerplate/commit/54c343b93a0555b60c1e7f000002f57c480694e6))


### Features

* use counter instead of guestbook, make the boilerplate easier to use ([3e6b0b8](https://github.com/ixartz/Next-js-Boilerplate/commit/3e6b0b86dfa8b0ef65c71830036021faa74180c5))

## [3.55.3](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.55.2...v3.55.3) (2024-08-21)


### Bug Fixes

* update checkly configuration and use playwright baseURl in Checkly ([4a458f3](https://github.com/ixartz/Next-js-Boilerplate/commit/4a458f328f100f427007ec9bd5c7a02e45c55a12))

## [3.55.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.55.1...v3.55.2) (2024-08-20)


### Bug Fixes

* add crowdin synchronize in CI action ([9402e5e](https://github.com/ixartz/Next-js-Boilerplate/commit/9402e5ee4c3e2b8dcb42fe38425b5e93247347c3))
* automatically sync translation with Crowdin for each PR ([d4ea7d5](https://github.com/ixartz/Next-js-Boilerplate/commit/d4ea7d5ed3e06f468c0cbd57a343c2925672fa1f))
* automatically sync translation with Crowdin for each PR ([eeb4216](https://github.com/ixartz/Next-js-Boilerplate/commit/eeb421668bcd0dc3fe09c8e9dea8c194e02207e2))
* checkout HEAD commit instead of the merge commit ([60bfd65](https://github.com/ixartz/Next-js-Boilerplate/commit/60bfd65d83e6e148c47703f4a94e11e1858d70c2))
* git checkout history in crowdin pr sync action ([5a2fedf](https://github.com/ixartz/Next-js-Boilerplate/commit/5a2fedf951f11c5d4e911e1b9c94dd1018d78df6))
* only run crowdin pr sync when CI workflow pass ([cc4a9a8](https://github.com/ixartz/Next-js-Boilerplate/commit/cc4a9a80c5c7ffa42bc0ad4a843f037f249ca423))
* upgrade GitHub actions dependencies ([7b5edfe](https://github.com/ixartz/Next-js-Boilerplate/commit/7b5edfe8ad7fad28e66a8ce92d63d2dd3e9dfbbe))

## [3.55.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.55.0...v3.55.1) (2024-08-20)


### Bug Fixes

* resolve lint sort conflicts ([b9d3de1](https://github.com/ixartz/Next-js-Boilerplate/commit/b9d3de1212b6b77cd61277edce354c290fc3fd86))
* resolve lint sort conflicts with simple-import-sort ([544c541](https://github.com/ixartz/Next-js-Boilerplate/commit/544c54197ee74930c01b0d28cfd250c6bc384080))

# [3.55.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.54.0...v3.55.0) (2024-08-19)


### Features

* remove target='blank' in badge ([b033c2e](https://github.com/ixartz/Next-js-Boilerplate/commit/b033c2e1f4ebdff7914ea81830e1c54b5b1a3d96))
* use new ESLint flat config ([8f31536](https://github.com/ixartz/Next-js-Boilerplate/commit/8f31536f29ce6599fb9ccbfae8dc176080a9215d))


### Reverts

* add back lint-staged file configuration ([5c51a94](https://github.com/ixartz/Next-js-Boilerplate/commit/5c51a94147c325ec2a10ea1c7a8f2060397ec32b))
* comment pre-commit script ([e9d6c7a](https://github.com/ixartz/Next-js-Boilerplate/commit/e9d6c7a34c1dad2b1fb706c300646f098b6437b1))
* pre-commit script used by Husky ([21acf33](https://github.com/ixartz/Next-js-Boilerplate/commit/21acf33b96dab666587688ea1dfb08c7f5f1ddf4))
* use default code from next-intl in global.d.ts ([0343b2f](https://github.com/ixartz/Next-js-Boilerplate/commit/0343b2f043480716866350b221a7e986759e6dc6))

# [3.54.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.53.0...v3.54.0) (2024-07-23)


### Features

* add NODE_ENV in t3 env ([17c23f9](https://github.com/ixartz/Next-js-Boilerplate/commit/17c23f9bea037da9ab2ae93b9ecc883a919d9723))
* add Sentry configuration in environment files and fix meta journal error in production ([2243510](https://github.com/ixartz/Next-js-Boilerplate/commit/2243510438d8b4e0670a309605852c817a6d8492))
* enable static rendering with i18n ([e6ec268](https://github.com/ixartz/Next-js-Boilerplate/commit/e6ec2682de7d8a5f1b92be67f1fa1499f800f624))
* middlware should not run for monitoring endpoint ([34b3c0c](https://github.com/ixartz/Next-js-Boilerplate/commit/34b3c0cb2cd732f937755e950197f03c765bdd15))
* use defineConfig in drizzle.config.ts ([48893e5](https://github.com/ixartz/Next-js-Boilerplate/commit/48893e535bb4889dd83c97aa809a6081b1e9afbd))

# [3.53.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.52.0...v3.53.0) (2024-06-26)


### Features

* add updateAt and createdAt attribute in guestbook ([80d369a](https://github.com/ixartz/Next-js-Boilerplate/commit/80d369a9d374cb5557356d9ea794719e3a1f59d5))
* create a new environement file for production ([988a051](https://github.com/ixartz/Next-js-Boilerplate/commit/988a051515666e7698a42f066198e7eb8dd44f32))
* switch to Postgres in Drizzle ORM ([1d725e8](https://github.com/ixartz/Next-js-Boilerplate/commit/1d725e8d280e1848e792aba7c8102371b3c038a8))

# [3.52.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.51.0...v3.52.0) (2024-05-31)


### Features

* update Drizzle configuration for Drizzle Kit 0.22 and improve ([5159455](https://github.com/ixartz/Next-js-Boilerplate/commit/5159455ab2cfb569702b33a7e2135ec23f32d598))

# [3.51.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.50.1...v3.51.0) (2024-05-29)


### Features

* update to Drizzle kit 0.21 version, no need to have dialect in command line ([62aa678](https://github.com/ixartz/Next-js-Boilerplate/commit/62aa6786117637e6b76c97f6c98f7ca6e8c343b0))

## [3.50.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.50.0...v3.50.1) (2024-05-20)


### Bug Fixes

* add eslint support for .mts file ([cd58d38](https://github.com/ixartz/Next-js-Boilerplate/commit/cd58d3806206e269d712e0976f4101af26275e44))

# [3.50.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.49.0...v3.50.0) (2024-05-18)


### Features

* replace Jest by Vitest for better DX ([2504504](https://github.com/ixartz/Next-js-Boilerplate/commit/25045041bb0af1fc4065ccffdb4d4d9b715c5823))
* update to Storybook v8 ([51b20a6](https://github.com/ixartz/Next-js-Boilerplate/commit/51b20a64f8f7a9780cb4c81b6ec2f0d1ac8779c5))


### Reverts

* reuse vitest.config.mts to avoid warning when running the tests ([f923242](https://github.com/ixartz/Next-js-Boilerplate/commit/f9232425d3cca895bcf3b45355dbee2caaedccce))

# [3.49.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.48.0...v3.49.0) (2024-05-17)


### Features

* vscode jest open test result view on test fails and add unauthenticatedUrl in clerk middleware ([2a68124](https://github.com/ixartz/Next-js-Boilerplate/commit/2a681244f834b6ea55bcd5cd3105f8b4a9df4a05))

# [3.48.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.47.0...v3.48.0) (2024-05-09)


### Features

* add custom configuration for i18n ally VSCode extension ([46f9459](https://github.com/ixartz/Next-js-Boilerplate/commit/46f945963c02eb29efc802fb0f3b1220b10bdf13))

# [3.47.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.46.0...v3.47.0) (2024-05-07)


### Features

* make dashboard without lang protected route in Clerk ([704466b](https://github.com/ixartz/Next-js-Boilerplate/commit/704466bbab40e366d0c1e17b66d7f5f0e97b902b))
* run Clerk middleware only needed ([5aeee06](https://github.com/ixartz/Next-js-Boilerplate/commit/5aeee0609bb9abbccf17aa0d2900cffdc7c3a18a))
* upgrade to Clerk v5 and use Clerk's Core 2 ([c1978f1](https://github.com/ixartz/Next-js-Boilerplate/commit/c1978f181a7c29e443fe407d91dfb9c2ae147f04))


### Reverts

* add back process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL ([f8cb9f4](https://github.com/ixartz/Next-js-Boilerplate/commit/f8cb9f441e08ec4f0e4501e4b42b4923adbc01a1))
* downgrade React to 18.2 due to testing errors, error raised in Next.js issue [#65161](https://github.com/ixartz/Next-js-Boilerplate/issues/65161) ([1815eb3](https://github.com/ixartz/Next-js-Boilerplate/commit/1815eb3670f53b4d949a06505e8ef3afd4ab0ee5))

# [3.46.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.45.0...v3.46.0) (2024-04-13)


### Features

* new turso logo ([3e781fc](https://github.com/ixartz/Next-js-Boilerplate/commit/3e781fc75201a7271a3a640a0b665adb1560add6))
* use new Turso tagline ([601ba6b](https://github.com/ixartz/Next-js-Boilerplate/commit/601ba6b2a4beb1a0c6779964d2d654bd3553f044))

# [3.45.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.44.1...v3.45.0) (2024-04-04)


### Features

* remove next-sitemap and use the native Next.js sitemap/robots.txt ([135a435](https://github.com/ixartz/Next-js-Boilerplate/commit/135a4350bef905d2a38a8901d42e5fa304fb92bc))

## [3.44.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.44.0...v3.44.1) (2024-04-03)


### Bug Fixes

* add Twitter in the index page ([75dfb8b](https://github.com/ixartz/Next-js-Boilerplate/commit/75dfb8bc5ca40446005f8d405add52d09071f62a))
* use new VSCode Jest configuration ([e92e4e0](https://github.com/ixartz/Next-js-Boilerplate/commit/e92e4e09c636944d85cec38683738520224acebb))

# [3.44.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.43.0...v3.44.0) (2024-04-02)


### Features

* run migration only in development and eslint-disable need to be at the top ([db94f31](https://github.com/ixartz/Next-js-Boilerplate/commit/db94f31615cd5ffcc3739ab56572646f7ce1f177))

# [3.43.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.42.0...v3.43.0) (2024-03-07)


### Features

* use eslintrc.json and give release.yml permission in GitHub Actions ([a329518](https://github.com/ixartz/Next-js-Boilerplate/commit/a32951811e157696ab915eebd6b71b09f49ccb83))

# [3.42.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.41.0...v3.42.0) (2024-02-22)


### Features

* remove import React when it's not needed ([a7082d3](https://github.com/ixartz/Next-js-Boilerplate/commit/a7082d3492d9a426218829f86554b2aeda9da8fd))

# [3.41.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.40.0...v3.41.0) (2024-02-09)


### Features

* add target blank for links going outside ([37ba36e](https://github.com/ixartz/Next-js-Boilerplate/commit/37ba36e5e3815d87cf882dc9aaf8b69b5849b49e))
* make the index page of the boilerplate cleaner ([f3a3f9b](https://github.com/ixartz/Next-js-Boilerplate/commit/f3a3f9b306bfaed85058d59cd15e62db158468ca))

# [3.40.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.39.0...v3.40.0) (2024-02-07)


### Features

* add pino.js as Logger ([1d35f43](https://github.com/ixartz/Next-js-Boilerplate/commit/1d35f43efd5e250498d2d30654be672e4e2d91c9))

# [3.39.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.38.0...v3.39.0) (2024-02-07)


### Features

* add preferType on VSCode ([a55bc6a](https://github.com/ixartz/Next-js-Boilerplate/commit/a55bc6a4b543c47ec491c5a84806f62c93dc1aa4))

# [3.38.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.37.0...v3.38.0) (2024-01-19)


### Features

* update to Next.js 14.1 ([5dab52d](https://github.com/ixartz/Next-js-Boilerplate/commit/5dab52d58648a12b5779f04d642ad4b2010931b0))

# [3.37.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.36.0...v3.37.0) (2024-01-13)


### Features

* add environment variables for one click deploy Netlify ([5becdbf](https://github.com/ixartz/Next-js-Boilerplate/commit/5becdbf59f43fdfe893c5b7b62cac1246787a07e))

# [3.36.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.35.0...v3.36.0) (2024-01-10)


### Features

* prod environement use the same method to migrate ([f6cfe7f](https://github.com/ixartz/Next-js-Boilerplate/commit/f6cfe7fa7583621c9161aa478f1d958d5c93c083))


### Reverts

* add back process.env.NODE_ENV check in README file for migrate ([853f3dc](https://github.com/ixartz/Next-js-Boilerplate/commit/853f3dc4cbade618902b382023fe6a6a8e947082))
* only run migration in development, if it run in production, it also run during the build ([c94a600](https://github.com/ixartz/Next-js-Boilerplate/commit/c94a6007b20f71fe10b10c76a05659364ee920ff))

# [3.35.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.34.0...v3.35.0) (2024-01-07)


### Features

* automatically run migrate in DB instead of running in NPM scripts ([b202686](https://github.com/ixartz/Next-js-Boilerplate/commit/b202686687a41eb38cf92a0451f03b5f0a854a2d))
* e2e tests run against next start with production code ([a57f724](https://github.com/ixartz/Next-js-Boilerplate/commit/a57f72402c459b75aec65472db7030557974643b))
* jest fail on console error and warn ([2dd92f2](https://github.com/ixartz/Next-js-Boilerplate/commit/2dd92f2db19df25210f0aa6eb8b9c44136a16ab7))


### Reverts

* change related to running playwright with next start ([1a2d0b6](https://github.com/ixartz/Next-js-Boilerplate/commit/1a2d0b6473e6e7b4965c7df353d39645a8688273))
* change related to running playwright with next start ([e9e0c17](https://github.com/ixartz/Next-js-Boilerplate/commit/e9e0c1790a8e76b51ee8a0b1012cc3492349bd1b))

# [3.34.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.33.0...v3.34.0) (2024-01-06)


### Features

* add type definition in Postcss config ([07906ff](https://github.com/ixartz/Next-js-Boilerplate/commit/07906ff20a7c8d2b0c24cc1f33c93b0bc541b9c3))
* change commitlint config from JS to TS ([6509805](https://github.com/ixartz/Next-js-Boilerplate/commit/650980539eb16c4ef0f5d1ed3e833cdb08faaf86))
* change jest config extension from js to TypeScript ([1cdea44](https://github.com/ixartz/Next-js-Boilerplate/commit/1cdea44c2a193e9df792dc997f6aa5304e043ff6))
* change nodeResolution to the new bundler from TypeScript 5.0 ([59282a2](https://github.com/ixartz/Next-js-Boilerplate/commit/59282a2f028a10b841f4af42248e4ecd2c41c080))
* convert Tailwind config file from JS to TS ([aff3b27](https://github.com/ixartz/Next-js-Boilerplate/commit/aff3b276c6b857570c3ec0b68de3cd5efaaeebbd))

# [3.33.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.32.1...v3.33.0) (2024-01-03)


### Features

* enable SWC compiler in Storybook ([5b4c61e](https://github.com/ixartz/Next-js-Boilerplate/commit/5b4c61ea11164b6e5853cefe363d2d433cda374d))

## [3.32.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.32.0...v3.32.1) (2023-12-27)


### Bug Fixes

* typo in en.json file for Portfolio word ([4d42b3d](https://github.com/ixartz/Next-js-Boilerplate/commit/4d42b3d11feeb1134961c0c688a6659b5e88364e))

# [3.32.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.31.0...v3.32.0) (2023-12-22)


### Features

* add code coverage reporting with Codecov ([08abd23](https://github.com/ixartz/Next-js-Boilerplate/commit/08abd23acbb5fb770046900901a367d60f18695e))

# [3.31.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.30.1...v3.31.0) (2023-12-20)


### Features

* add FIXME tag for Sentry configuration ([2eceef1](https://github.com/ixartz/Next-js-Boilerplate/commit/2eceef14257232c89f625acfe475c1aa7f220e46))
* add Sentry and launch spotlight.js in dev mode ([a1326ae](https://github.com/ixartz/Next-js-Boilerplate/commit/a1326aebb4ade33dc8a4429e749fb482ed906754))
* add spotlight ([34086c1](https://github.com/ixartz/Next-js-Boilerplate/commit/34086c1b8636bdc391c31ceed062a1e858d81539))
* enable Sentry Spotlight only in development mode ([62cc01a](https://github.com/ixartz/Next-js-Boilerplate/commit/62cc01ab2e1ae5594a4b91f931f313a904ff4b7d))
* ignore technical exception throw by React RSC in Sentry ([4bf9503](https://github.com/ixartz/Next-js-Boilerplate/commit/4bf95038600a28ea3e98e84dabec4df5fd9af609))
* in global error get locale in params and set in html lang attribute ([c3b4d25](https://github.com/ixartz/Next-js-Boilerplate/commit/c3b4d25d3be6a5ceed48f2d365bd14e44ff9b114))

## [3.30.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.30.0...v3.30.1) (2023-12-17)


### Bug Fixes

* api routes not found after apply intl middleware ([4650a5e](https://github.com/ixartz/Next-js-Boilerplate/commit/4650a5e293716dee7704c6082839aaf94b63e7ad)), closes [#209](https://github.com/ixartz/Next-js-Boilerplate/issues/209)

# [3.30.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.29.0...v3.30.0) (2023-12-12)


### Features

* add GitHub Actions to sync with Crowdin ([ccc86e9](https://github.com/ixartz/Next-js-Boilerplate/commit/ccc86e9e4df89dadd3214ae167972038f44108a6))

# [3.29.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.28.0...v3.29.0) (2023-12-08)


### Features

* add i18n support for client component and typesafety for i18n keys ([2d86247](https://github.com/ixartz/Next-js-Boilerplate/commit/2d862478414c4e6cf06e287acbef50369ef9a119))
* add i18n support for Dashboard url used in Clerk ([12b89bc](https://github.com/ixartz/Next-js-Boilerplate/commit/12b89bcfa1cae76872fc1504960a5ee417ef5eea))
* add i18n with Clerk components and remove custom style in global.css file ([5e1af6c](https://github.com/ixartz/Next-js-Boilerplate/commit/5e1af6c9a83cc6988c68fd761bf4945a2e0cdb9c))
* add i18n with next-intl ([1f43eb2](https://github.com/ixartz/Next-js-Boilerplate/commit/1f43eb247ad8591fef3aa8a34d112dd804eec4c3))
* add locale switcher UI to change lang ([13b40e3](https://github.com/ixartz/Next-js-Boilerplate/commit/13b40e32d265d341da1cf723c1af36f3ea53e7e1))
* add metatags in App Router for page migrated from Pages Router ([ce8c277](https://github.com/ixartz/Next-js-Boilerplate/commit/ce8c2770c41abcc3c866d7320de6ef4d8a541715))
* add support i18n for authMiddleware ([8651d36](https://github.com/ixartz/Next-js-Boilerplate/commit/8651d36279512b0f5e008341916110a8ee6f167a))
* add tests for page in App Router ([6a722a1](https://github.com/ixartz/Next-js-Boilerplate/commit/6a722a1fec7a236973f794edc6583a245ebb4747))
* convert all hard coded text and translate in french ([0c3b1b2](https://github.com/ixartz/Next-js-Boilerplate/commit/0c3b1b2f9a8ae5c0d34cb6f3a227a907aca00342))
* i18n for page metatag ([5e7676d](https://github.com/ixartz/Next-js-Boilerplate/commit/5e7676de0d58238de1d46e662c3c8e6e00bd2c5b))
* link in BaseTemplate replaced margin with gap ([28b6ff2](https://github.com/ixartz/Next-js-Boilerplate/commit/28b6ff24577b5d4338a7da068e06070c7f50f195))
* migreate the index page from Page Rotuer to App Router ([fd3e82c](https://github.com/ixartz/Next-js-Boilerplate/commit/fd3e82c2ff837951277a8300fd95f15294b9290a))
* move messages folder to locales ([305e385](https://github.com/ixartz/Next-js-Boilerplate/commit/305e38504939008ecfbbd3bfb6deaf052e57eae7))
* remove Page router and migrate about page to App Router ([3965cbf](https://github.com/ixartz/Next-js-Boilerplate/commit/3965cbf89a67a64272b895809a31791ccf383b57))
* translate text in dashboard layout ([8119f1d](https://github.com/ixartz/Next-js-Boilerplate/commit/8119f1db63853f83710a6cc1f3135b45bc209809))


### Reverts

* add back NEXT_PUBLIC_CLERK_SIGN_IN_URL in the previous location ([16ae2ef](https://github.com/ixartz/Next-js-Boilerplate/commit/16ae2ef3a7b2800a3ac4d847bb7afa70743ee805))
* add back style for a tag link ([c12a7bd](https://github.com/ixartz/Next-js-Boilerplate/commit/c12a7bd400c875a115eefe2a9921db9e36bf644d))
* use percy/cli 1.27.4 instead of 1.27.5, impossible to upload snapshort with 1.27.5 ([73f8a0b](https://github.com/ixartz/Next-js-Boilerplate/commit/73f8a0b0e9c69f83e5c5a2b51f52159fcc43c654))

# [3.28.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.27.0...v3.28.0) (2023-11-22)


### Features

* rename custom SignOutButton to LogOutButton to avoid confusion with Clerk SignOutButton ([183301b](https://github.com/ixartz/Next-js-Boilerplate/commit/183301b5e87bfa4479727c295e83b45b923454a0))
* use custom SignOutButton to apply custom CSS styles, unified with other nav links ([35094bf](https://github.com/ixartz/Next-js-Boilerplate/commit/35094bf038f0eae6e7e2d77238840c97cc7adabe))

# [3.27.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.26.0...v3.27.0) (2023-11-20)


### Features

* add PRODUCTION_URL environment variable and throw error when targetURL doesn't exist ([8134dee](https://github.com/ixartz/Next-js-Boilerplate/commit/8134dee84205e297020851bad4c81cf3906e7dfe))
* unified e2e tests for Checkly and playwright ([afa53f5](https://github.com/ixartz/Next-js-Boilerplate/commit/afa53f56b51f9a537131ceb046f90ea59c17dd71))
* use target URl instead of baseURL for checkly ([4fd61ed](https://github.com/ixartz/Next-js-Boilerplate/commit/4fd61edc77e1ef0d457cb829a89545f7dab47210))

# [3.26.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.25.0...v3.26.0) (2023-11-15)


### Features

* add a new GitHub Actions file for Checkly ([2109b1c](https://github.com/ixartz/Next-js-Boilerplate/commit/2109b1c75359a9ce89c2c0773fd65e78e1439403))
* add aria-label to fix jsx-a11y/control-has-associated-label error ([47e4ff4](https://github.com/ixartz/Next-js-Boilerplate/commit/47e4ff4f811b4e2071b9ba31f5c0ad1367b0caba))
* add email alert channel for checkly ([d1a4380](https://github.com/ixartz/Next-js-Boilerplate/commit/d1a43801d64fa261bdb252cf83dc289742f37294))
* add email channel in Checkly configuration to send emails when failing ([2019591](https://github.com/ixartz/Next-js-Boilerplate/commit/20195919d8a07f4e3cc0b7884e7d972de2935a94))
* create checkly config with a random working test ([32255b0](https://github.com/ixartz/Next-js-Boilerplate/commit/32255b0770ec5be84e9fd3321154329c556aedee))
* remove eslint rule customization in VSCode and use min(1) instead of nonempty (deprecated) ([9982a2d](https://github.com/ixartz/Next-js-Boilerplate/commit/9982a2d94fe7854eefaa754e9f41cf4735a81c86))
* update package-lock.json to fix CI ([1fff7ef](https://github.com/ixartz/Next-js-Boilerplate/commit/1fff7efe7295a9ee750b9f05af1a670db7bda733))

# [3.25.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.24.0...v3.25.0) (2023-10-30)


### Features

* release a new version for Next.js 14 and update README file ([4be2485](https://github.com/ixartz/Next-js-Boilerplate/commit/4be24850b75b9ca896e9e5546b8357745b128398))

# [3.24.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.23.0...v3.24.0) (2023-10-24)


### Features

* make guestbook endpoint avaiable to signed out users ([10b4d81](https://github.com/ixartz/Next-js-Boilerplate/commit/10b4d814d477e3475569537b1ef01a86b68c9a43))

# [3.23.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.22.0...v3.23.0) (2023-10-12)


### Features

* add playwright extension in VSCode ([956d1a8](https://github.com/ixartz/Next-js-Boilerplate/commit/956d1a8ec70c6a1214c72a115f0378507aa1b436))
* add playwright plugin in ESLint ([b2486f1](https://github.com/ixartz/Next-js-Boilerplate/commit/b2486f1b1090c458115b873ddc5bffa8ecaf8412))
* add Playwright: config, first test and dependency ([f054ea2](https://github.com/ixartz/Next-js-Boilerplate/commit/f054ea264bab3376ab7f86b0a0fdc1b6a4e98350))
* remove all Cypress related files and configurations ([9fe8271](https://github.com/ixartz/Next-js-Boilerplate/commit/9fe8271e667b819910702803f5489e99766fe9ff))


### Reverts

* the failing test in Navigation spec ([28996f5](https://github.com/ixartz/Next-js-Boilerplate/commit/28996f59d2f02562761609348000d55776365f7e))

# [3.22.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.21.0...v3.22.0) (2023-10-02)


### Features

* remove basePath in Next.js configuration ([7f9a0e6](https://github.com/ixartz/Next-js-Boilerplate/commit/7f9a0e6ed42aec7d9ec500531b7f519dc11a5ec9))
* remove no-img-element and use Next.js built-in <Image component ([383e3a3](https://github.com/ixartz/Next-js-Boilerplate/commit/383e3a38b98d92d59184275864888e9693a1cff7))

# [3.21.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.20.0...v3.21.0) (2023-09-25)


### Features

* update next.js to version 13.5 ([aa43f14](https://github.com/ixartz/Next-js-Boilerplate/commit/aa43f14bea16fcb4fd786d9fe74ae37bf29b5b5f))
* update storybook to the latest version and install playwright ([2079a34](https://github.com/ixartz/Next-js-Boilerplate/commit/2079a347bbbd08d2ffbc4ea96995eaaf66602373))

# [3.20.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.19.0...v3.20.0) (2023-09-01)


### Features

* make updatedAt working when the user update a message and rename the attribute to updatedAt ([4032bc0](https://github.com/ixartz/Next-js-Boilerplate/commit/4032bc0123660c20a72aa52ed611ea1f150e54af))

# [3.19.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.18.0...v3.19.0) (2023-08-30)


### Features

* make it easier to try edge runtime in the app router ([3f5fd58](https://github.com/ixartz/Next-js-Boilerplate/commit/3f5fd58d0980fdd35860d31d29b8f18e9c93b53f))

# [3.18.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.17.0...v3.18.0) (2023-08-27)


### Features

* remove MIGRATE_DB which not needed anymore with process.env.NODE_ENV ([3fe81ae](https://github.com/ixartz/Next-js-Boilerplate/commit/3fe81ae98440b33ce18cee80265fdaa54e242184))

# [3.17.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.16.0...v3.17.0) (2023-08-27)


### Features

* add schema in drizzle instance and disable migrate in production ([5e26798](https://github.com/ixartz/Next-js-Boilerplate/commit/5e2679877a3da64a4cabfc22fdaacebd6abe6789))
* add script to migrate before building next.js ([220d05e](https://github.com/ixartz/Next-js-Boilerplate/commit/220d05e5d028852ccc533ca60b187bc3d47c5d73))
* do not run db migration when building on GitHub actions ([964cfa1](https://github.com/ixartz/Next-js-Boilerplate/commit/964cfa1a02fb41b387c851f0b2293c673859d60a))
* reload guestbook page when deployed on production ([c2e91b2](https://github.com/ixartz/Next-js-Boilerplate/commit/c2e91b2df944b0659d1768d2a7cc54a494d7d5c1))
* replace dotenv/config by dotenv-cli in db:studio NPM scripts ([f7f8743](https://github.com/ixartz/Next-js-Boilerplate/commit/f7f87435a984fa9d0407a7602d1ef38563c5e8d0))

# [3.16.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.15.0...v3.16.0) (2023-08-24)


### Bug Fixes

* build issues with prerendering ([ff117b9](https://github.com/ixartz/Next-js-Boilerplate/commit/ff117b9750e3609cebbf53a5dea01f0fbf94f865))


### Features

* add .env file for production ([58ed68c](https://github.com/ixartz/Next-js-Boilerplate/commit/58ed68cc2eefb1274e6e268c40a3ed8cd7d936be))
* add authToken support for production Turso ([26b8276](https://github.com/ixartz/Next-js-Boilerplate/commit/26b827618199f1dd73453c7ec021c13a4aaf5f7b))
* add await for migrate function ([96793f0](https://github.com/ixartz/Next-js-Boilerplate/commit/96793f0adedb10f802dfb46ff96b85f14c78ebf3))
* add database powered by Turso in guestbook page ([64073a5](https://github.com/ixartz/Next-js-Boilerplate/commit/64073a5babb38327a23fd3ae2b354152306e7977))
* add db file in gitignore ([cd45e09](https://github.com/ixartz/Next-js-Boilerplate/commit/cd45e0906cc79e87302ee6b88674089c5de059a3))
* add drizzle config and database schema ([df30388](https://github.com/ixartz/Next-js-Boilerplate/commit/df30388002ead9121ffb764e1bd11a71550cbe06))
* add style for guestbook ([339154c](https://github.com/ixartz/Next-js-Boilerplate/commit/339154ccfdaf7e53aeefd12fe0e347c645be5163))
* add typesafe environment variables ([5a2cd78](https://github.com/ixartz/Next-js-Boilerplate/commit/5a2cd78aca2fc60e6c0d4861ff656e7ba2ac86c4))
* create guestbook should not accept empty username and email ([37e4408](https://github.com/ixartz/Next-js-Boilerplate/commit/37e4408f968b36332a0a8ae9a90c687eee7fb4a0))
* implement AddGuestbookForm to create new guestbook message ([d7b37e6](https://github.com/ixartz/Next-js-Boilerplate/commit/d7b37e63f65d528e599b14d64cbf3ac5b2d3feba))
* implement delete guestbook entry ([b7f823a](https://github.com/ixartz/Next-js-Boilerplate/commit/b7f823a83435856ac32aea90da8317926e5b2b8b))
* improve UI for AddGuestbookForm ([153abfc](https://github.com/ixartz/Next-js-Boilerplate/commit/153abfc0e2f10a5aa59e24af8f0ef76667041578))
* insert in guestbook and retrieve all guestbooks ([23ee408](https://github.com/ixartz/Next-js-Boilerplate/commit/23ee4086a8c2166bdd6fe82b1cb50cc286793bb3))
* make guestbook editable ([8ec1406](https://github.com/ixartz/Next-js-Boilerplate/commit/8ec14066a966c76b02bf5552ec2f4f348048a45c))
* remove notnull in schema.ts ([10f4943](https://github.com/ixartz/Next-js-Boilerplate/commit/10f49434999ba0a884a72e640c67dc955bf7eedd))
* rename from email to username ([52ab0e4](https://github.com/ixartz/Next-js-Boilerplate/commit/52ab0e4f86b20ace52cbb6ce421f85357c0dfa6e))
* replace new-router page by guestbook ([efc84e6](https://github.com/ixartz/Next-js-Boilerplate/commit/efc84e607d23981dba07b931ff078776aa9693b5))
* replace with a working URL for the database to avoid timeout ([fecd8a5](https://github.com/ixartz/Next-js-Boilerplate/commit/fecd8a5d66934af774fde12759f8079cabfb382b))
* update dotenv path to .env, the file was renamed ([bd9b2c9](https://github.com/ixartz/Next-js-Boilerplate/commit/bd9b2c9efd12a0b54125ac352c43aab9d31c7c99))
* use local SQLite file ([fe52801](https://github.com/ixartz/Next-js-Boilerplate/commit/fe528010cf2d867fcbbc53156ae7fa6c862a88f4))
* validate t3 env on build ([6d448ed](https://github.com/ixartz/Next-js-Boilerplate/commit/6d448ed0fdea51952c8bfeaf4ce948cf9365675c))

# [3.15.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.14.1...v3.15.0) (2023-08-10)


### Features

* add next.js middleware with Clerk ([2f4a1d3](https://github.com/ixartz/Next-js-Boilerplate/commit/2f4a1d3e394eb835b011a13289f156a91993d782))
* add sign in and sign up link in index page ([4489085](https://github.com/ixartz/Next-js-Boilerplate/commit/4489085e8deb0ae1836a3741657f8331af6294ca))
* add sign in and sign up page ([f021f71](https://github.com/ixartz/Next-js-Boilerplate/commit/f021f71f755e3af3cb789d0330ad2a0237ec600d))
* add sign out button in dashboard ([c663d1c](https://github.com/ixartz/Next-js-Boilerplate/commit/c663d1c4799869faf2a2c549669521409f192830))
* add user profile to manage account ([470731b](https://github.com/ixartz/Next-js-Boilerplate/commit/470731ba960dfdd0aa57f66affde28b0226d5d42))
* add user profile to manage account ([581efbe](https://github.com/ixartz/Next-js-Boilerplate/commit/581efbef51cf700f9bbe94f268ff99639f5e49da))
* implement hello component by display user email address ([7047985](https://github.com/ixartz/Next-js-Boilerplate/commit/7047985ffbce9a986e7308040928783395cf7b68))
* implement sign out button ([8588834](https://github.com/ixartz/Next-js-Boilerplate/commit/8588834b5f1a53c51835d7aba5a4c9f1230c1bf7))
* implement sign out button and redirect to sign in page when logging out ([45ed137](https://github.com/ixartz/Next-js-Boilerplate/commit/45ed137d5c4e292ac8329f0661cb38fc29812927))
* redirect to dashboard when the user is signed in for sign up and sign in page ([629a033](https://github.com/ixartz/Next-js-Boilerplate/commit/629a03363af310e5411fea4cb554b53e72701e7d))

## [3.14.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.14.0...v3.14.1) (2023-08-07)


### Bug Fixes

* resolve sourcemap error with Cypress and TypeScript 5 ([54a5100](https://github.com/ixartz/Next-js-Boilerplate/commit/54a51004d6e22860eb1c6aad4ff689fac46bd0b4))

# [3.14.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.13.0...v3.14.0) (2023-08-03)


### Features

* use Next.js custom TypeScript plugin ([915e193](https://github.com/ixartz/Next-js-Boilerplate/commit/915e193f8037d36e9779fe7464a4d6c1685b3a94))

# [3.13.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.12.0...v3.13.0) (2023-08-02)


### Features

* add app routed pages ([9cc79a0](https://github.com/ixartz/Next-js-Boilerplate/commit/9cc79a00647b0a4ce64f66da4a430ec2c4972367)), closes [#64](https://github.com/ixartz/Next-js-Boilerplate/issues/64)
* add sitemap support app router ([b82e566](https://github.com/ixartz/Next-js-Boilerplate/commit/b82e566fb43d63329ef4507870494e554dea0e6a))
* app router doesn't support next export, use output: export ([76aa9cd](https://github.com/ixartz/Next-js-Boilerplate/commit/76aa9cd0597ad06fd0f0160ad6119a25b87d3336))
* generate statically portfolio pages ([1f1bf31](https://github.com/ixartz/Next-js-Boilerplate/commit/1f1bf3143215ab19d19cd4f13e4048b0ee84073c))
* update test for new router page ([b695666](https://github.com/ixartz/Next-js-Boilerplate/commit/b695666fd41c9ddf1886e9b5e3c7cc43b616820c))

# [3.12.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.11.0...v3.12.0) (2023-07-13)


### Features

* format code to respect prettier ([48b6a49](https://github.com/ixartz/Next-js-Boilerplate/commit/48b6a49fd204083deb94b01aab70b52a42b9593f))
* resolve conflict between airbnb-hook and next/core-web-vitals about react hooks ([5e0be4f](https://github.com/ixartz/Next-js-Boilerplate/commit/5e0be4fd8c2f9acd895f0b9ce373af7d782d44df))
* update to the latest dependencies version ([d93fd83](https://github.com/ixartz/Next-js-Boilerplate/commit/d93fd83b6ab93360ddd8489afc8cfb05603e504c))


### Reverts

* use older TypeScript to avoid e2e compilation with sourcemap ([6377d2f](https://github.com/ixartz/Next-js-Boilerplate/commit/6377d2f2efc71384fba236427086b4e75f189328))

# [3.11.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.10.1...v3.11.0) (2023-06-07)


### Features

* update dependencies to the latest version ([b7609de](https://github.com/ixartz/Next-js-Boilerplate/commit/b7609dea1c8bd49f6ac05439740ea78894cd4a79))

## [3.10.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.10.0...v3.10.1) (2023-05-29)


### Bug Fixes

* added types ([b35ddc9](https://github.com/ixartz/Next-js-Boilerplate/commit/b35ddc91ecad81986432dce1ba84c302e6394a5b))

# [3.10.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.9.0...v3.10.0) (2023-04-26)


### Features

* add vscode yoavbls.pretty-ts-errors extension ([3588ce1](https://github.com/ixartz/Next-js-Boilerplate/commit/3588ce1dd366ebaa69f97551be58528d1ae38457))
* remove stories in the coverage from Jest ([d502869](https://github.com/ixartz/Next-js-Boilerplate/commit/d502869a08a0b1d9025a4ce582651c5353f29d59))
* use default airbnb instead of the base version ([5c05116](https://github.com/ixartz/Next-js-Boilerplate/commit/5c05116fb777aee09c1af7df6694e54403eaaccb))

# [3.9.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.8.2...v3.9.0) (2023-04-05)


### Features

* add storybook into project ([51f3748](https://github.com/ixartz/Next-js-Boilerplate/commit/51f3748c0cb6d9cd04cdb0d3b9d95a0f60851866))
* add tailwind css support in Storybook ([5e0d287](https://github.com/ixartz/Next-js-Boilerplate/commit/5e0d287cef8a898df8f1a98632a8703657282100))
* remove warning for no extreneous deps in stories ([b243d44](https://github.com/ixartz/Next-js-Boilerplate/commit/b243d441e4b75566e16f5fa64d26900267eb89f5))


### Reverts

* remove storybook addon-styling which is not needed ([e863fed](https://github.com/ixartz/Next-js-Boilerplate/commit/e863fedcbc5a1aaf808c295d80f8de95b6abd1f7))

## [3.8.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.8.1...v3.8.2) (2023-03-28)


### Bug Fixes

* error generated by eslint-plugin-cypress ([7562c6b](https://github.com/ixartz/Next-js-Boilerplate/commit/7562c6bddb31e6941aee7e4e2bbcdabf5be3bddf))

## [3.8.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.8.0...v3.8.1) (2023-03-16)


### Bug Fixes

* typo in Readme ([8f7c1b7](https://github.com/ixartz/Next-js-Boilerplate/commit/8f7c1b79a46406b04b90ed8a5fe5029b3c24ff8c))

# [3.8.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.7.0...v3.8.0) (2023-03-02)


### Features

* fix heading levels increase by one ([e712e60](https://github.com/ixartz/Next-js-Boilerplate/commit/e712e60402f04033673d93e464d7b3c46fff7dbe))

# [3.7.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.6.0...v3.7.0) (2023-02-05)


### Features

* improve accessibility ([aa0f0b1](https://github.com/ixartz/Next-js-Boilerplate/commit/aa0f0b12085e31f13574fc9f4349157102d4467b))


### Reverts

* add support for all Node.js 14+, too restrictive with only Node.js 18+ ([4e27540](https://github.com/ixartz/Next-js-Boilerplate/commit/4e27540f638d4767fb60b612519669ad6bf69367))
* downgrade semantic-release version to 19 ([26d5a6e](https://github.com/ixartz/Next-js-Boilerplate/commit/26d5a6ebe2fc4fe59fef40779e132ccf1f31c09f))

# [3.6.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.5.4...v3.6.0) (2022-12-03)


### Bug Fixes

* add npx before percy command line ([4824e98](https://github.com/ixartz/Next-js-Boilerplate/commit/4824e98a4d621684494fe2c7e8c3351551e52845))
* retrive PERCY_TOKEN and set token for percy cli ([afe00f2](https://github.com/ixartz/Next-js-Boilerplate/commit/afe00f2e47b5dbc5fb701dd2e46756f4b7e498fd))
* wait until the link rendered instead a wrong heading tag ([e38655b](https://github.com/ixartz/Next-js-Boilerplate/commit/e38655b853b39fdcb9bccd3a84e99dd5caa1681d))


### Features

* add visual testing with Percy ([b0a39f5](https://github.com/ixartz/Next-js-Boilerplate/commit/b0a39f58e1bd0934158b0bab8ab7e4c9215e88f0))

## [3.5.4](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.5.3...v3.5.4) (2022-12-03)


### Bug Fixes

* change matching regex for Cypress files ([861d545](https://github.com/ixartz/Next-js-Boilerplate/commit/861d54596b61b7706cfbb681df334d73b34a378e))

## [3.5.3](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.5.2...v3.5.3) (2022-12-02)


### Bug Fixes

* resolve merge conflict ([276f57a](https://github.com/ixartz/Next-js-Boilerplate/commit/276f57aeb0d4a346f8e19ad81ce4703458d9f41c))

## [3.5.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.5.1...v3.5.2) (2022-12-02)


### Bug Fixes

* use npx npm-check-updates ([e530193](https://github.com/ixartz/Next-js-Boilerplate/commit/e5301939a5ff98c598899ff49bee1ad351759292))

## [3.5.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.5.0...v3.5.1) (2022-12-02)


### Bug Fixes

* add steps in update-deps.yml file, syntax error ([b5de445](https://github.com/ixartz/Next-js-Boilerplate/commit/b5de445f1f927a5a7c2b0c85746b8fd07629cb55))

# [3.5.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.4.0...v3.5.0) (2022-12-02)


### Features

* add auto-update GitHub Actions ([364168f](https://github.com/ixartz/Next-js-Boilerplate/commit/364168f3407c7cdd21da7cd1de6d9d930f89d99a))

# [3.4.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.3.0...v3.4.0) (2022-12-02)


### Features

* automatically format the whole codebase with npm run format ([9299209](https://github.com/ixartz/Next-js-Boilerplate/commit/92992096ede4d2b3e77c3e0c96b75e5e6b84067d))
* update footer message and comment ([4f74176](https://github.com/ixartz/Next-js-Boilerplate/commit/4f74176b05528666fd8b92a8becdc7e3c2f0db4a))

# [3.3.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.2.4...v3.3.0) (2022-11-22)


### Features

* change 'powered by' text to 'built' with ([fe0a29f](https://github.com/ixartz/Next-js-Boilerplate/commit/fe0a29f8fbab14c7e8c8e98a75ce488ac157e509))

## [3.2.4](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.2.3...v3.2.4) (2022-11-20)


### Bug Fixes

* update README file for next-sitemap ([9496217](https://github.com/ixartz/Next-js-Boilerplate/commit/94962171a35a07e84319374500f28a76f264a266))

## [3.2.3](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.2.2...v3.2.3) (2022-11-20)


### Bug Fixes

* add sitemap file in gitignore, it shouldn't commit to git ([344b731](https://github.com/ixartz/Next-js-Boilerplate/commit/344b7312df2f7e12e642a6346ef05ad9a7ca766c))

## [3.2.2](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.2.1...v3.2.2) (2022-11-20)


### Bug Fixes

* rename from mjs to js next-sitemap file ([7d450ff](https://github.com/ixartz/Next-js-Boilerplate/commit/7d450ffce77f0be4c533cb1aab757f7fb1f13596))

## [3.2.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.2.0...v3.2.1) (2022-11-20)


### Bug Fixes

* code styling in blog component pages ([f4a55c4](https://github.com/ixartz/Next-js-Boilerplate/commit/f4a55c4234fc03ed719859c12f13bffabd120c6d))
* move getStaticPaths at the top of blog page ([83892ea](https://github.com/ixartz/Next-js-Boilerplate/commit/83892ea865459f59da824c9358fbf4ccea6475e6))
* remove generated files by next-sitemap ([c5d93bf](https://github.com/ixartz/Next-js-Boilerplate/commit/c5d93bf9fe67a6737b536edf4d50d56cd4c8af2c))

# [3.2.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.1.0...v3.2.0) (2022-11-19)


### Features

* run github release only on completed CI workflow ([dd4de76](https://github.com/ixartz/Next-js-Boilerplate/commit/dd4de76b6ea013190a6ea18d69eb3764e1b915f9))

# [3.1.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v3.0.0...v3.1.0) (2022-11-19)


### Bug Fixes

* just rebuild sitemap ([831bae9](https://github.com/ixartz/Next-js-Boilerplate/commit/831bae93831eb5c4f259c4a0fa9ec3012ede8927))


### Features

* add blog page ([89c4ec7](https://github.com/ixartz/Next-js-Boilerplate/commit/89c4ec79db48f4ae09af3e8ddb3ce5a980ed8ee6))
* add sitemap.xml and robots.txt from build ([545d133](https://github.com/ixartz/Next-js-Boilerplate/commit/545d133decee4f7d42c228049ef3bde2b9a94b0a))
* disable Husky for release ([f20c595](https://github.com/ixartz/Next-js-Boilerplate/commit/f20c5951e018c99421e833eef6ce14bd9632838f))
* rename from master to main ([10920ec](https://github.com/ixartz/Next-js-Boilerplate/commit/10920ece4892ca73639388116af59fdd3e077d5f))
* update TypeScript to 4.9.x ([471dc70](https://github.com/ixartz/Next-js-Boilerplate/commit/471dc70306c69ecb524af40aa76403daa83597e2))

# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

## [3.0.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v2.1.1...v3.0.0) (2022-10-26)


### ⚠ BREAKING CHANGES

* update to Next.js 13 and Tailwind CSS 3.2

### Features

* add commit script in package.json ([8f4719e](https://github.com/ixartz/Next-js-Boilerplate/commit/8f4719ec550ab0dbffa93ca1d278aa9e370a773a))


### Bug Fixes

* Eslint comment update ([8baa5d1](https://github.com/ixartz/Next-js-Boilerplate/commit/8baa5d160734a3cadb419534509cc6edaac57456))


* update to Next.js 13 and Tailwind CSS 3.2 ([fc9f2c1](https://github.com/ixartz/Next-js-Boilerplate/commit/fc9f2c1cf914c15b36cdf881306d20b405a259e8))

### [2.1.1](https://github.com/ixartz/Next-js-Boilerplate/compare/v2.1.0...v2.1.1) (2022-09-08)

## [2.1.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v2.0.0...v2.1.0) (2022-07-08)


### Features

* add cypress and cypress eslint plugin ([5657ee6](https://github.com/ixartz/Next-js-Boilerplate/commit/5657ee6dab03b11020bb2ce80083669785edd6ce))

## [2.0.0](https://github.com/ixartz/Next-js-Boilerplate/compare/v1.1.0...v2.0.0) (2022-07-03)


### ⚠ BREAKING CHANGES

* add Jest and React testing library
* to React 18

### Features

* add coverage for vscode-jest and configure jest autoRun ([ad8a030](https://github.com/ixartz/Next-js-Boilerplate/commit/ad8a03019010577bfb8e8ed850e8d45ca274dbe9))
* add Jest and React testing library ([e182b87](https://github.com/ixartz/Next-js-Boilerplate/commit/e182b87db5943abbe706568e77285e1eb6bddf5e))
* add TypeScript support for Tailwind CSS configuration ([41f1918](https://github.com/ixartz/Next-js-Boilerplate/commit/41f19189655abe3941485363e057812a5fcd6c02))
* add vscode jest extension ([49ab935](https://github.com/ixartz/Next-js-Boilerplate/commit/49ab935a03f5a9d1074a155331107737fd7dad13))


* to React 18 ([c78f215](https://github.com/ixartz/Next-js-Boilerplate/commit/c78f2152a978a39b2c6d381427df8e8ad2a30099))

## 1.1.0 (2022-04-25)


### Features

* add commitlint with config-conventional ([97a9ac7](https://github.com/ixartz/Next-js-Boilerplate/commit/97a9ac7dbbca3f8d4fad22a9e4a481c029cd2cb5))


### Bug Fixes

* add missing files for commitzen ([018ba8b](https://github.com/ixartz/Next-js-Boilerplate/commit/018ba8bde81b0f6cc60230fe4668b149ac3b2e6a))
* update package-lock.json ([fba016d](https://github.com/ixartz/Next-js-Boilerplate/commit/fba016dec202d5748e30804b1bf50e30c00ef120))

================
File: frontend/checkly.config.ts
================
import { defineConfig } from 'checkly';
import { EmailAlertChannel, Frequency } from 'checkly/constructs';

const sendDefaults = {
  sendFailure: true,
  sendRecovery: true,
  sendDegraded: true,
};

// FIXME: Add your production URL
const productionURL = 'https://demo.nextjs-boilerplate.com';

const emailChannel = new EmailAlertChannel('email-channel-1', {
  // FIXME: add your own email address, Checkly will send you an email notification if a check fails
  address: 'contact@creativedesignsguru.com',
  ...sendDefaults,
});

export const config = defineConfig({
  // FIXME: Add your own project name, logical ID, and repository URL
  projectName: 'Next.js Boilerplate',
  logicalId: 'nextjs-boilerplate',
  repoUrl: 'https://github.com/ixartz/Next-js-Boilerplate',
  checks: {
    locations: ['us-east-1', 'eu-west-1'],
    tags: ['website'],
    runtimeId: '2024.02',
    browserChecks: {
      frequency: Frequency.EVERY_24H,
      testMatch: '**/tests/e2e/**/*.check.e2e.ts',
      alertChannels: [emailChannel],
    },
    playwrightConfig: {
      use: {
        baseURL: process.env.ENVIRONMENT_URL || productionURL,
        extraHTTPHeaders: {
          'x-vercel-protection-bypass': process.env.VERCEL_BYPASS_TOKEN,
        },
      },
    },
  },
  cli: {
    runLocation: 'eu-west-1',
    reporters: ['list'],
  },
});

export default config;

================
File: frontend/codecov.yml
================
coverage:
  status:
    patch: off

================
File: frontend/commitlint.config.ts
================
import type { UserConfig } from '@commitlint/types';

const Configuration: UserConfig = {
  extends: ['@commitlint/config-conventional'],
};

export default Configuration;

================
File: frontend/crowdin.yml
================
#
# Your Crowdin credentials
#
# No need modify CROWDIN_PROJECT_ID and CROWDIN_PERSONAL_TOKEN, you can set them in GitHub Actions secrets
project_id_env: CROWDIN_PROJECT_ID
api_token_env: CROWDIN_PERSONAL_TOKEN
base_path: .
base_url: 'https://api.crowdin.com' # https://{organization-name}.crowdin.com for Crowdin Enterprise

#
# Choose file structure in Crowdin
# e.g. true or false
#
preserve_hierarchy: true

#
# Files configuration
#
files:
  - source: /src/locales/en.json

    #
    # Where translations will be placed
    # e.g. "/resources/%two_letters_code%/%original_file_name%"
    #
    translation: '/src/locales/%two_letters_code%.json'

    #
    # File type
    # e.g. "json"
    #
    type: json

================
File: frontend/drizzle.config.ts
================
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  out: './migrations',
  schema: './src/models/Schema.ts',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL ?? '',
  },
  verbose: true,
  strict: true,
});

================
File: frontend/eslint.config.mjs
================
import antfu from '@antfu/eslint-config';
import nextPlugin from '@next/eslint-plugin-next';
import jestDom from 'eslint-plugin-jest-dom';
import jsxA11y from 'eslint-plugin-jsx-a11y';
import playwright from 'eslint-plugin-playwright';
import simpleImportSort from 'eslint-plugin-simple-import-sort';
import tailwind from 'eslint-plugin-tailwindcss';
import testingLibrary from 'eslint-plugin-testing-library';

export default antfu({
  react: true,
  typescript: true,

  lessOpinionated: true,
  isInEditor: false,

  stylistic: {
    semi: true,
  },

  formatters: {
    css: true,
  },

  ignores: [
    'migrations/**/*',
    'next-env.d.ts',
  ],
}, ...tailwind.configs['flat/recommended'], jsxA11y.flatConfigs.recommended, {
  plugins: {
    '@next/next': nextPlugin,
  },
  rules: {
    ...nextPlugin.configs.recommended.rules,
    ...nextPlugin.configs['core-web-vitals'].rules,
  },
}, {
  plugins: {
    'simple-import-sort': simpleImportSort,
  },
  rules: {
    'simple-import-sort/imports': 'error',
    'simple-import-sort/exports': 'error',
  },
}, {
  files: [
    '**/*.test.ts?(x)',
  ],
  ...testingLibrary.configs['flat/react'],
  ...jestDom.configs['flat/recommended'],
}, {
  files: [
    '**/*.spec.ts',
    '**/*.e2e.ts',
  ],
  ...playwright.configs['flat/recommended'],
}, {
  rules: {
    'import/order': 'off', // Avoid conflicts with `simple-import-sort` plugin
    'sort-imports': 'off', // Avoid conflicts with `simple-import-sort` plugin
    'style/brace-style': ['error', '1tbs'], // Use the default brace style
    'ts/consistent-type-definitions': ['error', 'type'], // Use `type` instead of `interface`
    'react/prefer-destructuring-assignment': 'off', // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
    'node/prefer-global/process': 'off', // Allow using `process.env`
    'test/padding-around-all': 'error', // Add padding in test files
    'test/prefer-lowercase-title': 'off', // Allow using uppercase titles in test titles
  },
});

================
File: frontend/LICENSE
================
MIT License

Copyright (c) 2024 Remi W.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: frontend/lint-staged.config.js
================
module.exports = {
  '*': ['eslint --fix --no-warn-ignored'],
  '**/*.ts?(x)': () => 'npm run check-types',
};

================
File: frontend/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

================
File: frontend/next.config.mjs
================
import { fileURLToPath } from 'node:url';

import withBundleAnalyzer from '@next/bundle-analyzer';
import { withSentryConfig } from '@sentry/nextjs';
import createJiti from 'jiti';
import withNextIntl from 'next-intl/plugin';

const jiti = createJiti(fileURLToPath(import.meta.url));

jiti('./src/libs/Env');

const withNextIntlConfig = withNextIntl('./src/libs/i18n.ts');

const bundleAnalyzer = withBundleAnalyzer({
  enabled: process.env.ANALYZE === 'true',
});

/** @type {import('next').NextConfig} */
export default withSentryConfig(
  bundleAnalyzer(
    withNextIntlConfig({
      eslint: {
        dirs: ['.'],
      },
      poweredByHeader: false,
      reactStrictMode: true,
      experimental: {
        serverComponentsExternalPackages: ['@electric-sql/pglite'],
      },
    }),
  ),
  {
    // For all available options, see:
    // https://github.com/getsentry/sentry-webpack-plugin#options
    // FIXME: Add your Sentry organization and project names
    org: 'nextjs-boilerplate-org',
    project: 'nextjs-boilerplate',

    // Only print logs for uploading source maps in CI
    silent: !process.env.CI,

    // For all available options, see:
    // https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/

    // Upload a larger set of source maps for prettier stack traces (increases build time)
    widenClientFileUpload: true,

    // Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.
    // This can increase your server load as well as your hosting bill.
    // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-
    // side errors will fail.
    tunnelRoute: '/monitoring',

    // Hides source maps from generated client bundles
    hideSourceMaps: true,

    // Automatically tree-shake Sentry logger statements to reduce bundle size
    disableLogger: true,

    // Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)
    // See the following for more information:
    // https://docs.sentry.io/product/crons/
    // https://vercel.com/docs/cron-jobs
    automaticVercelMonitors: true,

    // Disable Sentry telemetry
    telemetry: false,
  },
);

================
File: frontend/package.json
================
{
  "name": "next-js-boilerplate",
  "version": "3.58.2",
  "author": "Ixartz (https://github.com/ixartz)",
  "scripts": {
    "dev:spotlight": "spotlight-sidecar",
    "dev:next": "next dev",
    "dev": "run-p dev:*",
    "build": "next build",
    "start": "next start",
    "build-stats": "cross-env ANALYZE=true npm run build",
    "clean": "rimraf .next out coverage",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "check-types": "tsc --noEmit --pretty",
    "test": "vitest run",
    "test:e2e": "playwright test",
    "commit": "cz",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "dotenv -c production -- drizzle-kit migrate",
    "db:studio": "dotenv -c production -- drizzle-kit studio",
    "storybook": "storybook dev -p 6006",
    "storybook:build": "storybook build",
    "storybook:serve": "http-server storybook-static --port 6006 --silent",
    "serve-storybook": "run-s storybook:*",
    "test-storybook:ci": "start-server-and-test serve-storybook http://127.0.0.1:6006 test-storybook",
    "prepare": "husky"
  },
  "dependencies": {
    "@clerk/localizations": "^3.2.1",
    "@clerk/nextjs": "^5.7.3",
    "@electric-sql/pglite": "^0.2.12",
    "@hookform/resolvers": "^3.9.0",
    "@logtail/pino": "^0.5.2",
    "@sentry/nextjs": "^8.34.0",
    "@spotlightjs/spotlight": "^2.5.0",
    "@t3-oss/env-nextjs": "^0.11.1",
    "drizzle-orm": "^0.35.1",
    "next": "^14.2.15",
    "next-intl": "^3.21.1",
    "pg": "^8.13.0",
    "pino": "^9.5.0",
    "pino-pretty": "^11.3.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "sharp": "^0.33.5",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@antfu/eslint-config": "^2.27.3",
    "@commitlint/cli": "^19.5.0",
    "@commitlint/config-conventional": "^19.5.0",
    "@commitlint/cz-commitlint": "^19.5.0",
    "@eslint-react/eslint-plugin": "^1.15.0",
    "@faker-js/faker": "^9.0.3",
    "@next/bundle-analyzer": "^14.2.15",
    "@next/eslint-plugin-next": "^14.2.15",
    "@percy/cli": "1.30.1",
    "@percy/playwright": "^1.0.6",
    "@playwright/test": "^1.48.1",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/git": "^10.0.1",
    "@storybook/addon-essentials": "^8.3.5",
    "@storybook/addon-interactions": "^8.3.5",
    "@storybook/addon-links": "^8.3.5",
    "@storybook/addon-onboarding": "^8.3.5",
    "@storybook/blocks": "^8.3.5",
    "@storybook/nextjs": "^8.3.5",
    "@storybook/react": "^8.3.5",
    "@storybook/test": "^8.3.5",
    "@storybook/test-runner": "^0.19.1",
    "@testing-library/jest-dom": "^6.6.1",
    "@testing-library/react": "^16.0.1",
    "@types/node": "^22.7.6",
    "@types/pg": "^8.11.10",
    "@types/react": "^18.3.11",
    "@vitejs/plugin-react": "^4.3.2",
    "@vitest/coverage-v8": "^2.1.3",
    "@vitest/expect": "^2.1.3",
    "autoprefixer": "^10.4.20",
    "checkly": "^4.9.0",
    "commitizen": "^4.3.1",
    "cross-env": "^7.0.3",
    "cssnano": "^7.0.6",
    "dotenv-cli": "^7.4.2",
    "drizzle-kit": "^0.26.2",
    "eslint": "^8.57.1",
    "eslint-plugin-format": "^0.1.2",
    "eslint-plugin-jest-dom": "^5.4.0",
    "eslint-plugin-jsx-a11y": "^6.10.0",
    "eslint-plugin-playwright": "^1.7.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.12",
    "eslint-plugin-simple-import-sort": "^12.1.1",
    "eslint-plugin-tailwindcss": "^3.17.5",
    "eslint-plugin-testing-library": "^6.3.0",
    "http-server": "^14.1.1",
    "husky": "^9.1.6",
    "jiti": "^1.21.6",
    "jsdom": "^25.0.1",
    "lint-staged": "^15.2.10",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.47",
    "rimraf": "^6.0.1",
    "semantic-release": "^24.1.2",
    "start-server-and-test": "^2.0.8",
    "storybook": "^8.3.5",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.6.3",
    "vite-tsconfig-paths": "^5.0.1",
    "vitest": "^2.1.3",
    "vitest-fail-on-console": "^0.7.1"
  },
  "config": {
    "commitizen": {
      "path": "@commitlint/cz-commitlint"
    }
  },
  "release": {
    "branches": [
      "main"
    ],
    "plugins": [
      [
        "@semantic-release/commit-analyzer",
        {
          "preset": "conventionalcommits"
        }
      ],
      "@semantic-release/release-notes-generator",
      "@semantic-release/changelog",
      [
        "@semantic-release/npm",
        {
          "npmPublish": false
        }
      ],
      "@semantic-release/git",
      "@semantic-release/github"
    ]
  }
}

================
File: frontend/playwright.config.ts
================
import { defineConfig, devices } from '@playwright/test';

// Use process.env.PORT by default and fallback to port 3000
const PORT = process.env.PORT || 3000;

// Set webServer.url and use.baseURL with the location of the WebServer respecting the correct set port
const baseURL = `http://localhost:${PORT}`;

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './tests',
  // Look for files with the .spec.js or .e2e.js extension
  testMatch: '*.@(spec|e2e).?(c|m)[jt]s?(x)',
  // Timeout per test
  timeout: 30 * 1000,
  // Fail the build on CI if you accidentally left test.only in the source code.
  forbidOnly: !!process.env.CI,
  // Reporter to use. See https://playwright.dev/docs/test-reporters
  reporter: process.env.CI ? 'github' : 'list',

  expect: {
    // Set timeout for async expect matchers
    timeout: 10 * 1000,
  },

  // Run your local dev server before starting the tests:
  // https://playwright.dev/docs/test-advanced#launching-a-development-web-server-during-the-tests
  webServer: {
    command: process.env.CI ? 'npm run start' : 'npm run dev:next',
    url: baseURL,
    timeout: 2 * 60 * 1000,
    reuseExistingServer: !process.env.CI,
  },

  // Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions.
  use: {
    // Use baseURL so to make navigations relative.
    // More information: https://playwright.dev/docs/api/class-testoptions#test-options-base-url
    baseURL,

    // Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer
    trace: process.env.CI ? 'retain-on-failure' : undefined,

    // Record videos when retrying the failed test.
    video: process.env.CI ? 'retain-on-failure' : undefined,
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    ...(process.env.CI
      ? [
          {
            name: 'firefox',
            use: { ...devices['Desktop Firefox'] },
          },
        ]
      : []),
  ],
});

================
File: frontend/postcss.config.js
================
// Please do not use the array form (like ['tailwindcss', 'postcss-preset-env'])
// it will create an unexpected error: Invalid PostCSS Plugin found: [0]

/** @type {import('postcss-load-config').Config} */
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
    ...(process.env.NODE_ENV === 'production' ? { cssnano: {} } : {}),
  },
};

================
File: frontend/README.md
================
# Boilerplate and Starter for Next.js 14+, Tailwind CSS 3.4, and TypeScript.

<p align="center">
  <a href="https://demo.nextjs-boilerplate.com"><img height="300" src="public/assets/images/nextjs-starter-banner.png?raw=true" alt="Next js starter banner"></a>
</p>

🚀 Boilerplate and Starter for Next.js with App Router, Tailwind CSS, and TypeScript ⚡️ Prioritizing developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, Vitest (replacing Jest), Testing Library, Playwright, Commitlint, VSCode, Tailwind CSS, Authentication with [Clerk](https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate), Database with DrizzleORM (PostgreSQL, SQLite, and MySQL), Error Monitoring with [Sentry](https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo), Logging with Pino.js and Log Management, Monitoring as Code, Storybook, Multi-language (i18n), and more. Ready for Next.js 15.

Clone this project and use it to create your own Next.js project. You can check out the live demo at [Next.js Boilerplate](https://demo.nextjs-boilerplate.com), which includes a working authentication system.

## Sponsors

<table width="100%">
  <tr height="187px">
    <td align="center" width="33%">
      <a href="https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2">
          <source media="(prefers-color-scheme: light)" srcset="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60">
          <img alt="Clerk – Authentication & User Management for Next.js" src="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://l.crowdin.com/next-js">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/crowdin-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/crowdin-dark.png?raw=true">
          <img alt="Crowdin" src="public/assets/images/crowdin-dark.png?raw=true">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/sentry-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/sentry-dark.png?raw=true">
          <img alt="Sentry" src="public/assets/images/sentry-dark.png?raw=true">
        </picture>
      </a>
      <a href="https://about.codecov.io/codecov-free-trial/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/codecov-white.svg?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/codecov-dark.svg?raw=true">
          <img alt="Codecov" src="public/assets/images/codecov-dark.svg?raw=true">
        </picture>
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" width="33%">
      <a href="https://posthog.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="https://posthog.com/brand/posthog-logo-white.svg">
          <source media="(prefers-color-scheme: light)" srcset="https://posthog.com/brand/posthog-logo.svg">
          <img alt="PostHog" src="https://posthog.com/brand/posthog-logo.svg">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/better-stack-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/better-stack-dark.png?raw=true">
          <img alt="Better Stack" src="public/assets/images/better-stack-dark.png?raw=true">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/checkly-logo-dark.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/checkly-logo-light.png?raw=true">
          <img alt="Checkly" src="public/assets/images/checkly-logo-light.png?raw=true">
        </picture>
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" style=width="33%">
      <a href="https://nextjs-boilerplate.com/pro-saas-starter-kit">
        <img src="public/assets/images/nextjs-boilerplate-saas.png?raw=true" alt="Next.js SaaS Boilerplate with React" />
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" width="33%">
      <a href="mailto:contact@creativedesignsguru.com">
        Add your logo here
      </a>
    </td>
  </tr>
</table>

### Demo

**Live demo: [Next.js Boilerplate](https://demo.nextjs-boilerplate.com)**

| Sign Up | Sign In |
| --- | --- |
| [![Next.js Boilerplate SaaS Sign Up](public/assets/images/nextjs-boilerplate-sign-in.png)](https://demo.nextjs-boilerplate.com/sign-up) | [![Next.js Boilerplate SaaS Sign In](public/assets/images/nextjs-boilerplate-sign-in.png)](https://demo.nextjs-boilerplate.com/sign-in) |

### Features

Developer experience first, extremely flexible code structure and only keep what you need:

- ⚡ [Next.js](https://nextjs.org) with App Router support
- 🔥 Type checking [TypeScript](https://www.typescriptlang.org)
- 💎 Integrate with [Tailwind CSS](https://tailwindcss.com)
- ✅ Strict Mode for TypeScript and React 18
- 🔒 Authentication with [Clerk](https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate): Sign up, Sign in, Sign out, Forgot password, Reset password, and more.
- 👤 Passwordless Authentication with Magic Links, Multi-Factor Auth (MFA), Social Auth (Google, Facebook, Twitter, GitHub, Apple, and more), Passwordless login with Passkeys, User Impersonation
- 📦 Type-safe ORM with DrizzleORM, compatible with PostgreSQL, SQLite, and MySQL
- 💽 Offline and local development database with PGlite
- 🌐 Multi-language (i18n) with [next-intl](https://next-intl-docs.vercel.app/) and [Crowdin](https://l.crowdin.com/next-js)
- ♻️ Type-safe environment variables with T3 Env
- ⌨️ Form handling with React Hook Form
- 🔴 Validation library with Zod
- 📏 Linter with [ESLint](https://eslint.org) (default Next.js, Next.js Core Web Vitals, Tailwind CSS and Antfu configuration)
- 💖 Code Formatter with [Prettier](https://prettier.io)
- 🦊 Husky for Git Hooks
- 🚫 Lint-staged for running linters on Git staged files
- 🚓 Lint git commit with Commitlint
- 📓 Write standard compliant commit messages with Commitizen
- 🦺 Unit Testing with Vitest and React Testing Library
- 🧪 Integration and E2E Testing with Playwright
- 👷 Run tests on pull request with GitHub Actions
- 🎉 Storybook for UI development
- 🚨 Error Monitoring with [Sentry](https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo)
- ☂️ Code coverage with [Codecov](https://about.codecov.io/codecov-free-trial/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo)
- 📝 Logging with Pino.js and Log Management with [Better Stack](https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate)
- 🖥️ Monitoring as Code with [Checkly](https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate)
- 🎁 Automatic changelog generation with Semantic Release
- 🔍 Visual testing with Percy (Optional)
- 💡 Absolute Imports using `@` prefix
- 🗂 VSCode configuration: Debug, Settings, Tasks and Extensions
- 🤖 SEO metadata, JSON-LD and Open Graph tags
- 🗺️ Sitemap.xml and robots.txt
- ⌘ Database exploration with Drizzle Studio and CLI migration tool with Drizzle Kit
- ⚙️ [Bundler Analyzer](https://www.npmjs.com/package/@next/bundle-analyzer)
- 🌈 Include a FREE minimalist theme
- 💯 Maximize lighthouse score

Built-in feature from Next.js:

- ☕ Minify HTML & CSS
- 💨 Live reload
- ✅ Cache busting

### Philosophy

- Nothing is hidden from you, allowing you to make any necessary adjustments to suit your requirements and preferences.
- Dependencies are regularly updated on a monthly basis
- Start for free without upfront costs
- Easy to customize
- Minimal code
- Unstyled template
- SEO-friendly
- 🚀 Production-ready

### Requirements

- Node.js 20+ and npm

### Getting started

Run the following command on your local environment:

```shell
git clone --depth=1 https://github.com/ixartz/Next-js-Boilerplate.git my-project-name
cd my-project-name
npm install
```

For your information, all dependencies are updated every month.

Then, you can run the project locally in development mode with live reload by executing:

```shell
npm run dev
```

Open http://localhost:3000 with your favorite browser to see your project.

### Set up authentication

To get started, you will need to create a Clerk account at [Clerk.com](https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate) and create a new application in the Clerk Dashboard. Once you have done that, copy the `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY` and `CLERK_SECRET_KEY` values and add them to the `.env.local` file (not tracked by Git):

```shell
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_pub_key
CLERK_SECRET_KEY=your_clerk_secret_key
```

Now you have a fully functional authentication system with Next.js, including features such as sign up, sign in, sign out, forgot password, reset password, update profile, update password, update email, delete account, and more.

### Set up remote database

The project uses DrizzleORM, a type-safe ORM that is compatible with PostgreSQL, SQLite, and MySQL databases. By default, the project is configured to seamlessly work with PostgreSQL, and you have the flexibility to choose any PostgreSQL database provider of your choice.

### Translation (i18n) setup

For translation, the project uses `next-intl` combined with [Crowdin](https://l.crowdin.com/next-js). As a developer, you only need to take care of the English (or another default language) version. Translations for other languages are automatically generated and handled by Crowdin. You can use Crowdin to collaborate with your translation team or translate the messages yourself with the help of machine translation.

To set up translation (i18n), create an account at [Crowdin.com](https://l.crowdin.com/next-js) and create a new project. In the newly created project, you will be able to find the project ID. You will also need to create a new Personal Access Token by going to Account Settings > API. Then, in your GitHub Actions, you need to define the following environment variables: `CROWDIN_PROJECT_ID` and `CROWDIN_PERSONAL_TOKEN`.

After defining the environment variables in your GitHub Actions, your localization files will be synchronized with Crowdin every time you push a new commit to the `main` branch.

### Project structure

```shell
.
├── README.md                       # README file
├── .github                         # GitHub folder
├── .husky                          # Husky configuration
├── .storybook                      # Storybook folder
├── .vscode                         # VSCode configuration
├── migrations                      # Database migrations
├── public                          # Public assets folder
├── src
│   ├── app                         # Next JS App (App Router)
│   ├── components                  # React components
│   ├── libs                        # 3rd party libraries configuration
│   ├── locales                     # Locales folder (i18n messages)
│   ├── models                      # Database models
│   ├── styles                      # Styles folder
│   ├── templates                   # Templates folder
│   ├── types                       # Type definitions
│   ├── utils                       # Utilities folder
│   └── validations                 # Validation schemas
├── tests
│   ├── e2e                         # E2E tests, also includes Monitoring as Code
│   └── integration                 # Integration tests
├── tailwind.config.js              # Tailwind CSS configuration
└── tsconfig.json                   # TypeScript configuration
```

### Customization

You can easily configure Next js Boilerplate by searching the entire project for `FIXME:` to make quick customizations. Here are some of the most important files to customize:

- `public/apple-touch-icon.png`, `public/favicon.ico`, `public/favicon-16x16.png` and `public/favicon-32x32.png`: your website favicon
- `src/utils/AppConfig.ts`: configuration file
- `src/templates/BaseTemplate.tsx`: default theme
- `next.config.mjs`: Next.js configuration
- `.env`: default environment variables

You have full access to the source code for further customization. The provided code is just an example to help you start your project. The sky's the limit 🚀.

### Change database schema

To modify the database schema in the project, you can update the schema file located at `./src/models/Schema.ts`. This file defines the structure of your database tables using the Drizzle ORM library.

After making changes to the schema, generate a migration by running the following command:

```shell
npm run db:generate
```

This will create a migration file that reflects your schema changes. The migration is automatically applied during the next database interaction, so there is no need to run it manually or restart the Next.js server.

### Commit Message Format

The project follows the [Conventional Commits](https://www.conventionalcommits.org/) specification, meaning all commit messages must be formatted accordingly. To help you write commit messages, the project uses [Commitizen](https://github.com/commitizen/cz-cli), an interactive CLI that guides you through the commit process. To use it, run the following command:

```shell
npm run commit
```

One of the benefits of using Conventional Commits is the ability to automatically generate a `CHANGELOG` file. It also allows us to automatically determine the next version number based on the types of commits that are included in a release.

### Testing

All unit tests are located alongside the source code in the same directory, making them easier to find. The project uses Vitest and React Testing Library for unit testing. You can run the tests with the following command:

```shell
npm run test
```

### Integration & E2E Testing

The project uses Playwright for integration and end-to-end (E2E) testing. You can run the tests with the following commands:

```shell
npx playwright install # Only for the first time in a new environment
npm run test:e2e
```

In the local environment, visual testing is disabled, and the terminal will display the message `[percy] Percy is not running, disabling snapshots.`. By default, visual testing only runs in GitHub Actions.

### Enable Edge runtime (optional)

The App Router folder is compatible with the Edge runtime. You can enable it by adding the following lines `src/app/layouts.tsx`:

```tsx
export const runtime = 'edge';
```

For your information, the database migration is not compatible with the Edge runtime. So, you need to disable the automatic migration in `src/libs/DB.ts`:

```tsx
await migrate(db, { migrationsFolder: './migrations' });
```

After disabling it, you are required to run the migration manually with:

```shell
npm run db:migrate
```

You also require to run the command each time you want to update the database schema.

### Deploy to production

During the build process, database migrations are automatically executed, so there's no need to run them manually. However, you must define `DATABASE_URL` in your environment variables.

Then, you can generate a production build with:

```shell
$ npm run build
```

It generates an optimized production build of the boilerplate. To test the generated build, run:

```shell
$ npm run start
```

You also need to defined the environment variables `CLERK_SECRET_KEY` using your own key.

This command starts a local server using the production build. You can now open http://localhost:3000 in your preferred browser to see the result.

### Error Monitoring

The project uses [Sentry](https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo) to monitor errors. In the development environment, no additional setup is needed: Next.js Boilerplate is pre-configured to use Sentry and Spotlight (Sentry for Development). All errors will automatically be sent to your local Spotlight instance, allowing you to experience Sentry locally.

For production environment, you'll need to create a Sentry account and a new project. Then, in `next.config.mjs`, you need to update the `org` and `project` attributes in `withSentryConfig` function. Additionally, add your Sentry DSN to `sentry.client.config.ts`, `sentry.edge.config.ts` and `sentry.server.config.ts`.

### Code coverage

Next.js Boilerplate relies on [Codecov](https://about.codecov.io/codecov-free-trial/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo) for code coverage reporting solution. To enable Codecov, create a Codecov account and connect it to your GitHub account. Your repositories should appear on your Codecov dashboard. Select the desired repository and copy the token. In GitHub Actions, define the `CODECOV_TOKEN` environment variable and paste the token.

Make sure to create `CODECOV_TOKEN` as a GitHub Actions secret, do not paste it directly into your source code.

### Logging

The project uses Pino.js for logging. In the development environment, logs are displayed in the console by default.

For production, the project is already integrated with [Better Stack](https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate) to manage and query your logs using SQL. To use Better Stack, you need to create a [Better Stack](https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate) account and create a new source: go to your Better Stack Logs Dashboard > Sources > Connect source. Then, you need to give a name to your source and select Node.js as the platform.

After creating the source, you will be able to view and copy your source token. In your environment variables, paste the token into the `LOGTAIL_SOURCE_TOKEN` variable. Now, all logs will automatically be sent to and ingested by Better Stack.

### Checkly monitoring

The project uses [Checkly](https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate) to ensure that your production environment is always up and running. At regular intervals, Checkly runs the tests ending with `*.check.e2e.ts` extension and notifies you if any of the tests fail. Additionally, you have the flexibility to execute tests from multiple locations to ensure that your application is available worldwide.

To use Checkly, you must first create an account on [their website](https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate). After creating an account, generate a new API key in the Checkly Dashboard and set the `CHECKLY_API_KEY` environment variable in GitHub Actions. Additionally, you will need to define the `CHECKLY_ACCOUNT_ID`, which can also be found in your Checkly Dashboard under User Settings > General.

To complete the setup, update the `checkly.config.ts` file with your own email address and production URL.

### Useful commands

#### Bundle Analyzer

Next.js Boilerplate includes a built-in bundle analyzer. It can be used to analyze the size of your JavaScript bundles. To begin, run the following command:

```shell
npm run build-stats
```

By running the command, it'll automatically open a new browser window with the results.

#### Database Studio

The project is already configured with Drizzle Studio to explore the database. You can run the following command to open the database studio:

```shell
npm run db:studio
```

Then, you can open https://local.drizzle.studio with your favorite browser to explore your database.

### VSCode information (optional)

If you are VSCode user, you can have a better integration with VSCode by installing the suggested extension in `.vscode/extension.json`. The starter code comes up with Settings for a seamless integration with VSCode. The Debug configuration is also provided for frontend and backend debugging experience.

With the plugins installed in your VSCode, ESLint and Prettier can automatically fix the code and display errors. The same applies to testing: you can install the VSCode Vitest extension to automatically run your tests, and it also shows the code coverage in context.

Pro tips: if you need a project wide-type checking with TypeScript, you can run a build with <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> on Mac.

### Contributions

Everyone is welcome to contribute to this project. Feel free to open an issue if you have any questions or find a bug. Totally open to suggestions and improvements.

### License

Licensed under the MIT License, Copyright © 2024

See [LICENSE](LICENSE) for more information.

## Sponsors

<table width="100%">
  <tr height="187px">
    <td align="center" width="33%">
      <a href="https://clerk.com?utm_source=github&utm_medium=sponsorship&utm_campaign=nextjs-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2">
          <source media="(prefers-color-scheme: light)" srcset="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60">
          <img alt="Clerk – Authentication & User Management for Next.js" src="https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://l.crowdin.com/next-js">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/crowdin-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/crowdin-dark.png?raw=true">
          <img alt="Crowdin" src="public/assets/images/crowdin-dark.png?raw=true">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://sentry.io/for/nextjs/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/sentry-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/sentry-dark.png?raw=true">
          <img alt="Sentry" src="public/assets/images/sentry-dark.png?raw=true">
        </picture>
      </a>
      <a href="https://about.codecov.io/codecov-free-trial/?utm_source=github&utm_medium=paid-community&utm_campaign=general-fy25q1-nextjs&utm_content=github-banner-nextjsboilerplate-logo">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/codecov-white.svg?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/codecov-dark.svg?raw=true">
          <img alt="Codecov" src="public/assets/images/codecov-dark.svg?raw=true">
        </picture>
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" width="33%">
      <a href="https://posthog.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="https://posthog.com/brand/posthog-logo-white.svg">
          <source media="(prefers-color-scheme: light)" srcset="https://posthog.com/brand/posthog-logo.svg">
          <img alt="PostHog" src="https://posthog.com/brand/posthog-logo.svg">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://betterstack.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/better-stack-white.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/better-stack-dark.png?raw=true">
          <img alt="Better Stack" src="public/assets/images/better-stack-dark.png?raw=true">
        </picture>
      </a>
    </td>
    <td align="center" width="33%">
      <a href="https://www.checklyhq.com/?utm_source=github&utm_medium=sponsorship&utm_campaign=next-js-boilerplate">
        <picture>
          <source media="(prefers-color-scheme: dark)" srcset="public/assets/images/checkly-logo-dark.png?raw=true">
          <source media="(prefers-color-scheme: light)" srcset="public/assets/images/checkly-logo-light.png?raw=true">
          <img alt="Checkly" src="public/assets/images/checkly-logo-light.png?raw=true">
        </picture>
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" style=width="33%">
      <a href="https://nextjs-boilerplate.com/pro-saas-starter-kit">
        <img src="public/assets/images/nextjs-boilerplate-saas.png?raw=true" alt="Next.js SaaS Boilerplate with React" />
      </a>
    </td>
  </tr>
  <tr height="187px">
    <td align="center" width="33%">
      <a href="mailto:contact@creativedesignsguru.com">
        Add your logo here
      </a>
    </td>
  </tr>
</table>

---

Made with ♥ by [CreativeDesignsGuru](https://creativedesignsguru.com) [![Twitter](https://img.shields.io/twitter/url/https/twitter.com/cloudposse.svg?style=social&label=Follow%20%40Ixartz)](https://twitter.com/ixartz)

[![Sponsor Next JS Boilerplate](https://cdn.buymeacoffee.com/buttons/default-red.png)](https://github.com/sponsors/ixartz)

================
File: frontend/sentry.client.config.ts
================
// This file configures the initialization of Sentry on the client.
// The config you add here will be used whenever a users loads a page in their browser.
// https://docs.sentry.io/platforms/javascript/guides/nextjs/

import * as Sentry from '@sentry/nextjs';
import * as Spotlight from '@spotlightjs/spotlight';

Sentry.init({
  // Sentry DSN
  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,

  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: false,

  replaysOnErrorSampleRate: 1.0,

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // You can remove this option if you're not planning to use the Sentry Session Replay feature:
  integrations: [
    Sentry.replayIntegration({
      // Additional Replay configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

if (process.env.NODE_ENV === 'development') {
  Spotlight.init();
}

================
File: frontend/tailwind.config.ts
================
import type { Config } from 'tailwindcss';

export default {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
} satisfies Config;

================
File: frontend/tsconfig.json
================
/* eslint-disable jsonc/sort-keys */
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "strict": true,
    "alwaysStrict": true,
    "strictNullChecks": true,
    "noUncheckedIndexedAccess": true,

    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "allowUnreachableCode": false,
    "noFallthroughCasesInSwitch": true,

    "target": "es2017",
    "outDir": "out",
    "sourceMap": true,

    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "allowJs": true,
    "checkJs": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,

    "jsx": "preserve",
    "noEmit": true,
    "isolatedModules": true,
    "incremental": true,

    // Load types
    "types": ["vitest/globals"],

    // Path aliases
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/public/*": ["./public/*"]
    },

    // Editor support
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "exclude": [
    "./out/**/*",
    "./node_modules/**/*",
    "**/*.spec.ts",
    "**/*.e2e.ts"
  ],
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".storybook/*.ts",
    ".next/types/**/*.ts",
    "**/*.mts"
  ]
}

================
File: frontend/vitest-setup.ts
================
import '@testing-library/jest-dom/vitest';

import failOnConsole from 'vitest-fail-on-console';

failOnConsole({
  shouldFailOnDebug: true,
  shouldFailOnError: true,
  shouldFailOnInfo: true,
  shouldFailOnLog: true,
  shouldFailOnWarn: true,
});

================
File: frontend/vitest.config.mts
================
import react from '@vitejs/plugin-react';
import { loadEnv } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import { defineConfig } from 'vitest/config';

export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  test: {
    globals: true, // This is needed by @testing-library to be cleaned up after each test
    include: ['src/**/*.test.{js,jsx,ts,tsx}'],
    coverage: {
      include: ['src/**/*'],
      exclude: ['src/**/*.stories.{js,jsx,ts,tsx}', '**/*.d.ts'],
    },
    environmentMatchGlobs: [
      ['**/*.test.tsx', 'jsdom'],
      ['src/hooks/**/*.test.ts', 'jsdom'],
    ],
    setupFiles: ['./vitest-setup.ts'],
    env: loadEnv('', process.cwd(), ''),
  },
});

================
File: milestones/milestone1.md
================
# Milestone 1

This document should be completed and submitted during **Unit 5** of this course. You **must** check off all completed tasks in this document in order to receive credit for your work.

## Checklist

This unit, be sure to complete all tasks listed below. To complete a task, place an `x` between the brackets.

- [x] Read and understand all required features
  - [x] Understand you **must** implement **all** baseline features and **two** custom features
- [x] In `readme.md`: update app name
- [x] In `readme.md`: add all group members' names
- [x] In `readme.md`: complete the **Description and Purpose** section
- [x] In `readme.md`: complete the **Inspiration** section
- [x] In `readme.md`: list all features you intend to include in your app (in future units, you will check off features as you complete them and add GIFs demonstrating the features)
- [x] In `planning/user_stories.md`: add all user stories
- [x] In this document, complete the **Reflection** section below

## Reflection

### 1. What went well during this unit?

I thought about how I love reading and often spend a lot of time finding the perfect song to listen to. The idea of this app came along

### 2. What were some challenges your group faced in this unit?

- Designing the User Stories, User Profiles
- What tech stack to use?
- How to design the Project

### 3. What additional support will you need in upcoming units as you continue to work on your final project?

- NLP implementation for mood analysis
- Best practices for Spotify API integration
- Implementing the swipe interface
- Design database schema for book-music relationships

================
File: milestones/milestone2.md
================
# Milestone 2

This document should be completed and submitted during **Unit 6** of this course. You **must** check off all completed tasks in this document in order to receive credit for your work.

## Checklist

This unit, be sure to complete all tasks listed below. To complete a task, place an `x` between the brackets.

- [x] In `planning/wireframes.md`: add wireframes for at least three pages in your web app
  - [x] Bookly: swiping things
  - [x] Personal profile page: collections of all books
  - [x] Login/signup: page
  - [x] Color design: color palette (light, cozy, pastel?, library color-ish)
- [x] In `planning/entity_relationship_diagram.md`: add the entity relationship diagram you developed for your database
- [x] Prepare your three-minute pitch presentation, to be presented during Unit 7 (the next unit)
  - [x] You do **not** need to submit any materials in advance of your pitch
- [x] In this document, complete the **Reflection** section below

## Reflection

### 1. What went well during this unit?

Coordinating and distributing tasks

### 2. What were some challenges your group faced in this unit?

Deciding on website workflow, what tables needed for database and how the website should look

### 3. What additional support will you need in upcoming units as you continue to work on your final project?

Managing workflow and support when implementing features

================
File: milestones/milestone3.md
================
# Milestone 3

This document should be completed and submitted during **Unit 7** of this course. You **must** check off all completed tasks in this document in order to receive credit for your work.

## Checklist

This unit, be sure to complete all tasks listed below. To complete a task, place an `x` between the brackets.

You will need to reference the GitHub Project Management guide in the course portal for more information about how to complete each of these steps.

- [X] Create a project board associated with this repo
- [X] In this repo, create GitHub milestones for each of the remaining milestones in this unit
- [X] In this repo, create issues for each feature on your feature list
  - [X] Make sure to add the issues to your project board and to the appropriate milestones
- [X] Update the status of issues in your project board as you complete them
- [X] In `readme.md`, check off the features you have completed in this unit by adding a ✅ emoji in front of their title
  - [X] Under each feature you have completed, **include a GIF** showing feature functionality
- [X] In this document, complete the **Reflection** section below

## Reflection

### 1. What went well during this unit?

setting up project board and designing the milestones and issues

### 2. What were some challenges your group faced in this unit?

we had some scheduling issues and weren't able to meet up until the last day

### Did you finish all of your tasks in your sprint plan for this week? If you did not finish all of the planned tasks, how would you prioritize the remaining tasks on your list?

we were to get the project board setup but haven't started coding yet. we adjusted the milestones deadlines so that we start coding after 11/7 and finish MVP by 11/20

### Which features and user stories would you consider “at risk”? How will you change your plan if those items remain “at risk”?

the collections feature may be at risk if the book swiping and AI music matching features take longer than expected. we may have to remove some customizability from the app to finish on time

### 5. What additional support will you need in upcoming units as you continue to work on your final project?

we will need support working with the different parts of our tech stack to accomplish our goals while still meeting all the requirements set by CodePath. using the various external APIs may also be challenging to work with for our project's purpose

================
File: milestones/milestone4.md
================
# Milestone 4

This document should be completed and submitted during **Unit 8** of this course. You **must** check off all completed tasks in this document in order to receive credit for your work.

## Checklist

This unit, be sure to complete all tasks listed below. To complete a task, place an `x` between the brackets.

- [ ] Update the status of issues in your project board as you complete them
- [ ] In `readme.md`, check off the features you have completed in this unit by adding a ✅ emoji in front of their title
  - [ ] Under each feature you have completed, **include a GIF** showing feature functionality
- [ ] In this document, complete the **Reflection** section below

## Reflection

### 1. What went well during this unit?

[👉🏾👉🏾👉🏾 your answer here]

### 2. What were some challenges your group faced in this unit?

[👉🏾👉🏾👉🏾 your answer here]

### Did you finish all of your tasks in your sprint plan for this week? If you did not finish all of the planned tasks, how would you prioritize the remaining tasks on your list?

[👉🏾👉🏾👉🏾 your answer here]

### Which features and user stories would you consider “at risk”? How will you change your plan if those items remain “at risk”?

[👉🏾👉🏾👉🏾 your answer here]

### 5. What additional support will you need in upcoming units as you continue to work on your final project?

[👉🏾👉🏾👉🏾 your answer here]

================
File: milestones/milestone5.md
================
# Milestone 5

This document should be completed and submitted during **Unit 9** of this course. You **must** check off all completed tasks in this document in order to receive credit for your work.

## Checklist

This unit, be sure to complete all tasks listed below. To complete a task, place an `x` between the brackets.

- [ ] Deploy your project on Railway
  - [ ] In `readme.md`, add the link to your deployed project
- [ ] Update the status of issues in your project board as you complete them
- [ ] In `readme.md`, check off the features you have completed in this unit by adding a ✅ emoji in front of their title
  - [ ] Under each feature you have completed, **include a GIF** showing feature functionality
- [ ] In this document, complete the **Reflection** section below
- [ ] 🚩🚩🚩**Complete the Final Project Feature Checklist section below**, detailing each feature you completed in the project (ONLY include features you implemented, not features you planned)
- [ ] 🚩🚩🚩**Record a GIF showing a complete run-through of your app** that displays all the components included in the **Final Project Feature Checklist** below
  - [ ] Include this GIF in the **Final Demo GIF** section below

## Final Project Feature Checklist

Complete the checklist below detailing each baseline, custom, and stretch feature you completed in your project. This checklist will help graders look for each feature in the GIF you submit.

### Baseline Features

👉🏾👉🏾👉🏾 Check off each completed feature below.

- [ ] The project includes an Express backend app and a React frontend app
- [ ] The project includes these backend-specific features:
  - [ ] At least one of each of the following database relationship in Postgres
    - [ ] one-to-many
    - [ ] many-to-many with a join table
  - [ ] A well-designed RESTful API
    - [ ] The API can respond to at least one of each type of request: GET, POST, PATCH, and DELETE
    - [ ] Routes follow proper naming conventions
  - [ ] The ability to reset the database to its default state
- [ ] The project includes these frontend-specific features:
  - [ ] At least one redirection
  - [ ] At least one interaction that the user can initiate and complete on the same page without navigating to a new page
  - [ ] Dynamic frontend routes created with React Router
  - [ ] Hierarchically designed React components
    - [ ] Components broken down into categories, including Page and Component types
    - [ ] Corresponding container components and presenter components as appropriate
- [ ] The project includes dynamic routes for both frontend and backend apps
- [ ] The project is deployed on Railway with all pages and features working

### Custom Features

👉🏾👉🏾👉🏾 Check off each completed feature below.

- [ ] The project gracefully handles errors
- [ ] The project includes a one-to-one database relationship
- [ ] The project includes a slide-out pane or modal as appropriate for your use case
- [ ] The project includes a unique field within the join table
- [ ] The project includes a custom non-RESTful route with corresponding controller actions
- [ ] The project allows filtering and/or sorting as appropriate for your use case
- [ ] Data is automatically generated in response to a certain event or user action. Examples include generating a default inventory for a new user starting a game or creating a starter set of tasks for a user creating a new task app account
- [ ] Data submitted via a POST or PATCH request is validated before the database is updated

### Stretch Features

👉🏾👉🏾👉🏾 Check off each completed feature below.

- [ ] A subset of pages require the user to log in before accessing the content
  - [ ] Users can log in and log out via GitHub OAuth with Passport.js
- [ ] Restrict available user options dynamically, such as restricting available purchases based on a user's currency
- [ ] Show a spinner while a page or page element is loading
- [ ] Disable buttons and inputs during the form submission process
- [ ] Disable buttons after they have been clicked
- [ ] Users can upload images to the app and have them be stored on a cloud service
- [ ] 🍞 [Toast messages](https://www.patternfly.org/v3/pattern-library/communication/toast-notifications/index.html) deliver simple feedback in response to user events

## Final Demo GIF

🔗 [Here's a GIF walkthrough of the final project](👉🏾👉🏾👉🏾 your link here)

## Reflection

### 1. What went well during this unit?

[👉🏾👉🏾👉🏾 your answer here]

### 2. What were some challenges your group faced in this unit?

[👉🏾👉🏾👉🏾 your answer here]

### 3. What were some of the highlights or achievements that you are most proud of in this project?

[👉🏾👉🏾👉🏾 your answer here]

### 4. Reflecting on your web development journey so far, how have you grown since the beginning of the course?

[👉🏾👉🏾👉🏾 your answer here]

### 5. Looking ahead, what are your goals related to web development, and what steps do you plan to take to achieve them?

[👉🏾👉🏾👉🏾 your answer here]

================
File: planning/entity_relationship_diagram.md
================
# Entity Relationship Diagram

Reference the Creating an Entity Relationship Diagram final project guide in the course portal for more information about how to complete this deliverable.

## Create the List of Tables

```dbml
Table User {
  user_id integer [pk, increment]
  username varchar [not null]
  email varchar [unique, not null]
  password_hash varchar [not null]
  oauth_provider varchar
  preferred_genres varchar[]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table Book {
  book_id integer [pk, increment]
  google_books_id varchar [unique, not null]
  title varchar [not null]
  author varchar [not null]
  description text
  cover_image_url varchar
  genre varchar
  mood_score float
  rating float
  total_pages integer
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table Song {
  song_id integer [pk, increment]
  spotify_id varchar [unique, not null]
  title varchar [not null]
  artist varchar [not null]
  album varchar
  genre varchar
  mood_score float
  preview_url varchar
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table SuggestedTrack {
  suggested_track_id integer [pk, increment]
  book_id integer
  song_id integer
  match_score float
  created_at timestamp [default: `now()`]

  indexes {
    (book_id, song_id) [unique]
  }
}

Table Swipe {
  swipe_id integer [pk, increment]
  user_id integer
  book_id integer
  direction varchar [not null]
  swiped_at timestamp [default: `now()`]
}

Table ReadingProgress {
  progress_id integer [pk, increment]
  user_id integer
  book_id integer
  current_page integer
  progress_percentage float
  started_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (user_id, book_id) [unique]
  }
}

Table Collection {
  collection_id integer [pk, increment]
  user_id integer
  name varchar [not null]
  description text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table CollectionItem {
  collection_item_id integer [pk, increment]
  collection_id integer
  book_id integer
  song_id integer
  added_at timestamp [default: `now()`]

  indexes {
    (collection_id, book_id, song_id) [unique]
  }
}

// Relationships
Ref: Swipe.user_id > User.user_id
Ref: Swipe.book_id > Book.book_id
Ref: SuggestedTrack.book_id > Book.book_id
Ref: SuggestedTrack.song_id > Song.song_id
Ref: ReadingProgress.user_id > User.user_id
Ref: ReadingProgress.book_id > Book.book_id
Ref: Collection.user_id > User.user_id
Ref: CollectionItem.collection_id > Collection.collection_id
Ref: CollectionItem.book_id > Book.book_id
Ref: CollectionItem.song_id > Song.song_id
```

## Add the Entity Relationship Diagram

<img src='/bookly_db.png' title='Bookly ERD' width='' alt='ERD.png' />

================
File: planning/user_stories.md
================
# User Stories

## User Role

**Bookler**
A user who enjoys discovering books and enhancing their reading experience through matched music, creating the perfect combination of literature and soundtrack.

## User Stories

1. As a Bookler, I want to browse book recommendations through a swipe interface, so that I can quickly find my next read based on my interests.

2. As a Bookler, I want to connect my Spotify account, so that I can easily access music that matches my books.

3. As a Bookler, I want to see a preview of suggested music before starting a book, so that I can decide if the combination fits my mood.

4. As a Bookler, I want to save books I'm interested in to my reading list, so that I can keep track of what I want to read next.

5. As a Bookler, I want to explore books by music genre I enjoy, so that I can find reads that match my musical taste.

6. As a Bookler, I want to create named collections of book-music pairs, so that I can organize different reading moods or genres.

7. As a Bookler, I want to see what others are currently reading and listening to, so that I can discover popular book-music combinations.

8. As a Bookler, I want to adjust how strongly music matches my book's mood, so that the suggestions better fit my reading style.

9. As a Bookler, I want to mark whether a book-music match worked well for me, so that I can get better recommendations in the future.

10. As a Bookler, I want to share my current book and playlist combination, so that I can recommend good matches to other readers.

## Implementation Notes

### Core Features (MVP)

- 1. Book discovery with swipe interface
- 2. Spotify account integration
- 3. Basic reading list functionality
- 4. Genre-based book exploration

### Enhanced Features

- 5. Collections management
- 6. Music preview system
- 7. Personalization options

### Social Features

- 8. Community recommendations
- 9. Rating system
- 10. Sharing capabilities

## Implementation Notes

================
File: planning/wireframes.md
================
# Wireframes

Reference the Creating an Entity Relationship Diagram final project guide in the course portal for more information about how to complete this deliverable.

## List of Pages

[👉🏾👉🏾👉🏾 List the pages you expect to have in your app, with a ⭐ next to pages you have wireframed]
- Main Page which contains core swiping functionality ⭐
- Personal Profile page, contains collection of books saved ⭐
- User Profile page, view user analytics and profile descriptions ⭐
- Login Page ⭐
- Signup Page
- Social Page
- Individual Book Pages

## Wireframe 1: Main Page (contains swiping feature)

![alt text](wireframe-image-1.png)

## Wireframe 2: Book Details Page

![book details page](wireframe-image-2.png)

## Wireframe 3: User Profile Page

![personal profile page](wireframe-image-3.png)

## Wireframe 4: Login Page
![login page](wireframe-image-4.png)

================
File: README.md
================
# Bookly 📚

CodePath WEB103 Final Project

Designed and developed by: Nguyen Le, Albert C, Jason Tang

🔗 Link to deployed app:

## About

### Description and Purpose

Bookly combines Tinder's engaging swipe mechanics with personalized music recommendations. Find your next favorite book and the perfect soundtrack to accompany your reading experience!

### Inspiration

Struggle finding the perfect songs to vibe to while reading? We got you covered. While platforms like Goodreads help discover books and Spotify suggests music, there wasn't a solution that connected these two experiences in an engaging way.

## Tech Stack

Frontend:

- React
- Next.js
- TailwindCSS
- Ant Design
- Shadcn/ui?

Backend:

- NestJS
- RESTful API
- OAuth
- PostgreSQL & Prisma ORM
- Redis for caching

External APIs:

- Spotify API for music integration
- OpenAI API for mood analysis
- Google Books API for book data

## Features

### Swipe-Based Book Discovery

- Tinder-like interface for book recommendations
- Personalized suggestions based on preferences
- Quick view of book details and ratings
- Smooth animations and intuitive gestures

[gif goes here]

### AI-Powered Music Matching

- Intelligent mood analysis of books
- Automatic playlist generation
- Spotify integration for instant listening
- Customizable mood matching preferences

[gif goes here]

### Personal Collections

- Create and manage book-music collections
- Organize by mood, genre, or theme
- Share collections with other users

[gif goes here]

## Additional features (considering)

### Social Features

- Share favorite book-music combinations
- Connect with readers of similar taste
- Discover popular combinations
- Follow curators for recommendations

### Smart Analytics

- Track reading and listening patterns
- View mood correlation insights
- Get personalized recommendations
- Monitor reading goals progress

## Installation Instructions

Prerequisites

- Node.js >= 16
- PostgreSQL >= 13
- Redix >= 6
- Spotify Developer Account

1. Clone the repository

```bash
git clone https://github.com/yourusername/bookly.git
cd bookly
```

2. Install dependencies

```bash
# Install frontend dependencies
cd frontend
npm install

# Install backend dependencies
cd ../backend
npm install
```

## License

Copyright 2024 Nguyen Le

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

> http://www.apache.org/licenses/LICENSE-2.0
